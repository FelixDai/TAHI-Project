#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: IKEv2-SGW-I-1-2-5-2-A.seq,v 1.5 2010/07/22 13:33:16 doo Exp $
#
################################################################

BEGIN
{
	push(@INC, '..');
}

END {}



use IKEv2;
use strict;



my $remote	= 'common_remote_index';
my $selector	= 'common_selector_index_outbound';

my $session	= undef;
my $ike_sa_init_req_param	= undef;
my $ike_sa_init_resp_param	= undef;
my $ike_auth_req_param	= undef;
my $ike_auth_resp_param	= undef;
my $create_child_sa_req_param	= undef;
my $create_child_sa_resp_param	= undef;

my $material	= undef;
my $child_sa_material = undef;
my $ret	= undef;
my $str = undef;

my @local_ike_auth_resp = undef;
my @local_create_child_sa_req = undef;
my @local_create_child_sa_resp = undef;

kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST SETUP</B></U></FONT>');



#------------------------------#
# register IKEv2.pm            #
#------------------------------#
unless(IKEv2initialize('SGW', 'SGW')) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 module initializing failure</FONT>');
}



#---------------------------------#
# switch Support or Not Support   #
#---------------------------------#
unless ($config_pl->{'advanced_support_creating_new_child_sa'}) {
	IKEv2exitNS('Not support ' . "'advanced_support_creating_new_child_sa'");
}



#------------------------------#
# configure TN                 #
#------------------------------#
unless(IKEv2setupTN()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">TN setup failure</FONT>');
}



#------------------------------#
# configure NUT                #
#------------------------------#
unless(IKEv2setupNUT()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT setup failure</FONT>');
}



kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST PROCEDURE</B></U></FONT>');


#------------------------------#
# prepare session handler      #
#------------------------------#
$session = IKEv2create_session($remote);
unless(defined($session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 session creation failure</FONT>');
}



$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



#--------------------------------------#
# invoke IKE_SA_INIT request           #
#--------------------------------------#
unless(IKEv2initiateNUT($selector)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT initiation failure</FONT>');
}



#--------------------------------------#
# receive IKE_SA_INIT request          #
#--------------------------------------#
$ike_sa_init_req_param = devel_IKEv2receive_IKE_SA_INIT_request($session, $remote);
unless(defined($ike_sa_init_req_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT request.</FONT>');
	IKEv2exitFail();
}



$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



#--------------------------------------#
# send IKE_SA_INIT response            #
#--------------------------------------#
$ike_sa_init_resp_param = devel_IKEv2send_IKE_SA_INIT_response($session, $remote, $ike_sa_init_req_param);
unless(defined($ike_sa_init_resp_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT response.</FONT>');
}



#--------------------------------------#
# generate keying material             #
#--------------------------------------#
$material = devel_IKEv2gen_keymat(0, $ike_sa_init_req_param, $ike_sa_init_resp_param);
unless(defined($material)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t generate keying material.</FONT>');
}



#--------------------------------------#
# receive IKE_AUTH request             #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_AUTH request (HDR, SK {IDi, AUTH, SAi2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_auth_req_param = devel_IKEv2receive_IKE_AUTH_request($session,
							  $remote,
							  $ike_sa_init_req_param,
							  $ike_sa_init_resp_param,
							  $material);
unless(defined($ike_auth_req_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_AUTH request.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# prepare IKE_AUTH response            #
#--------------------------------------#
my $common_ike_auth_resp = $gen_ike_auth_resp->{$remote};
@local_ike_auth_resp = @{$common_ike_auth_resp};

# change Traffic Selector 
foreach my $payload (@local_ike_auth_resp) {
	if (($payload->{'self'} eq 'TSi')) {
		foreach my $selector (@{$payload->{'selectors'}}) {
			if (defined($selector->{'protocol'})) {
				$selector->{'saddr'} = $addresses{'th1_global_linkB'};
				$selector->{'eaddr'} = $addresses{'th1_global_linkB'};
			}
		}
	}

	if (($payload->{'self'} eq 'TSr')) {
		foreach my $selector (@{$payload->{'selectors'}}) {
			if (defined($selector->{'protocol'})) {
				$selector->{'saddr'} = $addresses{'th2_global_linkY'};
				$selector->{'eaddr'} = $addresses{'th2_global_linkY'};
			}
		}
	}
}
$gen_ike_auth_resp->{'SGW-I-1-2-6-2.1'} = \@local_ike_auth_resp;



#--------------------------------------#
# send IKE_AUTH response               #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_AUTH response (HDR, SK {IDr, AUTH, SAr2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_auth_resp_param = devel_IKEv2send_IKE_AUTH_response($session,
							 'SGW-I-1-2-6-2.1',
							 $ike_sa_init_req_param,
							 $ike_sa_init_resp_param,
							 $material);
unless (defined($ike_auth_resp_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_AUTH response.</FONT>');
}



#--------------------------------------#
# set keying material                  #
#--------------------------------------#
{
	#--------------------------------------#
	# generate keying material (CHILD_SA)  #
	#--------------------------------------#
	my $keymat = IKEv2_v6eval_generate_IPsecSA(1,	# Initial Exchanges
						   $material,
						   $ike_sa_init_req_param,
						   $ike_sa_init_resp_param,
						   $ike_auth_req_param,
						   $ike_auth_resp_param);

	my $ret = IKEv2_v6eval_set_IPsecSA(0, $keymat, $ike_auth_req_param, $ike_auth_resp_param);
	unless($ret) {
		IKEv2log(kDump_Common_Error());
		IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t set keying material.</FONT>');
	}
}



my $esp_seq_out = 1;
my $esp_seq_in = undef;
#------------------------------#
# send Echo Request            #
#------------------------------#
{
	$str  = '<PRE>';
	$str .= "                    (I)             (R)\n";
	$str .= "    TH1             NUT             TN1             TH2\n";
	$str .= "     |               |               |               |\n";
	$str .= "     |<--------------+===============+---------------| IPsec {Echo Request}\n";
	$str .= "     |               |               |               |\n";
	$str .= "     V               V               V               V";
	$str .= '</PRE>';
	IKEv2log($str);

	my $slink = 'Link0';
	my $rlink = 'Link1';
	my $spkt = 'ipsec_ereq';
	my @rpkts = ('ereq');
	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	unless ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}
}



#------------------------------#
# send Echo Reply              #
#------------------------------#
{
	$str  = '<PRE>';
	$str .= "                    (I)             (R)\n";
	$str .= "    TH1             NUT             TN1             TH2\n";
	$str .= "     |               |               |               |\n";
	$str .= "     |---------------+===============+-------------->| IPsec {Echo Reply}\n";
	$str .= "     |               |               |               |\n";
	$str .= "     V               V               V               V";
	$str .= '</PRE>';
	IKEv2log($str);

	my $slink = 'Link1';
	my $rlink = 'Link0';
	my $spkt = 'erep';
	my @rpkts = ('ipsec_erep');
	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	unless ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}

	unless(($vrecv{'recvFrame'} eq 'ipsec_tcp_rst_ack') &&
		   (defined($vrecv{'recvHexDump'}))) {
		NOTREACHED
		IKEv2og('<FONT COLOR="#ff0000">should not be reached to here</FONT>');
		IKEv2exitFatal();
	}

	$esp_seq_out++;
	$esp_seq_in = $vrecv{'Frame_Ether.Packet_IPv6.Hdr_ESP.SequenceNumber'};
	$esp_seq_in++;
}



#------------------------------#
# send Echo Request            #
#------------------------------#
{
	$str  = '<PRE>';
	$str .= "                    (I)             (R)\n";
	$str .= "    TH1             NUT             TN1             TH3\n";
	$str .= "     |               |               |               |\n";
	$str .= "     |      X--------+===============+---------------| IPsec {Echo Request}\n";
	$str .= "     |               |               |               |\n";
	$str .= "     V               V               V               V";
	$str .= '</PRE>';
	IKEv2log($str);

	my $slink = 'Link0';
	my $rlink = 'Link1';
	my $spkt = 'ipsec_ereq_th3';
	my @rpkts = ('ereq_th3');
	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	if ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}
}



#------------------------------------------#
# receive CREATE_CHILD_SA request by NUT   #
#------------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| CREATE_CHILD_SA request (HDR, SK {SA, Ni, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$session->timeout(30);
#--------------------------------------#
# invoke CREATE_CHILD_SA               #
#--------------------------------------#
unless(IKEv2initiateNUT($selector)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT initiation failure</FONT>');
}



$create_child_sa_req_param = devel_IKEv2receive_CREATE_CHILD_SA_request($session,
									$remote,
									$ike_sa_init_req_param,
									$ike_sa_init_resp_param,
									$ike_auth_req_param,
									$material);
unless(defined($create_child_sa_req_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFail('<FONT COLOR="#ff0000">Can\'t observe CREATE_CHILD_SA request.</FONT>');
}



#--------------------------------------#
# prepare CREATE_CHILD_SA response     #
#--------------------------------------#
my $common_create_child_sa_resp = $gen_create_child_sa_resp->{$remote};
@local_create_child_sa_resp = @{$common_create_child_sa_resp};

# change Traffic Selector 
foreach my $payload (@local_create_child_sa_resp) {
	if (($payload->{'self'} eq 'TSi')) {
		foreach my $selector (@{$payload->{'selectors'}}) {
			if (defined($selector->{'protocol'})) {
				$selector->{'saddr'} = $addresses{'th1_global_linkB'};
				$selector->{'eaddr'} = $addresses{'th1_global_linkB'};
			}
		}
	}

	if (($payload->{'self'} eq 'TSr')) {
		foreach my $selector (@{$payload->{'selectors'}}) {
			if (defined($selector->{'protocol'})) {
				$selector->{'saddr'} = $addresses{'th3_global_linkY'};
				$selector->{'eaddr'} = $addresses{'th3_global_linkY'};
			}
		}
	}
}
$gen_create_child_sa_resp->{'SGW-I-1-2-6-2.2'} = \@local_create_child_sa_resp;



#--------------------------------------#
# send CREATE_CHILD_SA response        #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| CREATE_CHILD_SA response (HDR, SK {SA, Nr, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


$create_child_sa_resp_param = devel_IKEv2send_CREATE_CHILD_SA_response($session,
								       $remote,
								       $ike_sa_init_req_param,
								       $ike_sa_init_resp_param,
								       $create_child_sa_req_param,
								       $material);
unless (defined($create_child_sa_resp_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send CREATE_CHILD_SA response.</FONT>');
}



#------------------------------#
# send Echo Request            #
#------------------------------#
{
	#------------------------------#
	# update IPsec SA              #
	#------------------------------#
	{
		my $cpp = '';
		$cpp .= '-DCPP_ECHO_ID=1 ';
		$cpp .= "-DCPP_ESP_SEQ_OUT=$esp_seq_out ";
		$cpp .= "-DCPP_ESP_SEQ_IN=$esp_seq_in ";

		my $conf = { 'cpp' => $cpp };
		my $ret = IKEv2_v6eval_set_IPsecSA(0, $child_sa_material_2, $create_child_sa_req_param, $create_child_sa_resp_param, $conf);
	}

	$str  = '<PRE>';
	$str .= "                    (I)             (R)\n";
	$str .= "    TH1             NUT             TN1             TH2\n";
	$str .= "     |               |               |               |\n";
	$str .= "     |<--------------+===============+---------------| IPsec {Echo Request}\n";
	$str .= "     |               |               |               |\n";
	$str .= "     V               V               V               V";
	$str .= '</PRE>';
	IKEv2log($str);

	my $slink = 'Link0';
	my $rlink = 'Link1';
	my $spkt = 'ipsec_ereq';
	my @rpkts = ('ereq');
	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	unless ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}
}



#------------------------------#
# send Echo Reply              #
#------------------------------#
{
	$str  = '<PRE>';
	$str .= "                    (I)             (R)\n";
	$str .= "    TH1             NUT             TN1             TH2\n";
	$str .= "     |               |               |               |\n";
	$str .= "     |---------------+===============+-------------->| IPsec {Echo Reply}\n";
	$str .= "     |               |               |               |\n";
	$str .= "     V               V               V               V";
	$str .= '</PRE>';
	IKEv2log($str);

	my $slink = 'Link1';
	my $rlink = 'Link0';
	my $spkt = 'erep';
	my @rpkts = ('ipsec_erep');
	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	unless ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}

	unless(($vrecv{'recvFrame'} eq 'ipsec_tcp_rst_ack') &&
		   (defined($vrecv{'recvHexDump'}))) {
		NOTREACHED
		IKEv2og('<FONT COLOR="#ff0000">should not be reached to here</FONT>');
		IKEv2exitFatal();
	}

	$esp_seq_out++;
	$esp_seq_in = $vrecv{'Frame_Ether.Packet_IPv6.Hdr_ESP.SequenceNumber'};
	$esp_seq_in++;
}



#------------------------------#
# send Echo Request            #
#------------------------------#
{
	$str  = '<PRE>';
	$str .= "                    (I)             (R)\n";
	$str .= "    TH1             NUT             TN1             TH3\n";
	$str .= "     |               |               |               |\n";
	$str .= "     |<--------------+===============+---------------| IPsec {Echo Request}\n";
	$str .= "     |               |               |               |\n";
	$str .= "     V               V               V               V";
	$str .= '</PRE>';
	IKEv2log($str);

	my $slink = 'Link0';
	my $rlink = 'Link1';
	my $spkt = 'ipsec_ereq_th3';
	my @rpkts = ('ereq_th3');
	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	if ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}
}



#------------------------------#
# send Echo Reply              #
#------------------------------#
{
	$str  = '<PRE>';
	$str .= "                    (I)             (R)\n";
	$str .= "    TH1             NUT             TN1             TH3\n";
	$str .= "     |               |               |               |\n";
	$str .= "     |<--------------+===============+---------------| IPsec {Echo Reply}\n";
	$str .= "     |               |               |               |\n";
	$str .= "     V               V               V               V";
	$str .= '</PRE>';
	IKEv2log($str);

	my $slink = 'Link0';
	my $rlink = 'Link1';
	my $spkt = 'erep_th3';
	my @rpkts = ('ipsec_erep_th3');
	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	if ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}
}



#--------------------------------------#
# exit with cleanup                    #
#--------------------------------------#
IKEv2exitPass();



#
# perldoc
#
########################################################################
__END__

=head1 Title

  Test IKEv2.SGW.I.1.2.5.2: Receipt of cryptographically valid message on the new SA
  Part A: (BASIC)

=head1 Purpose

  To verify an IKEv2 device properly handles the CREATE_CHILD_SA Exchanges to g
  enerate new CHILD_SAs.

=head1 References

  * [RFC 4306] - Sections 1.1.2,1.2 and 3.3.2
  * [RFC 4307] - Sections 3
  * [RFC 4718] - Sections 4.1

=head1 Test Setup

  * Network Topology
      Connect the devices according to the Common Topology.
  * Configuration
      In each part, configure the devices according to the Common Configuration.
  * Pre-Sequence and Cleanup Sequence
      IKEv2 on the NUT is disabled after each part.

=head1 Procedure

=begin html

<BLOCKQUOTE>
<PRE>

   TH1            NUT           TN1           TH2           TH3
 (HOST)          (SGW)         (SGW)         (Host)        (Host)
    |              |             |             |             |
    |              |------------>|             |             | IKE_SA_INIT request (HDR, SAi1, KEi, Ni)
    |              |             |             |             | (Judgement #1)
    |              |<------------|             |             | IKE_SA_INIT Response (HDR, SAr1, KEr, Nr)
    |              |             |             |             | (Packet #1)
    |              |             |             |             |
    |              |------------>|             |             | IKE_AUTH request (HDR, SK {IDi, AUTH, SAi2, TSi, TSr})
    |              |             |             |             | (Judgement #2)
    |              |<------------|             |             | IKE_AUTH Response (HDR, SK {IDr, AUTH, SAr2, TSi, TSr})
    |              |             |             |             | (Packet #2)
    |              |             |             |             |
    |<-------------+=============+-------------|             | IPSec {Echo Request}
    |              |             |             |             | (Packet #3) (Judgement #3)
    |--------------+=============+------------>|             | IPSec {Echo Reply}
    |              |             |             |             | (Packet #4) (Judgement #4)
    |              |             |             |             |
    |       X------+=============+-------------+-------------| IPSec {Echo Request}
    |              |             |             |             | (Packet #5) (Judgement #5)
    |--------------+======X      |             |             | IPSec {Echo Reply}
    |              |             |             |             | (Packet #6) (Judgement #6)
    |              |             |             |             |
    |              |------------>|             |             | CREATE_CHILD_SA request (HDR, SK {SA, Ni, TSi, TSr})
    |              |             |             |             | (Judgement #7)
    |              |<------------|             |             | CREATE_CHILD_SA response (HDR, SK {SA, Nr, TSi, TSr})
    |              |             |             |             | (Packet #7)
    |              |             |             |             |
    |<-------------+=============+-------------|             | IPSec {Echo Request}
    |              |             |             |             | (Packet #8) (Judgement #8)
    |--------------+=============+------------>|             | IPSec {Echo Reply}
    |              |             |             |             | (Packet #9) (Judgement #9)
    |              |             |             |             |
    |<-------------+=============+-------------+-------------| IPSec {Echo Request}
    |              |             |             |             | (Packet #10) (Judgement #10)
    |--------------+=============+-------------+------------>| IPSec {Echo Reply}
    |              |             |             |             | (Packet #11) (Judgement #11)
    |              |             |             |             |
    V              V             V             V             V<br>

</PRE>
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD><TT>Packet #1</TT></TD>
<TD><TT>See Common Packet #2</TT></TD>
</TR>
<TR>
<TD><TT>Packet #2</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
<TR>
<TD><TT>Packet #3</TT></TD>
<TD><TT>See Common Packet #21</TT></TD>
</TR>
<TR>
<TD><TT>Packet #4</TT></TD>
<TD><TT>See Common Packet #25</TT></TD>
</TR>
<TR>
<TD><TT>Packet #5</TT></TD>
<TD><TT>See below<br>This packet is cryptographically protected by the<br>CHILD_SA negotiated at Step 1 to Step 5.</TT></TD>
</TR>
<TR>
<TD><TT>Packet #6</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
<TR>
<TD><TT>Packet #7</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
<TR>
<TD><TT>Packet #8</TT></TD>
<TD><TT>See Common Packet #21</TT></TD>
</TR>
<TR>
<TD><TT>Packet #9</TT></TD>
<TD><TT>See Common Packet #25</TT></TD>
</TR>
<TR>
<TD><TT>Packet #10</TT></TD>
<TD><TT>See below<br>This packet is cryptographically protected by the<br>CHILD_SA negotiated at Step 14 to Step 16.</TT></TD>
</TR>
<TR>
<TD><TT>Packet #11</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
Packet #2: IKE_AUTH response
<TABLE BORDER>
<TR>
<TD>IPv6 Header</TD>
<TD colspan="2">Same as the Common Packet #4</TD>
</TR>
<TR>
<TD>UDP Header</TD>
<TD colspan="2">Same as the Common Packet #4</TD>
</TR>
<TR>
<TD>IKEv2 Header</TD>
<TD colspan="2">Same as the Common Packet #4</TD>
</TR>
<TR>
<TD>E Payload</TD>
<TD colspan="2">Same as the Common Packet #4</TD>
</TR>
<TR>
<TD>IDi Payload</TD>
<TD colspan="2">Same as the Common Packet #4</TD>
</TR>
<TR>
<TD>AUTH Payload</TD>
<TD colspan="2">Same as the Common Packet #4</TD>
</TR>
<TR>
<TD>N Payload</TD>
<TD colspan="2">Same as the Common Packet #4</TD>
</TR>
<TR>
<TD>SA Payload</TD>
<TD colspan="2">Same as the Common Packet #4</TD>
</TR>
<TR>
<TD rowspan="2">TSi Payload</TD>
<TD colspan="2">Other fields are same as the Common Packet #4</TD>
</TR>
<TR>
<TD>Traffic Selectors</TD>
<TD>See below</TD>
</TR>
<TR>
<TD rowspan="2">TSr Payload</TD>
<TD colspan="2">Other fields are same as the Common Packet #4</TD>
</TR>
<TR>
<TD>Traffic Selectors</TD>
<TD>See below</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD rowspan="7">TSi Payload</TD>
<TD rowspan="7">Traffic Selector</TD>
<TD>TS Type</TD>
<TD>8 (IPV6_ADDR_RANGE)</TD>
</TR>
<TR>
<TD>IP Protocol ID</TD>
<TD>0 (any)</TD>
</TR>
<TR>
<TD>Selector Length</TD>
<TD>40</TD>
</TR>
<TR>
<TD>Start Port</TD>
<TD>0</TD>
</TR>
<TR>
<TD>End Port</TD>
<TD>65535</TD>
</TR>
<TR>
<TD>Starting Address</TD>
<TD>TH1's Global Address on Link B</TD>
</TR>
<TR>
<TD>Ending Address</TD>
<TD>TH1's Global Address on Link B</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD rowspan="7">TSr Payload</TD>
<TD rowspan="7">Traffic Selector</TD>
<TD>TS Type</TD>
<TD>8 (IPV6_ADDR_RANGE)</TD>
</TR>
<TR>
<TD>IP Protocol ID</TD>
<TD>0 (any)</TD>
</TR>
<TR>
<TD>Selector Length</TD>
<TD>40</TD>
</TR>
<TR>
<TD>Start Port</TD>
<TD>0</TD>
</TR>
<TR>
<TD>End Port</TD>
<TD>65535</TD>
</TR>
<TR>
<TD>Starting Address</TD>
<TD>TH2's Global Address on Link Y</TD>
</TR>
<TR>
<TD>Ending Address</TD>
<TD>TH2's Global Address on Link Y</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
Packet #5: Echo Request
<TABLE BORDER>
<TR>
<TD rowspan="2">IPv6 Header</TD>
<TD>Source Address</TD>
<TD>TN1's Global Address on Link X</TD>
</TR>
<TR>
<TD>Destination Address</TD>
<TD>NUT's Global Address on Link A</TD>
</TR>
<TR>
<TD rowspan="7">ESP</TD>
<TD>Security Parameter Index</TD>
<TD>CHILD_SA's SPI value used by this message</TD>
</TR>
<TR>
<TD>Sequence Number</TD>
<TD>The value incremented the previous encrypted packet's Sequence Number by one.</TD>
</TR>
<TR>
<TD>Payload Data</TD>
<TD>Subsequent data encrypted by underlying encryption algorithm</TD>
</TR>
<TR>
<TD>Padding</TD>
<TD>Any value which to be a multiple of the encryption block size</TD>
</TR>
<TR>
<TD>Pad Length</TD>
<TD>The length of the Padding field</TD>
</TR>
<TR>
<TD>Next Header</TD>
<TD>41 (IPv6)</TD>
</TR>
<TR>
<TD>Integrity Check Value</TD>
<TD>The checksum must be valid by calculation according to the manner described in RFC.</TD>
</TR>
<TR>
<TD rowspan="2">IPv6 Header</TD>
<TD>Source Address</TD>
<TD>TH3's Global Address</TD>
</TR>
<TR>
<TD>Destination Address</TD>
<TD>TH1's Global Address</TD>
</TR>
<TR>
<TD rowspan="5">ICMPv6 Header</TD>
<TD>Type</TD>
<TD>128</TD>
</TR>
<TR>
<TD>Code</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Identifier</TD>
<TD>any</TD>
</TR>
<TR>
<TD>Sequence Number</TD>
<TD>any</TD>
</TR>
<TR>
<TD>Payload Data</TD>
<TD>0x0000000000000000</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
Packet #6: Echo Request
<TABLE BORDER>
<TR>
<TD rowspan="2">IPv6 Header</TD>
<TD>Source Address</TD>
<TD>TH1's Global Address</TD>
</TR>
<TR>
<TD>Distination Address</TD>
<TD>TH3's Global Address</TD>
</TR>
<TR>
<TD rowspan="5">ICMPv6 Header</TD>
<TD>Type</TD>
<TD>128</TD>
</TR>
<TR>
<TD>Code</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Identifier</TD>
<TD>any</TD>
</TR>
<TR>
<TD>Sequence Number</TD>
<TD>any</TD>
</TR>
<TR>
<TD>Payload Data</TD>
<TD>0x0000000000000000</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
Packet #7: CREATE_CHILD_SA response
<TABLE BORDER>
<TR>
<TD>IPv6 Header</TD>
<TD colspan="2">Same as the Common Packet #4</TD>
</TR>
<TR>
<TD>UDP Header</TD>
<TD colspan="2">Same as the Common Packet #4</TD>
</TR>
<TR>
<TD>IKEv2 Header</TD>
<TD colspan="2">Same as the Common Packet #4</TD>
</TR>
<TR>
<TD>E Payload</TD>
<TD colspan="2">Same as the Common Packet #4</TD>
</TR>
<TR>
<TD>IDi Payload</TD>
<TD colspan="2">Same as the Common Packet #4</TD>
</TR>
<TR>
<TD>AUTH Payload</TD>
<TD colspan="2">Same as the Common Packet #4</TD>
</TR>
<TR>
<TD>N Payload</TD>
<TD colspan="2">Same as the Common Packet #4</TD>
</TR>
<TR>
<TD>SA Payload</TD>
<TD colspan="2">Same as the Common Packet #4</TD>
</TR>
<TR>
<TD rowspan="2">TSi Payload</TD>
<TD colspan="2">Other fields are same as the Common Packet #4</TD>
</TR>
<TR>
<TD>Traffic Selectors</TD>
<TD>See below</TD>
</TR>
<TR>
<TD rowspan="2">TSr Payload</TD>
<TD colspan="2">Other fields are same as the Common Packet #4</TD>
</TR>
<TR>
<TD>Traffic Selectors</TD>
<TD>See below</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD rowspan="7">TSi Payload</TD>
<TD rowspan="7">Traffic Selector</TD>
<TD>TS Type</TD>
<TD>8 (IPV6_ADDR_RANGE)</TD>
</TR>
<TR>
<TD>IP Protocol ID</TD>
<TD>0 (any)</TD>
</TR>
<TR>
<TD>Selector Length</TD>
<TD>40</TD>
</TR>
<TR>
<TD>Start Port</TD>
<TD>0</TD>
</TR>
<TR>
<TD>End Port</TD>
<TD>65535</TD>
</TR>
<TR>
<TD>Starting Address</TD>
<TD>TH1's Global Address on Link B</TD>
</TR>
<TR>
<TD>Ending Address</TD>
<TD>TH1's Global Address on Link B</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD rowspan="7">TSr Payload</TD>
<TD rowspan="7">Traffic Selector</TD>
<TD>TS Type</TD>
<TD>8 (IPV6_ADDR_RANGE)</TD>
</TR>
<TR>
<TD>IP Protocol ID</TD>
<TD>0 (any)</TD>
</TR>
<TR>
<TD>Selector Length</TD>
<TD>40</TD>
</TR>
<TR>
<TD>Start Port</TD>
<TD>0</TD>
</TR>
<TR>
<TD>End Port</TD>
<TD>65535</TD>
</TR>
<TR>
<TD>Starting Address</TD>
<TD>TH3's Global Address on Link Y</TD>
</TR>
<TR>
<TD>Ending Address</TD>
<TD>TH3's Global Address on Link Y</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
Packet #10: Echo Request
<TABLE BORDER>
<TR>
<TD rowspan="2">IPv6 Header</TD>
<TD>Source Address</TD>
<TD>TN1's Global Address on Link X</TD>
</TR>
<TR>
<TD>Destination Address</TD>
<TD>NUT's Global Address on Link A</TD>
</TR>
<TR>
<TD rowspan="7">ESP</TD>
<TD>Security Parameter Index</TD>
<TD>CHILD_SA's SPI value used by this message</TD>
</TR>
<TR>
<TD>Sequence Number</TD>
<TD>The value incremented the previous encrypted packet's Sequence Number by one.</TD>
</TR>
<TR>
<TD>Payload Data</TD>
<TD>Subsequent data encrypted by underlying encryption algorithm</TD>
</TR>
<TR>
<TD>Padding</TD>
<TD>Any value which to be a multiple of the encryption block size</TD>
</TR>
<TR>
<TD>Pad Length</TD>
<TD>The length of the Padding field</TD>
</TR>
<TR>
<TD>Next Header</TD>
<TD>41 (IPv6)</TD>
</TR>
<TR>
<TD>Integrity Check Value</TD>
<TD>The checksum must be valid by calculation according to the manner described in RFC.</TD>
</TR>
<TR>
<TD rowspan="2">IPv6 Header</TD>
<TD>Source Address</TD>
<TD>TH3's Global Address</TD>
</TR>
<TR>
<TD>Destination Address</TD>
<TD>TH1's Global Address</TD>
</TR>
<TR>
<TD rowspan="5">ICMPv6 Header</TD>
<TD>Type</TD>
<TD>128</TD>
</TR>
<TR>
<TD>Code</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Identifier</TD>
<TD>any</TD>
</TR>
<TR>
<TD>Sequence Number</TD>
<TD>any</TD>
</TR>
<TR>
<TD>Payload Data</TD>
<TD>0x0000000000000000</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
Packet #11: Echo Reply
<TABLE BORDER>
<TR>
<TD rowspan="2">IPv6 Header</TD>
<TD>Source Address</TD>
<TD>TH1's Global Address</TD>
</TR>
<TR>
<TD>Distination Address</TD>
<TD>TH3's Global Address</TD>
</TR>
<TR>
<TD rowspan="5">ICMPv6 Header</TD>
<TD>Type</TD>
<TD>128</TD>
</TR>
<TR>
<TD>Code</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Identifier</TD>
<TD>any</TD>
</TR>
<TR>
<TD>Sequence Number</TD>
<TD>any</TD>
</TR>
<TR>
<TD>Payload Data</TD>
<TD>0x0000000000000000</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

  Part A: (BASIC)
     1. NUT starts to negotiate with TN1 by sending IKE_SA_INIT request.
     2. Observe the messages transmitted on Link B.
     3. TN1 responds with an IKE_SA_INIT response to the NUT.
     4. Observe the messages transmitted on Link B.
     5. After reception of IKE_AUTH request from the NUT, TN1 responds with an IKE_AUTH
         response to the NUT.
     6. TH2 transmits an Echo Request packet to TH1.
     7. Observe the messages transmitted on Link A.
     8. TH1 transmits an Echo Reply packet to TH2.
     9. Observe the messages transmitted on Link B.
     10. TH3 transmits an Echo Request packet to TH1.
     11. Observe the messages transmitted on Link A.
     12. TH1 transmits an Echo Request packet to TH3.
     13. Observe the messages transmitted on Link B.
     14. NUT starts to negotiate new CHILD_SA with TN1 by sending CREATE_CHILD_SA
         request.
     15. Observe the messages transmitted on Link B.
     16. After a reception of CREATE_CHILD_SA request from the NUT, TN1 responds with a
         CREATE_CHILD_SA response to the NUT with following Traffic Selector
     17. TH2 transmits an Echo Request packet to TH1.
     18. Observe the messages transmitted on Link A.
     19. TH1 transmits an Echo Reply packet to TH2.
     20. Observe the messages transmitted on Link B.
     21. TH3 transmits an Echo Request packet to TH1.
     22. Observe the messages transmitted on Link A.
     23. TH1 transmits an Echo Reply packet to TH3.
     24. Observe the messages transmitted on Link B.

=head1 Observable Result

  Part A
       Step 2: Judgment #1
       The NUT transmits an IKE_SA_INIT request including "ENCR_3DES",
       "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as proposed
       algorithms.

       Step 4: Judgment #2
       The NUT transmits an IKE_AUTH request including "ENCR_3DES",
       "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" as proposed algorithms.

       Step 7: Judgment #3
       The NUT forwards an Echo Request.

       Step 9: Judgment #4
       The NUT forwards an Echo Request with IPsec ESP using corresponding algorithms.

       Step 11: Judgment #5
       The NUT never forwards an Echo Request.

       Step 13: Judgment #6
       The NUT never forwards an Echo Request.

       Step 15: Judgment #5
       The NUT transmits a CREATE_CHILD_SA request including including "ENCR_3DES",
       "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" as proposed algorithms.

       Step 7: Judgment #3
       The NUT forwards an Echo Request.

       Step 9: Judgment #4
       The NUT forwards an Echo Reply with IPsec ESP using corresponding algorithms.

       Step 11: Judgment #5
       The NUT forwards an Echo Request.

       Step 13: Judgment #6
       The NUT forwards an Echo Reply with IPsec ESP using corresponding algorithms.

=head1 Possible Problems

  * None.

=cut


