#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: IKEv2-SGW-I-1-1-8-1-B.seq,v 1.2 2008/11/28 10:16:25 doo Exp $
#
################################################################

BEGIN
{
	push(@INC, '..');
        $ENV{'V6EVAL_WITH_KOI'} = 'TRUE';
}

END {}

use V6evalTool;
use IKEv2v6eval;
use IKEv2;
use strict;



my $remote	= 'common_remote_index';
my $selector	= 'common_selector_index_outbound';


my $session	= undef;
my $ret	= undef;
my $str = undef;

my $ike_sa_init_req_param	= undef;
my $ike_sa_init_resp_param	= undef;
my $ike_auth_req_param	= undef;
my $ike_auth_resp_param	= undef;
my $create_child_sa_req_param = undef;
my $create_child_sa_resp_param = undef;
my $informational_req_param = undef;

my $material	= undef;
my $child_sa_material	= undef;

my @local_create_child_sa_req		= undef
my @local_create_child_sa_resp		= undef
my @local_informational_req	= undef;



#--------------------------------------#
# prepare IKE_AUTH request             #
#--------------------------------------#
my $common_exp_ike_auth_req = $exp_ike_auth_req->{'common_remote_index'};
my @local_ike_auth_req = @{$common_exp_ike_auth_req};
# remove N(USE_TRANSPORT_MODE)
foreach my $payload (@local_ike_auth_req) {
        if ($payload->{'self'} eq 'E') {
                my @payloads = grep {
                                my $ret = 0;
                                if ($_->{'self'} ne 'N') { $ret = 1; }
                                if ($_->{'type'} ne 'USE_TRANSPORT_MODE') { $ret = 1; }
                                $ret;
                        } @{$payload->{'innerPayloads'}};

                $payload->{'innerPayloads'} = \@payloads;
        }
}
# set correct nexttype
for (my $i = 0; $i < scalar(@local_ike_auth_req); $i++) {
        my $payload = $local_ike_auth_req[$i];

        if ($payload->{'self'} eq 'E') {
                for (my $j = 0; $j < scalar(@{$payload->{'innerPayloads'}}); $j++) {
                        my $cur = $payload->{'innerPayloads'}->[$j];
                        my $next = $payload->{'innerPayloads'}->[$j+1];
                        unless (defined($next)) {
                                $cur->{'nexttype'} = '0';
                                next;
                        }
                        if ($cur->{'nexttype'} eq $next->{'self'}) {
                                next;
                        }
                        $cur->{'nexttype'} = $next->{'self'};
                }

                next;
        }

}
$exp_ike_auth_req->{'SGW_I_IKE_AUTH_REQ'} = \@local_ike_auth_req;



#--------------------------------------#
# prepare IKE_AUTH response            #
#--------------------------------------#
my $common_gen_ike_auth_resp = $gen_ike_auth_resp->{'common_remote_index'};
my @local_ike_auth_resp = @{$common_gen_ike_auth_resp};
# remove N(USE_TRANSPORT_MODE)
@local_ike_auth_resp = grep {
                my $ret = 0;
                if ($_->{'self'} ne 'N') { $ret = 1; }
                if ($_->{'type'} ne 'USE_TRANSPORT_MODE') { $ret = 1; }
                $ret;
        } @local_ike_auth_resp;
                                
$gen_ike_auth_resp->{'SGW_I_IKE_AUTH_RESP'} = \@local_ike_auth_resp;



kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST SETUP</B></U></FONT>');



#------------------------------#
# register IKEv2.pm            #
#------------------------------#
unless(IKEv2initialize('SGW', 'SGW')) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 module initializing failure</FONT>');
}



#------------------------------#
# customize configuration      #
#------------------------------#
my $conf = {
	'kmp_sa_lifetime' => '120',
	'ipsec_sa_lifetime' => '60',
};
unless (IKEv2customize($conf)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 configuration failure</FONT>');
}



#------------------------------#
# configure TN                 #
#------------------------------#
unless(IKEv2setupTN()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">TN setup failure</FONT>');
}



#------------------------------#
# configure NUT                #
#------------------------------#
unless(IKEv2setupNUT()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT setup failure</FONT>');
}



kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST PROCEDURE</B></U></FONT>');


#------------------------------#
# prepare session handler      #
#------------------------------#
$session = IKEv2create_session($remote);
unless(defined($session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 session creation failure</FONT>');
}



$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



#--------------------------------------#
# invoke IKE_SA_INIT request           #
#--------------------------------------#
unless(IKEv2initiateNUT($selector)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT initiation failure</FONT>');
}



#--------------------------------------#
# receive IKE_SA_INIT request          #
#--------------------------------------#
$ike_sa_init_req_param = devel_IKEv2receive_IKE_SA_INIT_request($session, $remote);
unless(defined($ike_sa_init_req_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT request.</FONT>');
	IKEv2exitFail();
}



$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



#--------------------------------------#
# send IKE_SA_INIT response            #
#--------------------------------------#
$ike_sa_init_resp_param = devel_IKEv2send_IKE_SA_INIT_response($session, $remote, $ike_sa_init_req_param);
unless(defined($ike_sa_init_resp_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT response.</FONT>');
}



#--------------------------------------#
# generate keying material             #
#--------------------------------------#
$material = devel_IKEv2gen_keymat(0, $ike_sa_init_req_param, $ike_sa_init_resp_param);
unless(defined($material)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t generate keying material.</FONT>');
}



#--------------------------------------#
# receive IKE_AUTH request             #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_AUTH request (HDR, SK {IDi, AUTH, SAi2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_auth_req_param = devel_IKEv2receive_IKE_AUTH_request($session,
							  'SGW_I_IKE_AUTH_REQ',
							  $ike_sa_init_req_param,
							  $ike_sa_init_resp_param,
							  $material);
unless(defined($ike_auth_req_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_AUTH request.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# send IKE_AUTH response               #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_AUTH response (HDR, SK {IDr, AUTH, SAr2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_auth_resp_param = devel_IKEv2send_IKE_AUTH_response($session,
							 'SGW_I_IKE_AUTH_RESP',
							 $ike_sa_init_req_param,
							 $ike_sa_init_resp_param,
							 $material);
unless (defined($ike_auth_resp_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_AUTH response.</FONT>');
}



#--------------------------------------#
# generate keying material (CHILD_SA)  #
#--------------------------------------#
$child_sa_material = devel_IKEv2gen_child_sa_keymat(1,	# Initial Exchanges
						    $material,
						    $ike_sa_init_req_param,
						    $ike_sa_init_resp_param,
						    $ike_auth_req_param,
						    $ike_auth_resp_param);



#--------------------------------------#
# set Upper Protocol for TN's SPD      #
#--------------------------------------#
IKEv2set_SPD('upperspec', 'icmp6');



#--------------------------------------#
# set keying material                  #
#--------------------------------------#
$ret = IKEv2set_child_sa_keymat(0, $child_sa_material, $ike_auth_req_param, $ike_auth_resp_param);
unless($ret) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t set keying material.</FONT>');
}



#--------------------------------------#
# prepare ICMP session handler         #
#--------------------------------------#
my $icmp_session_th2 = ICMPcreate_session('TH2sendtoTH1');
unless(defined($icmp_session_th2)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">ICMP session creation failure</FONT>');
}


my $icmp_session_th1 = ICMPcreate_session('TH1sendtoTH2');
unless(defined($icmp_session_th1)) {
        IKEv2exitFatal('<FONT COLOR="#ff0000">ICMP session creation failure</FONT>');
}



#--------------------------------------#
# prepare CREATE_CHILD_SA request      #
#--------------------------------------#
my $req_notify_for_rekey =
{       # Notify Payload
	'self'		=> 'N',		# *** MUST BE HERE ***
	'nexttype'	=> undef,	# Next Payload
	'critical'	=> '0',		# Critical
	'reserved'	=> '0',		# RESERVED
	'length'	=> '12',	# Payload Length
	'id'		=> 'ESP',	# Protocol ID
	'spiSize'	=> '4',		# SPI Size
	'type'		=> 'REKEY_SA',	# Notify Message Type
	'spi'		=> undef,	# SPI
};
my $common_create_child_sa_req = $exp_create_child_sa_req->{'common_remote_index'};
@local_create_child_sa_req = @{$common_create_child_sa_req};

# remove N(USE_TRANSPORT_MODE)
foreach my $payload (@local_create_child_sa_req) {
        if ($payload->{'self'} eq 'E') {
                my @payloads = grep {
                                my $ret = 0;
                                if ($_->{'self'} ne 'N') { $ret = 1; }
                                if ($_->{'type'} ne 'USE_TRANSPORT_MODE') { $ret = 1; }
                                $ret;
                        } @{$payload->{'innerPayloads'}};

                $payload->{'innerPayloads'} = \@payloads;
        }
}

# set correct nexttype
foreach my $payload1 (@local_create_child_sa_req) {
	if ($payload1->{'self'} eq 'E') {
		unshift(@{$payload1->{'innerPayloads'}}, $req_notify_for_rekey);

		#set correct nexttype
		$payload1->{'innerType'} = @{$payload1->{'innerPayloads'}}[0]->{'self'};
		for (my $j = 0; $j < scalar(@{$payload1->{'innerPayloads'}}); $j++) {
			my $inner = ${$payload1->{'innerPayloads'}}[$j];
			my $next = ${$payload1->{'innerPayloads'}}[$j+1];
			if (defined($next)) {
				$inner->{'nexttype'} = $next->{'self'};
                        }
			else {
				$inner->{'nexttype'} = '0';
			}
                }
        }
}
$exp_create_child_sa_req->{'SGW-I-1-3-3-1.1'} = \@local_create_child_sa_req;



#-------------------------------------------------------------#
# repeat Echo exchange until lifetime of NUT's SA is expired  #
#-------------------------------------------------------------#
my $sa_life = $config_pl->{'ikev2_nut_child_sa_lifetime'};
my $t1 = time;
my $t2 = time;

while (($t2 - $t1) < $sa_life)
{
        #--------------------------------------#
        # send Echo Reply                      #
        #--------------------------------------#
        $str  = '<PRE>';
        $str .= "                    (I)             (R)\n";
        $str .= "    TH1             NUT             TN1             TH2\n";
        $str .= "     |               |               |               |\n";
        $str .= "     |<--------------+===============+---------------| IPsec (Echo Reply)\n";
        $str .= "     |               |               |               |\n";
        $str .= "     V               V";
        $str .= '</PRE>';
        kLogHTML($str);

        $ret = ICMPsend($icmp_session_th2, 'echo_request');
        unless(defined($ret)) {
                kLogHTML(kDump_Common_Error());
                IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send ICMP packet.</FONT>');
        }



        #--------------------------------------#
        # receive Echo Reply                   #
        #--------------------------------------#
        $ret = ICMPreceive($icmp_session_th1);
        unless(defined($ret)) {
                my $strerror = kDump_Common_Error();
                kLogHTML('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
                IKEv2exitFail();
        }



        #--------------------------------------#
        # send Echo Reply                      #
        #--------------------------------------#
	$str  = '<PRE>';
	$str .= "                    (I)             (R)\n";
	$str .= "    TH1             NUT             TN1             TH2\n";
	$str .= "     |               |               |               |\n";
	$str .= "     |---------------+===============+-------------->| IPsec {Echo Reply}\n";
	$str .= "     |               |               |               |\n";
	$str .= "     V               V               V               V";
	$str .= '</PRE>';

	kLogHTML($str);

	$ret = ICMPsend_v6eval('TH1sendtoTH2', 'echo_reply');
	unless (defined($ret)) {
		kLogHTML(kDump_Common_Error());
		IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send ICMP packet.</FONT>');
	}



	#--------------------------------------#
	# receive Echo Reply                   #
	#--------------------------------------#
	$ret = ICMPreceive($icmp_session_th2);
	unless(defined($ret)) {
		my $strerror = kDump_Common_Error();
		kLogHTML('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}



	#------------------------------------------#
	# receive CREATE_CHILD_SA request by NUT   #
	#------------------------------------------#
	$str  = '<PRE>';
	$str .= "    (I)             (R)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |-------------->| CREATE_CHILD_SA request (HDR, SK {N(REKEY_SA), SA, Ni, TSi, TSr})\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';

	kLogHTML($str);


	$session->timeout(3);
	$create_child_sa_req_param = devel_IKEv2receive_CREATE_CHILD_SA_request($session,
                                                                                'SGW-I-1-3-3-1.1',
                                                                                $ike_sa_init_req_param,
                                                                                $ike_sa_init_resp_param,
                                                                                $ike_auth_req_param,
                                                                                $material);
        $t2 = time;

        if (defined($create_child_sa_req_param)) {
                last;
        }
}

if (($t2 - $t1) >= $sa_life)
{
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe CREATE_CHILD_SA request for rekey.</FONT>');
	IKEv2exitFail();
}



#---------------------------------------------------------------#
# prepare CREATE_CHILD_SA Response (w/ invalid responder's SPI) #
#---------------------------------------------------------------#
my $common_create_child_sa_resp = $gen_create_child_sa_resp->{'common_remote_index'};
@local_create_child_sa_resp = @{$common_create_child_sa_resp};
# set invalid responder's SPI
for (my $i = 0; $i < scalar(@local_create_child_sa_resp); $i++) {
	my $payload = $local_create_child_sa_resp[$i];

	if ($payload->{'self'} eq 'HDR') {
		my $original_spi = hex($ike_sa_init_resp_param->{'spi'});
		my $invalid_spi = $original_spi + 0x01;
                $payload->{'respSPI'} = sprintf("%x", $invalid_spi);
	}
}
$gen_create_child_sa_resp->{'SGW-I-1-3-3-1.2'} = \@local_create_child_sa_resp;



#--------------------------------------#
# send CREATE_CHILD_SA response        #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| CREATE_CHILD_SA response (HDR, SK {SA, Nr, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$create_child_sa_resp_param = devel_IKEv2send_CREATE_CHILD_SA_response($session,
								       'SGW-I-1-3-3-1.2',
								       $ike_sa_init_req_param,
								       $ike_sa_init_resp_param,
								       $create_child_sa_req_param,
								       $material);

unless (defined($create_child_sa_resp_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe CREATE_CHILD_SA response.</FONT>');
	IKEv2exitFail();
}



#----------------------------------------------------#
# prepare INFORMATIONAL Request (w/ INVALID_IKE_SPI) #
#----------------------------------------------------#
my $notify_invalid_ike_spi =
{	# Notify Payload
	'self'		=> 'N',	    # *** MUST BE HERE ***
	'nexttype'	=> '0',	    # Next Payload
	'critical'	=> '0',	    # Critical
	'reserved'	=> '0',	    # RESERVED
	'length'	=> '8',	    # Payload Length
	'id'		=> '0',	    # Protocol ID
	'spiSize'	=> '0',	    # SPI Size
	'type'		=> 'INVALID_IKE_SPI',	  # Notify Type
	'spi'		=> '',	    # SPI
	'data'		=> ''	    # Notification Data
};
my $common_informational_req = $exp_informational_req->{'common_remote_index'};
@local_informational_req = @{$common_informational_req};
for (my $i = 0; $i < scalar(@local_informational_req); $i++) {
	if ($local_informational_req[$i]->{'self'} eq 'E') {
		splice(@{$local_informational_req[$i]->{'innerPayloads'}}, 0);
		push(@{$local_informational_req[$i]->{'innerPayloads'}}, $notify_invalid_ike_spi);
		$local_informational_req[$i]->{'innerType'} = 'N';
		last;
	}
}
$exp_informational_req->{'SGW-I-1-3-3-1.3'} = \@local_informational_req;



#--------------------------------------#
# receive INFORMATIONAL Request        #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |--------X      | INFORMATIONAL Request (HDR, SK {N(INVALID_IKE_SPI)})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


$informational_req_param = devel_IKEv2receive_INFORMATIONAL_request($session,
								    'SGW-I-1-3-3-1.3',
								    $ike_sa_init_req_param,
								    $ike_sa_init_resp_param,
								    $ike_auth_req_param,
								    $material);
if (defined($informational_req_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Observe INFORMATIONAL request.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# exit with cleanup                    #
#--------------------------------------#
IKEv2exitPass();



#
# perldoc
#
########################################################################
__END__

=head1 Title

  Test IKEv2.SGW.I.1.1.8.1: INVALID_IKE_SPI
  Part B: Different IKE Responder's SPI (BASIC)

=head1 Purpose

  To verify an IKEv2 device properly handles an unrecognized destination SPI.

=head1 References

  * [RFC 4306] - Sections 2.21 and 3.10.1
  * [RFC 4718] - Sections 7.7

=head1 Test Setup

  * Network Topology
      Connect the devices according to the Common Topology.
  * Configuration
      In each part, configure the devices according to the Common Configuration.
  * Pre-Sequence and Cleanup Sequence
      IKEv2 on the NUT is disabled after each part.

=head1 Procedure

=begin html

<BLOCKQUOTE>
<PRE>

   TH1            NUT           TN1           TH2
 (HOST)          (SGW)         (SGW)         (Host)
    |              |             |             |
    |              |------------>|             | IKE_SA_INIT request (HDR, SAi1, KEi, Ni)
    |              |             |             | (Judgement #1)
    |              |<------------|             | IKE_SA_INIT Response (HDR, SAr1, KEr, Nr)
    |              |             |             | (Packet #1)
    |              |             |             |
    |              |------------>|             | IKE_AUTH request (HDR, SK {IDi, AUTH, SAi2, TSi, TSr})
    |              |             |             | (Judgement #2)
    |              |<------------|             | IKE_AUTH Response (HDR, SK {IDr, AUTH, SAr2, TSi, TSr})
    |              |             |             | (Packet #2)
    |              |             |             |
   ---            ---           ---           ---
    |              |             |             |                             ---
    |<-------------+=============+-------------| IPSec {Echo Request}         | repeat Echo Exchange
    |              |             |             | (Packet #3) (Judgement #3)   | until lifetime of
    |--------------+=============+------------>| IPSec {Echo Reply}           | SA is expired
    |              |             |             | (Packet #4) (Judgement #4)   |
    |              |             |             |                             ---
   ---            ---           ---           ---
    |              |             |             |
    |              |------------>|             | CREATE_CHILD_SA request (HDR, SK {N, SA, Ni, KEi, TSi, TSr})
    |              |             |             | (Judgement #4)
    |              |<------------|             | CREATE_CHILD_SA response (HDR, SK {SA, Nr, KEr, TSi, TSr})
    |              |             |             | (Packet #5)
    |              |             |             |
    |              |------------>|             | CREATE_CHILD_SA request (HDR, N(INVALID_IKE_SPI))
    |              |             |             | (Judgement #5)
    |              |             |             |
    V              V             V             V<br>

 N: REKEY_SA

</PRE>
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD><TT>Packet #1</TT></TD>
<TD><TT>See Common Packet #2</TT></TD>
</TR>
<TR>
<TD><TT>Packet #2</TT></TD>
<TD><TT>See Common Packet #6</TT></TD>
</TR>
<TR>
<TD><TT>Packet #3</TT></TD>
<TD><TT>See Common Packet #21</TT></TD>
</TR>
<TR>
<TD><TT>Packet #4</TT></TD>
<TD><TT>See Common Packet #25</TT></TD>
</TR>
<TR>
<TD><TT>Packet #5</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>
<br>

<BLOCKQUOTE>
Part B<br>
Packet #5: CREATE_CHILD_SA response
<TABLE BORDER>
<TR>
<TD>IPv6 Header</TD>
<TD colspan="2">Same as Common Packet #16</TD>
</TR>
<TR>
<TD>UDP Header</TD>
<TD colspan="2">Same as Common Packet #16</TD>
</TR>
<TR>
<TD rowspan="3">IKEv2 Header</TD>
<TD>IKE_SA Initator's SPI</TD>
<TD>The IKE_SA Responder's SPI value<br>used by this IKE message</TD>
</TR>
<TR>
<TD>IKE_SA Responder's SPI</TD>
<TD>The IKE_SA Initiator's SPI value<br>used by this IKE message plus 1</TD>
</TR>
<TR>
<TD colspan="2">Other field are same as Common Packet #16</TD>
</TR>
<TR>
<TD>E Payloa</TD>
<TD colspan="2">Same as Common Packet #16</TD>
</TR>
<TR>
<TD>N Payload</TD>
<TD colspan="2">Same as Common Packet #16</TD>
</TR>
<TR>
<TD>SA Payload</TD>
<TD colspan="2">Same as Common Packet #16</TD>
</TR>
<TR>
<TD>Ni, Nr Payload</TD>
<TD colspan="2">Same as Common Packet #16</TD>
</TR>
<TR>
<TD>TSi Payload</TD>
<TD colspan="2">Same as Common Packet #16</TD>
</TR>
<TR>
<TD>TSr Payload</TD>
<TD colspan="2">Same as Common Packet #16</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

  Part B: Different IKE Responder's SPI (BASIC)
     12. NUT starts to negotiate with TN1 by sending IKE_SA_INIT request.
     13. Observe the messages transmitted on Link B.
     14. TN1 responds with an IKE_SA_INIT response to the NUT.
     15. Observe the messages transmitted on Link B.
     16. After reception of IKE_AUTH request from the NUT, TN1 responds with an IKE_AUTH
         response to the NUT
     17. TN1 transmits an Echo Request with IPsec ESP using the first negotiated algorithms to NUT.
     18. Observe the messages transmitted on Link B.
     19. Repeat Steps 6 and 7 until lifetime of SA is expired.
     20. Observe the messages transmitted on Link B.
     21. After reception of CREATE_CHILD_SA request for rekeying from the NUT, TN1 responds
         with a CREATE_CHILD_SA response which has an invalid value as IKE_SA Responder's
         SPI to the NUT.
     22. Observe the messages transmitted on Link B.

=head1 Observable Result

  Part B
       Step 13: Judgment #1
       The NUT transmits an IKE_SA_INIT request including "ENCR_3DES",
       "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as proposed
       algorithms.

       Step 15: Judgment #2
       The NUT transmits an IKE_SA_INIT request including "ENCR_3DES",
       "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as proposed
       algorithms and a Key Exchange payload which contains a recalculated Key Exchange Data.

       Step 18: Judgment #3
       The NUT transmits an Echo Reply with IPsec ESP using corresponding algorithms.

       Step 20: Judgment #4
       The NUT transmits a CREATE_CHILD_SA request including "ENCR_3DES",
       "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" as proposed
       algorithms. And the CREATE_CHILD_SA request includes a Notify payload of type
       REKEY_SA containing rekeyed CHILD_SA's SPI value in the SPI field.

       Step 22: Judgment #5
       NUT does not any packets or may transmit an INFORMATIONAL request with a Notify
       payload of type INVALID_IKE_SPI.

=head1 Possible Problems

  * None. 

=cut


