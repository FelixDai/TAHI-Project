#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: IKEv2-SGW-I-1-1-6-6-A.seq,v 1.5 2010/07/22 13:33:15 doo Exp $
#
################################################################

BEGIN
{
	push(@INC, '..');
}

END {}


use IKEv2;
use strict;



my $remote	= 'common_remote_index';
my $selector	= 'common_selector_index_outbound';


my $session	= undef;
my $str = undef;

my $ike_sa_init_req_param	= undef;
my $ike_sa_init_resp_param	= undef;
my $ike_auth_req_param = undef;

my $material = undef;
my @local_ike_auth_req = undef;
my $second_proposal = undef;



kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST SETUP</B></U></FONT>');


#------------------------------#
# register IKEv2.pm            #
#------------------------------#
unless(IKEv2initialize('SGW', 'SGW')) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 module initializing failure</FONT>');
}



#---------------------------------#
# switch Support or Not Support   #
#---------------------------------#
unless ($config_pl->{'advanced_multiple_proposal_initial_child_sa'}) {
	IKEv2exitNS('Not support ' . "'advanced_multiple_proposal_initial_child_sa'");
}

unless ($config_pl->{'advanced_support_encr_aes_cbc'}) {
	IKEv2exitNS('Not support ' . "'advanced_support_encr_aes_cbc'");
}

unless ($config_pl->{'advanced_support_auth_aes_xcbc_96'}) {
	IKEv2exitNS('Not support ' . "'advanced_support_auth_aes_xcbc_96'");
}

unless ($config_pl->{'advanced_support_esn'}) {
	IKEv2exitNS('Not support ' . "'advanced_support_esn'");
}



#------------------------------#
# configure TN                 #
#------------------------------#
unless(IKEv2setupTN()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">TN setup failure</FONT>');
}



#------------------------------#
# configure NUT                #
#------------------------------#
unless(IKEv2setupNUT()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT setup failure</FONT>');
}



kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST PROCEDURE</B></U></FONT>');



#------------------------------#
# prepare session handler      #
#------------------------------#
$session = IKEv2create_session($remote);
unless(defined($session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 session creation failure</FONT>');
}



$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



#--------------------------------------#
# invoke IKE_SA_INIT request           #
#--------------------------------------#
unless(IKEv2initiateNUT($selector)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT initiation failure</FONT>');
}




#--------------------------------------#
# receive IKE_SA_INIT request          #
#--------------------------------------#
$ike_sa_init_req_param = devel_IKEv2receive_IKE_SA_INIT_request($session, $remote);
unless(defined($ike_sa_init_req_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT request.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# send IKE_SA_INIT response            #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);

$ike_sa_init_resp_param = devel_IKEv2send_IKE_SA_INIT_response($session, $remote, $ike_sa_init_req_param);
unless(defined($ike_sa_init_resp_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT response.</FONT>');
}


#--------------------------------------#
# generate keying material             #
#--------------------------------------#
$material = devel_IKEv2gen_keymat(0, $ike_sa_init_req_param, $ike_sa_init_resp_param);
unless(defined($material)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t generate keying material.</FONT>');
}


#--------------------------------------#
# prepare IKE_AUTH request             #
#--------------------------------------#
my $common_ike_auth_req = IKEv2load_packet($exp_ike_auth_req,'common_remote_index');
my @local_ike_auth_req = @{$common_ike_auth_req};
# change Protocol ID
for (my $i = 0; $i < scalar(@local_ike_auth_req); $i++) {
        my $payload = $local_ike_auth_req[$i];

        if ($payload->{'self'} eq 'E') {
		for (my $l = 0; $l < scalar(@{$payload->{'innerPayloads'}}); $l++) {
                        my $inner = @{$payload->{'innerPayloads'}}[$l];
			if ($inner->{'self'} eq 'SA') {
				for (my $j = 0; $j < scalar(@{$inner->{'proposals'}}); $j++) {
					$second_proposal = @{$inner->{'proposals'}}[$j];
					$second_proposal->{'id'} = 'ESP';
					$second_proposal->{'nexttype'} = 0;
					$second_proposal->{'number'} = 2;
	
					if (defined($second_proposal->{'transforms'})) {
						foreach my $transform (@{$second_proposal->{'transforms'}}) {
							if ($transform->{'type'} eq 'ENCR') {
								$transform->{'id'} = 'AES_CBC';
								next;
							}
							if ($transform->{'type'} eq 'INTEG') {
								$transform->{'id'} = 'AES_XCBC_96';
								next;
							}
							if ($transform->{'type'} eq 'ESN') {
								$transform->{'id'} = 'ESN';
								next;
							}
						}
					}
				}
			}
		}
	}
}
# add second proposal
my $common2_ike_auth_req = IKEv2load_packet($exp_ike_auth_req, $remote);
@local_ike_auth_req = @{$common2_ike_auth_req};
for (my $i = 0; $i < scalar(@local_ike_auth_req); $i++) {
       my $payload = $local_ike_auth_req[$i];

       if ($payload->{'self'} eq 'E') {
            for (my $l = 0; $l < scalar(@{$payload->{'innerPayloads'}}); $l++) {
                 my $inner = @{$payload->{'innerPayloads'}}[$l];
                 if ($inner->{'self'} eq 'SA') {
                      push(@{$inner->{'proposals'}}, $second_proposal);
                      @{$inner->{'proposals'}}[0]->{'nexttype'} = 2; 
                      @{$inner->{'proposals'}}[0]->{'number'} = 1; 
                 }
            }
       }
}
$exp_ike_auth_req->{'SGW-I-1-1-6-102.1'} = \@local_ike_auth_req;


#--------------------------------------#
# receive IKE_AUTH request             #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_AUTH request (HDR, SK {IDi, AUTH, SAi2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


$ike_auth_req_param = devel_IKEv2receive_IKE_AUTH_request($session,
							  'SGW-I-1-1-6-102.1',
							  $ike_sa_init_req_param,
							  $ike_sa_init_resp_param,
							  $material);
unless(defined($ike_auth_req_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_AUTH request.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# exit with cleanup                    #
#--------------------------------------#
IKEv2exitPass();



#
# perldoc
#
########################################################################
__END__

=head1 Title

  Test IKEv2.SGW.I.1.1.6.6: Sending Multiple Proposals for CHILD_SA
  Part A: (ADVANCED)

=head1 Purpose

  To verify an IKEv2 device properly transmits IKE_AUTH request with multiple proposals
  for CHILD_SA.

=head1 References

  * [RFC 4306] - Sections 3.3

=head1 Test Setup

  * Network Topology
      Connect the devices according to the Common Topology.
  * Configuration
      In each part, configure the devices according to the following configuration.

=begin html

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD rowspan="2"></TD>
<TD colspan="5">IKE_AUTH exchanges Algorithms</TD>
</TR>
<TR>
<TD>Proposal</TD>
<TD>Protocol ID</TD>
<TD>Encryption</TD>
<TD>Integrity</TD>
<TD>ESN</TD>
</TR>
<TR>
<TD rowspan="2">Part A</TD>
<TD>Proposal #1</TD>
<TD>ESP</TD>
<TD>ENCR_3DES</TD>
<TD>AUTH_HMAC_SHA1_96</TD>
<TD>No ESN</TD>
</TR>
<TR>
<TD>Proposal #2</TD>
<TD>ESP</TD>
<TD>ENCR_AES_CBC</TD>
<TD>AUTH_AES_XCBC_96</TD>
<TD>ESN</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

  * Pre-Sequence and Cleanup Sequence
      IKEv2 on the NUT is disabled after each part.

=head1 Procedure

=begin html

<BLOCKQUOTE>
<PRE>

   NUT                  TN1
(End-Node)           (End-Node)
    |                    |
    |------------------->| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)
    |                    | (Judgement #1)
    |<-------------------| IKE_SA_INIT Response (HDR, SAr1, KEr, Nr)
    |                    | (Packet #1)
    |                    |
    |------------------->| IKE_AUTH request (HDR, SK {IDi, AUTH, SAi2, TSi, TSr})
    |                    | (Judgement #2)
    |                    |
    V                    V
  
<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD><TT>Packet #1</TT></TD>
<TD><TT>See Common Packet #2</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>
</BLOCKQUOTE>

</PRE>
</BLOCKQUOTE>

=end html

  Part A: (ADVANCED)
     1. TN1 starts to negotiate with NUT by sending IKE_SA_INIT request.
     2. Observe the messages transmitted on Link B.
     3. After reception of IKE_SA_INIT response from the NUT, TN1 transmits an IKE_AUTH
        request including a SA payload as described above to the NUT.
     4. Observe the messages transmitted on Link B.

=head1 Observable Result

  Part A
       Step 2: Judgment #1
       The NUT transmits an IKE_SA_INIT request including "ENCR_3DES",
       "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as proposed
       algorithms.

       Step 4: Judgment #2
       The NUT transmits an IKE_AUTH request including "ENCR_3DES",
       "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" in SA Proposal #1
       (ESP) and then "ENCR_AES_CBC", "AUTH_AES_XCBC_96" and "Extended Sequence
       Numbers" in SA Proposal #2 (ESP) as accepted algorithms.

=head1 Possible Problems

  * None.

=cut


