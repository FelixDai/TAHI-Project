#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: IKEv2-SGW-I-1-2-4-2-A.seq,v 1.8 2010/10/27 08:21:16 doo Exp $
#
################################################################

BEGIN
{
	push(@INC, '..');
}

END {}

use IKEv2;
use strict;



my $remote	= 'common_remote_index';
my $selector	= 'common_selector_index_outbound';

my $session	= undef;
my $ike_sa_init_req_param	= undef;
my $ike_sa_init_resp_param	= undef;
my $ike_auth_req_param	= undef;
my $ike_auth_resp_param	= undef;
my $create_child_sa_req_param	= undef;
my $create_child_sa_resp_param	= undef;
my $informational_req_param = undef;
my $informational_resp_param = undef;

my $material	= undef;
my $child_sa_material = undef;
my $ret	= undef;
my $str = undef;

my @local_create_child_sa_req = undef;
my @local_create_child_sa_resp	= undef;



kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST SETUP</B></U></FONT>');



#------------------------------#
# register IKEv2.pm            #
#------------------------------#
unless(IKEv2initialize('SGW', 'SGW')) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 module initializing failure</FONT>');
}



#------------------------------#
# customize configuration      #
#------------------------------#
my $conf = {
	'kmp_sa_lifetime' => '60',
	'ipsec_sa_lifetime' => '300',
};
unless (IKEv2customize($conf)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 configuration failure</FONT>');
}



#------------------------------#
# configure TN                 #
#------------------------------#
unless(IKEv2setupTN()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">TN setup failure</FONT>');
}



#------------------------------#
# configure NUT                #
#------------------------------#
unless(IKEv2setupNUT()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT setup failure</FONT>');
}



kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST PROCEDURE</B></U></FONT>');


#------------------------------#
# prepare session handler      #
#------------------------------#
$session = IKEv2create_session($remote);
unless(defined($session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 session creation failure</FONT>');
}



$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



#--------------------------------------#
# invoke IKE_SA_INIT request           #
#--------------------------------------#
unless(IKEv2initiateNUT($selector)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT initiation failure</FONT>');
}



#--------------------------------------#
# receive IKE_SA_INIT request          #
#--------------------------------------#
$ike_sa_init_req_param = devel_IKEv2receive_IKE_SA_INIT_request($session, $remote);
unless(defined($ike_sa_init_req_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT request.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# send IKE_SA_INIT response            #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);

$ike_sa_init_resp_param = devel_IKEv2send_IKE_SA_INIT_response($session, $remote, $ike_sa_init_req_param);
unless(defined($ike_sa_init_resp_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT response.</FONT>');
}



#--------------------------------------#
# generate keying material             #
#--------------------------------------#
$material = devel_IKEv2gen_keymat(0, $ike_sa_init_req_param, $ike_sa_init_resp_param);
unless(defined($material)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t generate keying material.</FONT>');
}



#--------------------------------------#
# receive IKE_AUTH request             #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_AUTH request (HDR, SK {IDi, AUTH, SAi2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_auth_req_param = devel_IKEv2receive_IKE_AUTH_request($session,
							  $remote,
							  $ike_sa_init_req_param,
							  $ike_sa_init_resp_param,
							  $material);
unless(defined($ike_auth_req_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_AUTH request.</FONT>');
	IKEv2exitFail();
}


#--------------------------------------#
# send IKE_AUTH response               #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_AUTH response (HDR, SK {IDr, AUTH, SAr2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_auth_resp_param = devel_IKEv2send_IKE_AUTH_response($session,
							 $remote,
							 $ike_sa_init_req_param,
							 $ike_sa_init_resp_param,
							 $material);
unless (defined($ike_auth_resp_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_AUTH response.</FONT>');
}



#--------------------------------------#
# set keying material                  #
#--------------------------------------#
my $keymat = undef;
{
	#--------------------------------------#
	# generate keying material (CHILD_SA)  #
	#--------------------------------------#
	$keymat = IKEv2_v6eval_generate_IPsecSA(1,	# Initial Exchanges
						$material,
						$ike_sa_init_req_param,
						$ike_sa_init_resp_param,
						$ike_auth_req_param,
						$ike_auth_resp_param);

	my $ret = IKEv2_v6eval_set_IPsecSA(0, $keymat, $ike_auth_req_param, $ike_auth_resp_param);
	unless($ret) {
		IKEv2log(kDump_Common_Error());
		IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t set keying material.</FONT>');
	}
}



#------------------------------------------#
# prepare expected CREATE_CHILD_SA request #
#------------------------------------------#
# get IKE_SA_INIT's transform
my $common_ike_sa_init_req = $exp_ike_sa_init_req->{'common_remote_index'};
my @tmp_ike_sa_init_req = @{$common_ike_sa_init_req};
my @ike_sa_init_transform = undef;
for (my $i = 0; $i < scalar(@tmp_ike_sa_init_req); $i++) {
        my $payload = $tmp_ike_sa_init_req[$i];

        if ($payload->{'self'} eq 'SA') {
                for (my $j = 0; $j < scalar(@{$payload->{'proposals'}}); $j++) {
                        my $proposal = @{$payload->{'proposals'}}[$j];

                        if (defined($proposal->{'transforms'})) {
                                @ike_sa_init_transform = @{$proposal->{'transforms'}};
                                last;
                        }
                }
        }
}
# generete CREATE_CHILD_SA request for IKE_SA
my $common_create_child_sa_req = IKEv2load_packet($exp_create_child_sa_req, $remote);
@local_create_child_sa_req = @{$common_create_child_sa_req};
for (my $i = 0; $i < scalar(@local_create_child_sa_req); $i++) {
        my $payload = $local_create_child_sa_req[$i];

        if ($payload->{'self'} eq 'E') {
                for (my $j = 0; $j < scalar(@{$payload->{'innerPayloads'}}); $j++) {
                        my $inner = @{$payload->{'innerPayloads'}}[$j];

                        # delete N, TSi, TSr
                        if ( (($inner->{'self'} eq 'N') && ($inner->{'type'} eq 'USE_TRANSPORT_MODE'))
                            || ($inner->{'self'} eq 'TSi') || ($inner->{'self'} eq 'TSr') ) {
                                splice(@{$payload->{'innerPayloads'}}, $j, 1);
                                redo;
                        }
                        # change proposal setting
                        if ($inner->{'self'} eq 'SA') {
                                for (my $k = 0; $k < scalar(@{$inner->{'proposals'}}); $k++) {
                                        my $proposal = @{$inner->{'proposals'}}[$k];

                                        $proposal->{'id'} = 'IKE';                              # ProtocolID(1=IKE)
                                        $proposal->{'spiSize'} = '8';                           # SPI size
                                        $proposal->{'proposalLen'} = '48';                      # length +8 +4

                                        @{$proposal->{'transforms'}} = @ike_sa_init_transform;
                                }
                                $inner->{'length'} = '52';        # SA payload length
                        }
                }
                #set correct nexttype
                $payload->{'innerType'} = @{$payload->{'innerPayloads'}}[0]->{'self'};
                for (my $j = 0; $j < scalar(@{$payload->{'innerPayloads'}}); $j++) {
                        my $inner = @{$payload->{'innerPayloads'}}[$j];

                        if ($inner->{'self'} eq 'Ni, Nr') {
                                my $next = ${$payload->{'innerPayloads'}}[$j+1]; 
                                unless (defined($next)) {
                                        $inner->{'nexttype'} = '0';
                                        next;
                                }
                                if ($inner->{'nexttype'} eq $next->{'self'}) {
                                        next;
                                }
                                $inner->{'nexttype'} = $next->{'self'};
                        }
                }
        }
}
$exp_create_child_sa_req->{'SGW-I-1-2-5-1.1'} = \@local_create_child_sa_req;



#-------------------------------------------------------------#
# repeat Echo exchange until lifetime of NUT's SA is expired  #
#-------------------------------------------------------------#
#---------------------------#
# set lifetime to CHILD_SA  #
#---------------------------#
my $sa_life = $config_pl->{'ikev2_nut_ike_sa_lifetime'};
my $t1 = time;
my $t2 = time;
my $esp_seq_out = 1;

while (($t2 - $t1) < $sa_life)
{
	#------------------------------#
	# send Echo Request            #
	#------------------------------#
	{
		$str  = '<PRE>';
		$str .= "                    (I)             (R)\n";
		$str .= "    TH1             NUT             TN1             TH2\n";
		$str .= "     |               |               |               |\n";
		$str .= "     |<--------------+===============+---------------| IPsec {Echo Request}\n";
		$str .= "     |               |               |               |\n";
		$str .= "     V               V               V               V";
		$str .= '</PRE>';
		IKEv2log($str);

		my $slink = 'Link0';
		my $rlink = 'Link1';
		my $spkt = 'ipsec_ereq';
		my @rpkts = ('ereq');
		my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
		unless ($ret) {
			my $strerror = kDump_Common_Error();
			IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
			IKEv2exitFail();
		}
	}



	#------------------------------#
	# send Echo Reply              #
	#------------------------------#
	{
		$str  = '<PRE>';
		$str .= "                    (I)             (R)\n";
		$str .= "    TH1             NUT             TN1             TH2\n";
		$str .= "     |               |               |               |\n";
		$str .= "     |---------------+===============+-------------->| IPsec {Echo Reply}\n";
		$str .= "     |               |               |               |\n";
		$str .= "     V               V               V               V";
		$str .= '</PRE>';
		IKEv2log($str);

		my $slink = 'Link1';
		my $rlink = 'Link0';
		my $spkt = 'erep';
		my @rpkts = ('ipsec_erep');
		my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
		unless ($ret) {
			my $strerror = kDump_Common_Error();
			IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
			IKEv2exitFail();
		}

		#------------------------------#
		# update IPsec SA              #
		#------------------------------#
		{
			$esp_seq_out++;
			my $esp_seq_in = $vrecv{'Frame_Ether.Packet_IPv6.Hdr_ESP.SequenceNumber'};
			$esp_seq_in++;
			my $cpp	= '';
			$cpp .= '-DCPP_ECHO_ID=1 ';
			$cpp .= "-DCPP_ESP_SEQ_OUT=$esp_seq_out ";
			$cpp .= "-DCPP_ESP_SEQ_IN=$esp_seq_in ";

			my $conf = { 'cpp' => $cpp };
			my $ret = IKEv2_v6eval_set_IPsecSA(0, $keymat, $ike_auth_req_param, $ike_auth_resp_param, $conf);
		}
	}



        #------------------------------------------#
        # receive CREATE_CHILD_SA request by NUT   #
        #------------------------------------------#
        $str  = '<PRE>';
        $str .= "    (I)             (R)\n";
        $str .= "    NUT             TN1\n";
        $str .= "     |               |\n";
        $str .= "     |-------------->| CREATE_CHILD_SA request (HDR, SK {SA, Ni})\n";
        $str .= "     |               |\n";
        $str .= "     V               V";
        $str .= '</PRE>';

        kLogHTML($str);


        $session->timeout(3);
        $create_child_sa_req_param = devel_IKEv2receive_CREATE_CHILD_SA_request($session,
                                                                                'SGW-I-1-2-5-1.1',
                                                                                $ike_sa_init_req_param,
                                                                                $ike_sa_init_resp_param,
                                                                                $ike_auth_req_param,
                                                                                $material);
        $t2 = time;

        if (defined($create_child_sa_req_param)) {
                last;
        }
}

if (($t2 - $t1) >= $sa_life)
{
        kLogHTML(kDump_Common_Error());
        kLogHTML('<FONT COLOR="#ff0000">Can\'t observe CREATE_CHILD_SA request.</FONT>');
        IKEv2exitFail();
}



#-------------------------------------------#
# prepare generate CREATE_CHILD_SA response #
#-------------------------------------------#
# get IKE_SA_INIT's transform
my $common_ike_sa_init_resp = $gen_ike_sa_init_resp->{'common_remote_index'};
my @tmp_ike_sa_init_resp = @{$common_ike_sa_init_resp};
my @ike_sa_init_transform = undef;
my $ike_sa_init_ke = undef;            #********************* for racoon2 ***************
for (my $i = 0; $i < scalar(@tmp_ike_sa_init_resp); $i++) {
        my $payload = $tmp_ike_sa_init_resp[$i];

        if ($payload->{'self'} eq 'SA') {
                for (my $j = 0; $j < scalar(@{$payload->{'proposals'}}); $j++) {
                        my $proposal = @{$payload->{'proposals'}}[$j];

                        if (defined($proposal->{'transforms'})) {
                                @ike_sa_init_transform = @{$proposal->{'transforms'}};
                                last;
                        }
                }
        }
        #********************** for racoon2 ***************
        if ($payload->{'self'} eq 'KE') {
                $ike_sa_init_ke = $payload;
        }
}
# generete CREATE_CHILD_SA Response for IKE_SA
my $common_create_child_sa_resp = $gen_create_child_sa_resp->{$remote};
@local_create_child_sa_resp = @{$common_create_child_sa_resp};
for (my $i = 0; $i < scalar(@local_create_child_sa_resp); $i++) {
        my $payload = $local_create_child_sa_resp[$i];

        # delete TSi, TSr
        if ( ($payload->{'self'} eq 'TSi') || ($payload->{'self'} eq 'TSr') ) {
                splice(@local_create_child_sa_resp, $i, 1);
                redo;
        }
        # change proposal setting
        if ($payload->{'self'} eq 'SA') {
                for (my $j = 0; $j < scalar(@{$payload->{'proposals'}}); $j++) {
                        my $proposal = @{$payload->{'proposals'}}[$j];

                        $proposal->{'id'} = 'IKE';                              # ProtocolID(1=IKE)
                        $proposal->{'spiSize'} = '8';                           # SPI size
                        @{$proposal->{'transforms'}} = @ike_sa_init_transform;
                }

                #****** add KE for racoon2.... ******
                splice(@local_create_child_sa_resp, $i+1, 0, $ike_sa_init_ke);    # add KEi ****for racoon2***
        }
}
$gen_create_child_sa_resp->{'SGW-I-1-2-5-1.2'} = \@local_create_child_sa_resp;


#-------------------------------#
# send CREATE_CHILD_SA response #
#-------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| CREATE_CHILD_SA response (HDR, SK {SA, Nr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$create_child_sa_resp_param = devel_IKEv2send_CREATE_CHILD_SA_response($session,
                                                                      'SGW-I-1-2-5-1.2',
                                                                       $ike_sa_init_req_param,
                                                                       $ike_sa_init_resp_param,
                                                                       $create_child_sa_req_param,
                                                                       $material);
unless(defined($create_child_sa_resp_param)) {
        kLogHTML(kDump_Common_Error());
        kLogHTML('<FONT COLOR="#ff0000">Can\'t send CREATE_CHILD_SA response.</FONT>');
        IKEv2exitFail();
}



{
	#--------------------------------------------#
	# prepare INFORMATIONAL request for rekeying #
	#--------------------------------------------#
	my $req_delete_payload =
	{	# Delete Payload
		'self'		=> 'D',		# *** MUST BE HERE ***
		'nexttype'	=> undef,	# Next Payload
		'critical'	=> undef,	# Critical
		'reserved'	=> undef,	# RESERVED
		'length'	=> undef,	# Payload Length
		'id'		=> 'IKE',	# Protocol ID
		'spiSize'	=> '0',		# SPI Size
		'spiCount'	=> '0',
	};
	my $common_informational_req = $exp_informational_req->{'common_remote_index'};
	my @local_informational_req = @{$common_informational_req};
	# add Delete payload 
	for (my $i = 0; $i < scalar(@local_informational_req); $i++) {
		if ($local_informational_req[$i]->{'self'} eq 'E') {
			splice(@local_informational_req, $i+1);
			push(@local_informational_req, $req_delete_payload);
			last;
		}
	}
	$exp_informational_req->{'informational_delete_ike_sa'} = \@local_informational_req;

	#-------------------------------#
	# receive INFORMATIONAL request #
	#-------------------------------#
	$str  = '<PRE>';
	$str .= "    (I)             (R)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |-------------->| INFORMATION Request (HDR, SK {D})\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';

	kLogHTML($str);

	$informational_req_param = devel_IKEv2receive_INFORMATIONAL_request($session,
									    'informational_delete_ike_sa',
									    $ike_sa_init_req_param,
									    $ike_sa_init_resp_param,
									    $ike_auth_req_param,
									    $material);
	unless (defined($informational_req_param)) {
		kLogHTML(kDump_Common_Error());
		IKEv2exitFail('<FONT COLOR="#ff0000">Can\'t Observe INFORMATIONAL request.</FONT>');
	}

	#-----------------------------#
	# send INFORMATIONAL response #
	#-----------------------------#
	$str  = '<PRE>';
	$str .= "    (I)             (R)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |<--------------| INFORMATION Response (HDR, SK {})\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';

	kLogHTML($str);

	$informational_resp_param = devel_IKEv2send_INFORMATIONAL_response($session,
									   $remote,
									   $ike_sa_init_req_param,
									   $ike_sa_init_resp_param,
									   $informational_req_param,
									   $material);
	unless (defined($informational_resp_param)) {
		kLogHTML(kDump_Common_Error());
		IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t observe INFORMATIONAL response.</FONT>');
	}
}



#--------------------------------------#
# generate keying material             #
#--------------------------------------#
$material = devel_IKEv2gen_keymat(0,
				  $ike_sa_init_req_param,
				  $ike_sa_init_resp_param,
				  $create_child_sa_req_param,
				  $create_child_sa_resp_param,
				  $material);
unless(defined($material)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t generate keying material.</FONT>');
}



#--------------------------------------#
# send INFORMATIONAL request to NUT    #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| INFORMATION Request (HDR, SK {})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);

$ike_sa_init_req_param->{'spi'} = $create_child_sa_req_param->{'spi'}->[0];
$ike_sa_init_resp_param->{'spi'} = $create_child_sa_resp_param->{'spi'};

$informational_req_param = devel_IKEv2send_INFORMATIONAL_request($session,
                                                                 $remote,
                                                                 $ike_sa_init_req_param,
                                                                 $ike_sa_init_resp_param,
                                                                 $ike_auth_req_param,
                                                                 $material);
unless (defined($informational_req_param)) {
        kLogHTML(kDump_Common_Error());
        IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send INFORMATIONAL request.</FONT>');
}


#------------------------------------------#
# receive INFORMATIONAL response to NUT    #
#------------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| INFORMATION Response (HDR, SK {})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);

$informational_resp_param = devel_IKEv2receive_INFORMATIONAL_response($session,
                                                                      $remote,
                                                                      $ike_sa_init_req_param,
                                                                      $ike_sa_init_resp_param,
                                                                      $informational_req_param,
                                                                      $material);
unless (defined($informational_resp_param)) {
        kLogHTML(kDump_Common_Error());
        IKEv2exitFail('<FONT COLOR="#ff0000">Can\'t Observe INFORMATIONAL response.</FONT>');
}



#--------------------------------------#
# exit with cleanup                    #
#--------------------------------------#
IKEv2exitPass();



#
# perldoc
#
########################################################################
__END__

=head1 Title

  Test IKEv2.SGW.I.1.2.4.2: Use of the new IKE_SA
  Part A: (BASIC)

=head1 Purpose

  To verify an IKEv2 device properly handles CREATE_CHILD_SA to rekey IKE_SA.

=head1 References

  * [RFC 4306] - Sections 2.8

=head1 Test Setup

  * Network Topology
      Connect the devices according to the Common Topology.
  * Configuration
      In each part, configure the devices according to the Common Configuration.
      In addition, set IKE_SA Lifetime to 60 seconds and set CHILD_SA Lifetime to 300
      seconds.
  * Pre-Sequence and Cleanup Sequence
      IKEv2 on the NUT is disabled after each part.

=head1 Procedure

=begin html

<BLOCKQUOTE>
<PRE>

   TH1            NUT           TN1           TH2
 (HOST)          (SGW)         (SGW)         (Host)
    |              |             |             |
    |              |------------>|             | IKE_SA_INIT request (HDR, SAi1, KEi, Ni)
    |              |             |             | (Judgement #1)
    |              |<------------|             | IKE_SA_INIT Response (HDR, SAr1, KEr, Nr)
    |              |             |             | (Packet #1)
    |              |             |             |
    |              |------------>|             | IKE_AUTH request (HDR, SK {IDi, AUTH, SAi2, TSi, TSr})
    |              |             |             | (Judgement #2)
    |              |<------------|             | IKE_AUTH Response (HDR, SK {IDr, AUTH, SAr2, TSi, TSr})
    |              |             |             | (Packet #2)
    |              |             |             |
   ---            ---           ---           ---
    |              |             |             |                             ---
    |<-------------+=============+-------------| IPSec {Echo Request}         | repeat Echo Exchange
    |              |             |             | (Packet #3) (Judgement #3)   | until lifetime of
    |--------------+=============+------------>| IPSec {Echo Reply}           | SA is expired
    |              |             |             | (Packet #4) (Judgement #4)   |
    |              |             |             |                             ---
   ---            ---           ---           ---
    |              |             |             |
    |              |------------>|             | CREATE_CHILD_SA request (HDR, SK {SA, Ni})
    |              |             |             | (Judgement #5)
    |              |<------------|             | CREATE_CHILD_SA response (HDR, SK {SA, Nr})
    |              |             |             | (Packet #5)
    |              |             |             |
    |              |------------>|             | INFORMATIONAL request (HDR, SK {D})
    |              |             |             | (Judgement #6)
    |              |<------------|             | INFORMATIONAL Response (HDR, SK {})
    |              |             |             | (Packet #6)
    |              |             |             | 
    |              |<------------|             | INFORMATIONAL request (HDR, SK {})
    |              |             |             | (Packet #7)
    |              |------------>|             | INFORMATIONAL Response (HDR, SK {})
    |              |             |             | (Judgement #7)
    |              |             |             |
    V              V             V             V<br>
</PRE>
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD><TT>Packet #1</TT></TD>
<TD><TT>See Common Packet #2</TT></TD>
</TR>
<TR>
<TD><TT>Packet #2</TT></TD>
<TD><TT>See Common Packet #6</TT></TD>
</TR>
<TR>
<TD><TT>Packet #3</TT></TD>
<TD><TT>See Common Packet #21</TT></TD>
</TR>
<TR>
<TD><TT>Packet #4</TT></TD>
<TD><TT>See Common Packet #25</TT></TD>
</TR>
<TR>
<TD><TT>Packet #5</TT></TD>
<TD><TT>See Common Packet #12</TT></TD>
</TR>
<TR>
<TD><TT>Packet #6</TT></TD>
<TD><TT>See Common Packet #18</TT></TD>
</TR>
<TR>
<TD><TT>Packet #7</TT></TD>
<TD><TT>See Common Packet #17</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

  Part A: (BASIC)
     1. NUT starts to negotiate with TN1 by sending IKE_SA_INIT request.
     2. Observe the messages transmitted on Link A.
     3. TN1 responds with an IKE_SA_INIT response to the NUT.
     4. Observe the messages transmitted on Link A.
     5. After reception of IKE_AUTH request from the NUT, TN1 responds with an IKE_AUTH
        response to the NUT
     6. TH2 transmits an Echo Request to TH1.
     7. Observe the messages transmitted on Link A.
     8. TH1 transmits an Echo Reply to TH2.
     9. Observe the messages transmitted on Link B.
    10. Repeat Steps 6 through 9 until lifetime of SA is expired.
    11. Observe the messages transmitted on Link A.
    12. After reception of CREATE_CHILD_SA request for rekeying from the NUT, TN1 responds
        with a CREATE_CHILD_SA response to the NUT.
    13. Observe the messages transmitted on Link A.
    14. TN1 responds with an INFORMATIONAL response to an INFORMATIONAL request to
        close the replaced IKE_SA.
    15. TN1 transmits an INFORMATIONAL request with no payloads cryptographically protected
        by new IKE_SA.
    16. Observe the messages transmitted on Link A.

=head1 Observable Result

  Part A
       Step 2: Judgment #1
       The NUT transmits an IKE_SA_INIT request including "ENCR_3DES",
       "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as proposed
       algorithms.

       Step 4: Judgment #2
       The NUT transmits an IKE_AUTH request including "ENCR_3DES",
       "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" as proposed algorithms.

       Step 7: Judgment #3
       The NUT forwards an Echo Request.

       Step 9: Judgment #4
       The NUT forwards an Echo Reply with IPsec ESP using corresponding algorithms.

       Step 11: Judgment #5
       The NUT transmits a CREATE_CHILD_SA request including "ENCR_3DES",
       "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as proposed
       algorithms. And the CREATE_CHILD_SA request includes 1 (IKE) in the Protocol ID field,
       8 in the SPI size field and rekeyed IKE_SA's SPI value in the SPI field.

       Step 13: Judgment #6
       The NUT transmits an INFORMATIONAL request with a Delete payload to close the
       replaced IKE_SA.

       Step 16: Judgment #7
       The NUT responds with an INFORMATIONAL response with no payloads cryptographically
       protected by the new IKE_SA.

=head1 Possible Problems

  * Each NUT has the different lifetime of SA.

=cut

