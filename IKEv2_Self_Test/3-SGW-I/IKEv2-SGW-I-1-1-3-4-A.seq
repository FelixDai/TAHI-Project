#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: IKEv2-SGW-I-1-1-3-4-A.seq,v 1.4 2009/08/31 00:48:51 doo Exp $
#
################################################################

BEGIN
{
	push(@INC, '..');
        $ENV{'V6EVAL_WITH_KOI'} = 'TRUE';
}

END {}

use V6evalTool;
use IKEv2v6eval;
use IKEv2;
use strict;



my $remote	= 'common_remote_index';
my $selector	= 'common_selector_index_outbound';



my $session	= undef;
my $ret	= undef;
my $str = undef;

my $ike_sa_init_req_param	= undef;
my $ike_sa_init_resp_param	= undef;
my $ike_auth_req_param_1	= undef;
my $ike_auth_resp_param_1	= undef;
my $ike_auth_req_param_2	= undef;
my $ike_auth_resp_param_2	= undef;

my $material	= undef;
my $child_sa_material_1 = undef;
my $child_sa_material_2 = undef;

my @local_ike_auth_req = undef;



#--------------------------------------#
# prepare IKE_AUTH request             #
#--------------------------------------#
my $common_exp_ike_auth_req = $exp_ike_auth_req->{'common_remote_index'};
my @local_ike_auth_req = @{$common_exp_ike_auth_req};
# remove N(USE_TRANSPORT_MODE)
foreach my $payload (@local_ike_auth_req) {
        if ($payload->{'self'} eq 'E') {
                my @payloads = grep {
                                my $ret = 0;
                                if ($_->{'self'} ne 'N') { $ret = 1; }
                                if ($_->{'type'} ne 'USE_TRANSPORT_MODE') { $ret = 1; }
                                $ret;
                        } @{$payload->{'innerPayloads'}};

                $payload->{'innerPayloads'} = \@payloads;
        }
}
# set correct nexttype
for (my $i = 0; $i < scalar(@local_ike_auth_req); $i++) {
        my $payload = $local_ike_auth_req[$i];

        if ($payload->{'self'} eq 'E') {
                for (my $j = 0; $j < scalar(@{$payload->{'innerPayloads'}}); $j++) {
                        my $cur = $payload->{'innerPayloads'}->[$j];
                        my $next = $payload->{'innerPayloads'}->[$j+1];
                        unless (defined($next)) {
                                $cur->{'nexttype'} = '0';
                                next;
                        }
                        if ($cur->{'nexttype'} eq $next->{'self'}) {
                                next;
                        }
                        $cur->{'nexttype'} = $next->{'self'};
                }

                next;
        }

}
$exp_ike_auth_req->{'SGW_EXP_IKE_AUTH_REQ'} = \@local_ike_auth_req;



#--------------------------------------#
# prepare IKE_AUTH response            #
#--------------------------------------#
my $common_gen_ike_auth_resp = $gen_ike_auth_resp->{'common_remote_index'};
my @local_ike_auth_resp = @{$common_gen_ike_auth_resp};
# remove N(USE_TRANSPORT_MODE)
@local_ike_auth_resp = grep {
                my $ret = 0;
                if ($_->{'self'} ne 'N') { $ret = 1; }
                if ($_->{'type'} ne 'USE_TRANSPORT_MODE') { $ret = 1; }
                $ret;
        } @local_ike_auth_resp;
                                
$gen_ike_auth_resp->{'SGW_GEN_IKE_AUTH_RESP'} = \@local_ike_auth_resp;



#--------------------------------------#
# prepare IKE_AUTH request             #
#--------------------------------------#
my $common_gen_ike_auth_req = $gen_ike_auth_req->{'common_remote_index'};
my @local_ike_auth_req = @{$common_gen_ike_auth_req};
# remove N(USE_TRANSPORT_MODE)
@local_ike_auth_req = grep {
                my $ret = 0;
                if ($_->{'self'} ne 'N') { $ret = 1; }
                if ($_->{'type'} ne 'USE_TRANSPORT_MODE') { $ret = 1; }
                $ret;
        } @local_ike_auth_req;
                                
$gen_ike_auth_req->{'SGW_GEN_IKE_AUTH_REQ'} = \@local_ike_auth_req;



#--------------------------------------#
# prepare IKE_AUTH response            #
#--------------------------------------#
my $common_exp_ike_auth_resp = $exp_ike_auth_resp->{'common_remote_index'};
my @local_ike_auth_resp = @{$common_exp_ike_auth_resp};
# remove N(USE_TRANSPORT_MODE)
foreach my $payload (@local_ike_auth_resp) {
        if ($payload->{'self'} eq 'E') {
                my @payloads = grep {
                                my $ret = 0;
                                if ($_->{'self'} ne 'N') { $ret = 1; }
                                if ($_->{'type'} ne 'USE_TRANSPORT_MODE') { $ret = 1; }
                                $ret;
                        } @{$payload->{'innerPayloads'}};

                $payload->{'innerPayloads'} = \@payloads;
        }
}
# set correct nexttype
for (my $i = 0; $i < scalar(@local_ike_auth_resp); $i++) {
        my $payload = $local_ike_auth_resp[$i];

        if ($payload->{'self'} eq 'E') {
                for (my $j = 0; $j < scalar(@{$payload->{'innerPayloads'}}); $j++) {
                        my $cur = $payload->{'innerPayloads'}->[$j];
                        my $next = $payload->{'innerPayloads'}->[$j+1];
                        unless (defined($next)) {
                                $cur->{'nexttype'} = '0';
                                next;
                        }
                        if ($cur->{'nexttype'} eq $next->{'self'}) {
                                next;
                        }
                        $cur->{'nexttype'} = $next->{'self'};
                }

                next;
        }

}
$exp_ike_auth_resp->{'SGW_EXP_IKE_AUTH_RESP'} = \@local_ike_auth_resp;



kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST SETUP</B></U></FONT>');



#------------------------------#
# register IKEv2.pm            #
#------------------------------#
unless(IKEv2initialize('SGW', 'SGW')) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 module initializing failure</FONT>');
}



#---------------------------------#
# switch Support or Not Support   #
#---------------------------------#
unless ($config_pl->{'advanced_support_initial_contact'}) {
	IKEv2exitNS('Not support ' . "'advanced_support_initial_contact'");
}



#------------------------------#
# configure TN                 #
#------------------------------#
unless(IKEv2setupTN()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">TN setup failure</FONT>');
}



#------------------------------#
# configure NUT                #
#------------------------------#
unless(IKEv2setupNUT()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT setup failure</FONT>');
}



kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST PROCEDURE</B></U></FONT>');


#------------------------------#
# prepare session handler      #
#------------------------------#
$session = IKEv2create_session($remote);
unless(defined($session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 session creation failure</FONT>');
}



$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



#--------------------------------------#
# invoke IKE_SA_INIT request           #
#--------------------------------------#
unless(IKEv2initiateNUT($selector)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT initiation failure</FONT>');
}



#--------------------------------------#
# receive IKE_SA_INIT request          #
#--------------------------------------#
$ike_sa_init_req_param = devel_IKEv2receive_IKE_SA_INIT_request($session, $remote);
unless(defined($ike_sa_init_req_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT request.</FONT>');
	IKEv2exitFail();
}



$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



#--------------------------------------#
# send IKE_SA_INIT response            #
#--------------------------------------#
$ike_sa_init_resp_param = devel_IKEv2send_IKE_SA_INIT_response($session, $remote, $ike_sa_init_req_param);
unless(defined($ike_sa_init_resp_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT response.</FONT>');
}



#--------------------------------------#
# generate keying material             #
#--------------------------------------#
$material = devel_IKEv2gen_keymat(0, $ike_sa_init_req_param, $ike_sa_init_resp_param);
unless(defined($material)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t generate keying material.</FONT>');
}



#--------------------------------------#
# receive IKE_AUTH request             #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_AUTH request (HDR, SK {IDi, AUTH, SAi2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_auth_req_param_1 = devel_IKEv2receive_IKE_AUTH_request($session,
							  'SGW_EXP_IKE_AUTH_REQ',
							  $ike_sa_init_req_param,
							  $ike_sa_init_resp_param,
							  $material);
unless(defined($ike_auth_req_param_1)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_AUTH request.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# send IKE_AUTH response               #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_AUTH response (HDR, SK {IDr, AUTH, SAr2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_auth_resp_param_1 = devel_IKEv2send_IKE_AUTH_response($session,
							 'SGW_GEN_IKE_AUTH_RESP',
							 $ike_sa_init_req_param,
							 $ike_sa_init_resp_param,
							 $material);
unless (defined($ike_auth_resp_param_1)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_AUTH response.</FONT>');
}



#--------------------------------------#
# generate keying material (CHILD_SA)  #
#--------------------------------------#
$child_sa_material_1 = devel_IKEv2gen_child_sa_keymat(1,	# Initial Exchanges
						    $material,
						    $ike_sa_init_req_param,
						    $ike_sa_init_resp_param,
						    $ike_auth_req_param_1,
						    $ike_auth_resp_param_1);



#--------------------------------------#
# set Upper Protocol for TN's SPD      #
#--------------------------------------#
IKEv2set_SPD('upperspec', 'icmp6');




#--------------------------------------#
# set keying material                  #
#--------------------------------------#
$ret = IKEv2set_child_sa_keymat(0, $child_sa_material_1, $ike_auth_req_param_1, $ike_auth_resp_param_1);
unless($ret) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t set keying material.</FONT>');
}



#--------------------------------------#
# prepare ICMP session handler         #
#--------------------------------------#
my $icmp_session_th2 = ICMPcreate_session('TH2sendtoTH1');
unless(defined($icmp_session_th2)) {
        IKEv2exitFatal('<FONT COLOR="#ff0000">ICMP session creation failure</FONT>');
}

my $icmp_session_th1 = ICMPcreate_session('TH1sendtoTH2');
unless(defined($icmp_session_th1)) {
        IKEv2exitFatal('<FONT COLOR="#ff0000">ICMP session creation failure</FONT>');
}



#--------------------------------------#
# receive Echo Reply (DUMMY)           #
#--------------------------------------#
$icmp_session_th1->timeout(1);
$ret = ICMPreceive($icmp_session_th1);
$icmp_session_th1->timeout(12);



#--------------------------------------#
# send Echo Reply (TH2-->TN1==>NUT)    #
#--------------------------------------#
$str  = '<PRE>';
$str .= "                    (I)             (R)\n";
$str .= "    TH1             NUT             TN1             TH2\n";
$str .= "     |               |               |               |\n";
$str .= "     |<--------------+===============+---------------| IPsec {Echo Reply}\n";
$str .= "     |               |               |               |\n";
$str .= "     V               V               V               V";
$str .= '</PRE>';

kLogHTML($str);

$ret = ICMPsend($icmp_session_th2, 'echo_reply');
unless (defined($ret)) {
        kLogHTML(kDump_Common_Error());
        IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send ICMP packet.</FONT>');
}



#--------------------------------------#
# receive Echo Reply (NUT-->TH1)       #
#--------------------------------------#
$ret = ICMPreceive($icmp_session_th1);
unless(defined($ret)) {
        my $strerror = kDump_Common_Error();
        kLogHTML('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
        IKEv2exitFail();
}

#--------------------------------------#
# send Echo Reply (TH1-->NUT)          #
#--------------------------------------#
$str  = '<PRE>';
$str .= "                    (I)             (R)\n";
$str .= "    TH1             NUT             TN1             TH2\n";
$str .= "     |               |               |               |\n";
$str .= "     |---------------+===============+-------------->| IPsec {Echo Reply}\n";
$str .= "     |               |               |               |\n";
$str .= "     V               V               V               V";
$str .= '</PRE>';

kLogHTML($str);

$ret = ICMPsend_v6eval('TH1sendtoTH2', 'echo_reply');
unless (defined($ret)) {
        kLogHTML(kDump_Common_Error());
        IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send ICMP packet.</FONT>');
}



#--------------------------------------#
# receive Echo Reply (NUT==>tn1-->TH2) #
#--------------------------------------#
$ret = ICMPreceive($icmp_session_th2);
unless(defined($ret)) {
        my $strerror = kDump_Common_Error();
        kLogHTML('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
        IKEv2exitFail();
}



#--------------------------------------#
# receive IKE_SA_INIT request (2nd)    #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


$ike_sa_init_req_param = devel_IKEv2receive_IKE_SA_INIT_request($session, $remote);
unless(defined($ike_sa_init_req_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT request.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# send IKE_SA_INIT response (2nd)      #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


$ike_sa_init_resp_param = devel_IKEv2send_IKE_SA_INIT_response($session, $remote, $ike_sa_init_req_param);
unless(defined($ike_sa_init_resp_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT response.</FONT>');
}



#--------------------------------------#
# generate keying material             #
#--------------------------------------#
$material = devel_IKEv2gen_keymat(0, $ike_sa_init_req_param, $ike_sa_init_resp_param);
unless(defined($material)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t generate keying material.</FONT>');
}



#--------------------------------------#
# receive IKE_AUTH request             #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_AUTH request (HDR, SK {IDi, N(INITIAL_CONTACT), AUTH, SAi2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


my $notify_initial_contact =
{       # Notify Payload
        'self'          => 'N',      # *** MUST BE HERE ***
        'nexttype'      => 'AUTH',   # Next Payload
        'critical'      => '0',      # Critical
        'reserved'      => '0',      # RESERVED
        'length'        => '8',      # Payload Length
        'id'            => '0',      # Protocol ID
        'spiSize'       => '0',      # SPI Size
        'type'          => 'INITIAL_CONTACT',        # Notify Message Type
};

my $common_ike_auth_req = $exp_ike_auth_req->{'SGW_EXP_IKE_AUTH_REQ'};
@local_ike_auth_req = @{$common_ike_auth_req};

# add notify_initial_contact
for (my $i = 0; $i < scalar(@local_ike_auth_req); $i++) {
	my $payload = $local_ike_auth_req[$i];

	if ($payload->{'self'} eq 'E') {
		for (my $j = 0; $j < scalar(@{$payload->{'innerPayloads'}}); $j++) {
			my $inner = @{$payload->{'innerPayloads'}}[$j];

			if ($inner->{'self'} eq 'AUTH') {
				splice(@{$payload->{'innerPayloads'}}, $j, 0, $notify_initial_contact);
				last;
			}
		}
	}
}
# set Next Payload
{
	my $expected = $common_ike_auth_req;
	for (my $i = 0; $i < scalar(@{$expected}); $i++) {
		my $p0 = $expected->[$i];
		my $n0 = $expected->[$i+1];

		if (defined($n0)) {
			$p0->{'nexttype'} = $n0->{'self'};
		} else {
			$p0->{'nexttype'} = '0';
		}

		if ($p0->{'self'} eq 'E') {
			$p0->{'innerType'} = @{$p0->{'innerPayloads'}}[0]->{'self'};

			for (my $j = 0; $j < scalar(@{$p0->{'innerPayloads'}}); $j++) {
				my $p1 = ${$p0->{'innerPayloads'}}[$j];
				my $n1 = ${$p0->{'innerPayloads'}}[$j+1];
				if (defined($n1)) {
					$p1->{'nexttype'} = $n1->{'self'};
				} else {
					$p1->{'nexttype'} = '0';
				}
			}
		}
	}
}
$exp_ike_auth_req->{'SGW-I-1-1-3-4.1'} = \@local_ike_auth_req;


$ike_auth_req_param_2 = devel_IKEv2receive_IKE_AUTH_request($session,
							  'SGW-I-1-1-3-4.1',
							  $ike_sa_init_req_param,
							  $ike_sa_init_resp_param,
							  $material);
unless(defined($ike_auth_req_param_2)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_AUTH request.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# send IKE_AUTH response               #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_AUTH response (HDR, SK {IDr, AUTH, N(USE_TRANSPORT_MODE), SAr2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_auth_resp_param_2 = devel_IKEv2send_IKE_AUTH_response($session,
							 'SGW_GEN_IKE_AUTH_RESP',
							 $ike_sa_init_req_param,
							 $ike_sa_init_resp_param,
							 $material);
unless (defined($ike_auth_resp_param_2)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_AUTH response.</FONT>');
}



#------------------------------------------#
# generate keying material (2nd CHILD_SA)  #
#------------------------------------------#
$child_sa_material_2 = devel_IKEv2gen_child_sa_keymat(1,    # IKE_AUTH exchange
                                                    $material,
                                                    $ike_sa_init_req_param,
                                                    $ike_sa_init_resp_param,
                                                    $ike_auth_req_param_2,
                                                    $ike_auth_resp_param_2);


#--------------------------------------------------#
# set keying material (for CHILD_SA)               #
# set CHILD_SA (in: 1st/2nd SA , out: 1st SA only) #
#--------------------------------------------------#
$ret = IKEv2set_child_sa_keymat(1, 
                              $child_sa_material_2, 
                              $ike_auth_req_param_2, 
                              $ike_auth_resp_param_2,
                              1, 0, 1, 0);
unless($ret) {
        kLogHTML(kDump_Common_Error());
        IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t set 2nd keying material(inbound).</FONT>');
}



#--------------------------------------------------------#
# send Echo Reply (TH2-->TN1==>NUT) (use 1st IPsec SA)   #
#--------------------------------------------------------#
$str  = '<PRE>';
$str .= "                    (I)             (R)\n";
$str .= "    TH1             NUT             TN1             TH2\n";
$str .= "     |               |               |               |\n";
$str .= "     |      X--------+===============+---------------| IPsec {Echo Reply}\n";
$str .= "     |               |               |               |\n";
$str .= "     V               V               V               V";
$str .= '</PRE>';

kLogHTML($str);

$ret = ICMPsend($icmp_session_th2, 'echo_reply');
unless (defined($ret)) {
        kLogHTML(kDump_Common_Error());
        IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send ICMP packet.</FONT>');
}



#--------------------------------------#
# receive Echo Reply (NUT-->TH1)       #
#--------------------------------------#
$ret = ICMPreceive($icmp_session_th1);
if (defined($ret)) {
        my $strerror = kDump_Common_Error();
        kLogHTML('<FONT COLOR="#ff0000">Observe ICMP packet.</FONT>');
        IKEv2exitFail();
}

#------------------------------------------------#
# send Echo Reply (TH1-->NUT) (use 1st IPsec SA) #
#------------------------------------------------#
$str  = '<PRE>';
$str .= "                    (I)             (R)\n";
$str .= "    TH1             NUT             TN1             TH2\n";
$str .= "     |               |               |               |\n";
$str .= "     |---------------+========X      |               | IPsec {Echo Reply}\n";
$str .= "     |               |               |               |\n";
$str .= "     V               V               V               V";
$str .= '</PRE>';

kLogHTML($str);

$ret = ICMPsend_v6eval('TH1sendtoTH2', 'echo_reply');
unless (defined($ret)) {
        kLogHTML(kDump_Common_Error());
        IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send ICMP packet.</FONT>');
}



#--------------------------------------#
# receive Echo Reply (NUT==>tn1-->TH2) #
#--------------------------------------#
$ret = ICMPreceive($icmp_session_th2);
if (defined($ret)) {
        my $strerror = kDump_Common_Error();
        kLogHTML('<FONT COLOR="#ff0000">Observe ICMP packet.</FONT>');
        IKEv2exitFail();
}



#--------------------------------------------------#
# set keying material (for CHILD_SA)               #
# set CHILD_SA (in: 1st/2nd SA , out: 1st/2nd SA ) #
#--------------------------------------------------#
$ret = IKEv2set_child_sa_keymat(1, 
                              $child_sa_material_2, 
                              $ike_auth_req_param_2, 
                              $ike_auth_resp_param_2,
                              0, 1, 0, 1);
unless($ret) {
        kLogHTML(kDump_Common_Error());
        IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t set 2nd keying material(outbound).</FONT>');
}




#------------------------------------------------------#
# send Echo Reply (TH2-->TN1==>NUT) (use 2st IPsec SA) #
#------------------------------------------------------#
$str  = '<PRE>';
$str .= "                    (I)             (R)\n";
$str .= "    TH1             NUT             TN1             TH2\n";
$str .= "     |               |               |               |\n";
$str .= "     |<--------------+===============+---------------| IPsec {Echo Reply}\n";
$str .= "     |               |               |               |\n";
$str .= "     V               V               V               V";
$str .= '</PRE>';

kLogHTML($str);

$ret = ICMPsend($icmp_session_th2, 'echo_reply');
unless (defined($ret)) {
        kLogHTML(kDump_Common_Error());
        IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send ICMP packet.</FONT>');
}



#--------------------------------------#
# receive Echo Reply (NUT-->TH1)       #
#--------------------------------------#
$ret = ICMPreceive($icmp_session_th1);
unless(defined($ret)) {
        my $strerror = kDump_Common_Error();
        kLogHTML('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
        IKEv2exitFail();
}



#------------------------------------------------#
# send Echo Reply (TH1-->NUT) (use 2st IPsec SA) #
#------------------------------------------------#
$str  = '<PRE>';
$str .= "                    (I)             (R)\n";
$str .= "    TH1             NUT             TN1             TH2\n";
$str .= "     |               |               |               |\n";
$str .= "     |---------------+===============+-------------->| IPsec {Echo Reply}\n";
$str .= "     |               |               |               |\n";
$str .= "     V               V               V               V";
$str .= '</PRE>';

kLogHTML($str);

$ret = ICMPsend_v6eval('TH1sendtoTH2', 'echo_reply');
unless (defined($ret)) {
        kLogHTML(kDump_Common_Error());
        IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send ICMP packet.</FONT>');
}



#--------------------------------------#
# receive Echo Reply (NUT==>tn1-->TH2) #
#--------------------------------------#
$ret = ICMPreceive($icmp_session_th2);
unless(defined($ret)) {
        my $strerror = kDump_Common_Error();
        kLogHTML('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
        IKEv2exitFail();
}



#--------------------------------------#
# exit with cleanup                    #
#--------------------------------------#
IKEv2exitPass();



#
# perldoc
#
########################################################################
__END__

=head1 Title

  Test IKEv2.SGW.I.1.1.3.4: Close connections when receiving INITIAL_CONTACT
  Part A: (BASIC)

=head1 Purpose

  To verify an IKEv2 device closes connections when receiving INITIAL_CONTACT.

=head1 References

  * [RFC 4306] - Sections 2.1, 2.2 and 2.4
  * [RFC 4718] - Sections 7.9

=head1 Test Setup

  * Network Topology
     Connect the devices according to the Common Topology.
  * Configuration
     In each part, configure the devices according to the Common Configuration. 
  * Pre-Sequence and Cleanup Sequence
     IKEv2 on the NUT is disabled after each part.

=head1 Procedure

=begin html

<BLOCKQUOTE>
<PRE>

   TH1            NUT           TN1           TH2
 (HOST)          (SGW)         (SGW)         (Host)
    |              |             |             |
    |              |------------>|             | IKE_SA_INIT request (HDR, SAi1, KEi, Ni)
    |              |             |             | (Judgement #1)
    |              |<------------|             | IKE_SA_INIT Response (HDR, SAr1, KEr, Nr)
    |              |             |             | (Packet #1)
    |              |             |             |
    |              |------------>|             | IKE_AUTH request (HDR, SK {IDi, AUTH, SAi2, TSi, TSr})
    |              |             |             | (Judgement #2)
    |              |<------------|             | IKE_AUTH Response (HDR, SK {IDr, AUTH, SAr2, TSi, TSr})
    |              |             |             | (Packet #2)
    |              |             |             |
    |<-------------+=============+-------------| IPSec {Echo Request}
    |              |             |             | (Packet #3) (Judgement #3)
    |--------------+=============+------------>| IPSec {Echo Reply}
    |              |             |             | (Packet #4) (Judgement #4)
    |              |             |             |
    |              |------------>|             | IKE_SA_INIT request (HDR, SAi1, KEi, Ni)
    |              |             |             | (Judgement #5)
    |              |<------------|             | IKE_SA_INIT Response (HDR, SAr1, KEr, Nr)
    |              |             |             | (Packet #5)
    |              |             |             |
    |              |------------>|             | IKE_AUTH request (HDR, SK {IDi, N(INITIAL_CONTACT), AUTH, SAi2, TSi, TSr})
    |              |             |             | (Judgement #6)
    |              |<------------|             | IKE_AUTH Response (HDR, SK {IDr, AUTH, SAr2, TSi, TSr})
    |              |             |             | (Packet #6)
    |              |             |             |
    |      X-------+=============+-------------| IPSec {Echo Request}
    |              |             |             | (Packet #7) (Judgement #7)
    |--------------+======X      |             | IPSec {Echo Reply}
    |              |             |             | (Packet #8) (Judgement #8)
    |              |             |             |
    |<-------------+=============+-------------| IPSec {Echo Request}
    |              |             |             | (Packet #9) (Judgement #9)
    |--------------+=============+------------>| IPSec {Echo Reply}
    |              |             |             | (Packet #10) (Judgement #10)
    |              |             |             |
    V              V             V             V<br>

</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD><TT>Packet #1</TT></TD>
<TD><TT>See Common Packet #2</TT></TD>
</TR>
<TR>
<TD><TT>Packet #2</TT></TD>
<TD><TT>See Common Packet #6</TT></TD>
</TR>
<TR>
<TD><TT>Packet #3</TT></TD>
<TD><TT>See Common Packet #21</TT></TD>
</TR>
<TR>
<TD><TT>Packet #4</TT></TD>
<TD><TT>See Common Packet #25</TT></TD>
</TR>
<TR>
<TD><TT>Packet #5</TT></TD>
<TD><TT>See Common Packet #2</TT></TD>
</TR>
<TR>
<TD><TT>Packet #6</TT></TD>
<TD><TT>See Common Packet #6</TT></TD>
</TR>
<TR>
<TD><TT>Packet #7</TT></TD>
<TD><TT>See Common Packet #21<br>This packet is cryptographically protected by the<br>CHILD_SA negotiated at Step 1 to Step 5.</TT></TD>
</TR>
<TR>
<TD><TT>Packet #8</TT></TD>
<TD><TT>See Common Packet #25</TT></TD>
</TR>
<TR>
<TD><TT>Packet #9</TT></TD>
<TD><TT>See Common Packet #21<br>This packet is cryptographically protected by the<br>CHILD_SA negotiated at Step 11 to Step 14.</TT></TD>
</TR>
<TR>
<TD><TT>Packet #10</TT></TD>
<TD><TT>See Common Packet #25</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>
<br>

=end html

  Part A: (ADVANCED)
     1.  NUT starts to negotiate with TN1 by sending IKE_SA_INIT request.
     2.  Observe the messages transmitted on Link A.
     3.  TN1 responds with an IKE_SA_INIT response to the NUT.
     4.  Observe the messages transmitted on Link A.
     5.  After reception of IKE_AUTH request from the NUT, TN1 responds with an IKE_AUTH
         response to the NUT
     6.  TH2 transmits an Echo Request to TH1.
     7.  Observe the messages transmitted on Link B.
     8.  TH1 transmits an Echo Reply to TH2.
     9.  Observe the messages transmitted on Link A.
     10. NUT transmits IKE_SA_INIT request to the NUT.
     11. Observe the messages transmitted on Link A.
     12. TN1 responds with an IKE_SA_INIT response to the NUT.
     13. Observe the messages transmitted on Link A.
     14. After reception of IKE_AUTH request from the NUT, TN1 responds with an IKE_AUTH
         response to the NUT
     15. TH2 transmits an Echo Request to TH1. TN1 forwards an Echo Request with IPsec ESP
         using the first negotiated algorithms.
     16. Observe the messages transmitted on Link B.
     17. TH1 transmits an Echo Request to TH2.
     18. Observe the messages transmitted on Link A.
     19. TH2 transmits an Echo Request to TH1. TN1 forwards an Echo Request with IPsec ESP
         using the second negotiated algorithms.
     20. Observe the messages transmitted on Link B.
     21. TH1 transmits an Echo Reply to TH2.
     22. Observe the messages transmitted on Link A.

=head1 Observable Result

  Part A
       Step 2: Judgment #1
       The NUT transmits an IKE_SA_INIT request including "ENCR_3DES",
       "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as proposed
       algorithms.

       Step 4: Judgment #2
       The NUT transmits an IKE_AUTH request including "ENCR_3DES",
       "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" as proposed
       algorithms.

       Step 7: Judgment #3
       The NUT forwards an Echo Request.

       Step 9: Judgment #4
       The NUT forwards an Echo Reply with IPsec ESP using corresponding algorithms.

       Step 11: Judgment #5
       The NUT transmits an IKE_SA_INIT request including "ENCR_3DES",
       "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as proposed
       algorithms.

       Step 13: Judgment #6
       The NUT transmits an IKE_AUTH request with a Notify payload of type
       INITIAL_CONTACT to the NUT. The IKE_AUTH request includes "ENCR_3DES",
       "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" as proposed
       algorithms.

       Step 16: Judgment #7
       The NUT never forwards an Echo Request.

       Step 18: Judgment #8
       The NUT never forwards an Echo Request with IPsec ESP using the first negotiated
       algorithms.

       Step 20: Judgment #9
       The NUT forwards an Echo Request.

       Step 22: Judgment #10
       The NUT forwards an Echo Reply with IPsec ESP using the second negotiated algorithms.

=head1 Possible Problems

  * Step 18:
     The NUT can forward an Echo Request to the TH2 with IPsec ESP using the
     second negotiated algorithms.

=cut


