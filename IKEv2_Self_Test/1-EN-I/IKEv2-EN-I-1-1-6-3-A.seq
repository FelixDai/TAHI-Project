#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: IKEv2-EN-I-1-1-6-3-A.seq,v 1.3 2008/11/28 10:16:18 doo Exp $
#
################################################################

BEGIN
{
	push(@INC, '..');
}

END {}

use IKEv2;
use strict;



my $remote	= 'common_remote_index';
my $selector	= 'common_selector_index_outbound';

my $session	= undef;
my $str = undef;
my $ike_sa_init_req_param	= undef;

my @local_ike_sa_init_req = undef;


kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST SETUP</B></U></FONT>');



#------------------------------#
# register IKEv2.pm            #
#------------------------------#
unless(IKEv2initialize('EN', 'EN')) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 module initializing failure</FONT>');
}



#---------------------------------#
# switch Support or Not Support   #
#---------------------------------#
unless ($config_pl->{'advanced_multiple_transform_initial_ike_sa'}) {
       IKEv2exitNS('Not support ' . "'advanced_multiple_transform_initial_ike_sa'");
}

unless ($config_pl->{'advanced_support_encr_aes_cbc'}) {
       IKEv2exitNS('Not support ' . "'advanced_support_encr_aes_cbc'");
}



#------------------------------#
# customize configuration      #
#------------------------------#
my $conf = {
	'kmp_enc_alg' => [
		'3des_cbc',
		'aes128_cbc',
	],
};
unless (IKEv2customize($conf)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 configuration failure</FONT>');
}



#------------------------------#
# configure TN                 #
#------------------------------#
unless(IKEv2setupTN()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">TN setup failure</FONT>');
}



#------------------------------#
# configure NUT                #
#------------------------------#
unless(IKEv2setupNUT()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT setup failure</FONT>');
}



kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST PROCEDURE</B></U></FONT>');
kLogHTML('<FONT COLOR="#000000" SIZE="+1"><U><B>Part A: Multiple Encryption Algorithm(ADVANCED).</B></U></FONT>');



#------------------------------#
# prepare session handler      #
#------------------------------#
$session = IKEv2create_session($remote);
unless(defined($session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 session creation failure</FONT>');
}



$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



#--------------------------------------#
# invoke IKE_SA_INIT request           #
#--------------------------------------#
unless(IKEv2initiateNUT($selector)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT initiation failure</FONT>');
}



#--------------------------------------#
# prepare expected IKE_SA_INIT Request #
# Encryption Algorithm ENCR_3DES       #
# Encryption Algorithm ENCR_AES_CBC    #
#--------------------------------------#
my $partA_transform = {
	# Transform Substructure
	'nexttype'	=> '3',		# 0 (last) or 3 (more)
	'reserved1'	=> '0',		# RESERVED
	'transformLen'	=> '12',		# Transform Length
	'type'		=> 'ENCR',	# Transform Type
	'reserved2'	=> '0',		# RESERVED
	'id'		=> 'AES_CBC',	# Transform ID
	'attributes'	=> [		# Transform Attributes
		{
			'af'		=> '1',
			'type'		=> 'Key Length',
			'value'		=> '128',
			'length'	=> undef,
		},
	]
};
my $transform_len = 12;
my $common_ike_sa_init_req = $exp_ike_sa_init_req->{'common_remote_index'};
@local_ike_sa_init_req = @{$common_ike_sa_init_req};

# add transform payload
for (my $i = 0; $i < scalar(@local_ike_sa_init_req); $i++) {
	my $payload = $local_ike_sa_init_req[$i];

	if ($payload->{'self'} eq 'SA') {
		$payload->{'length'} += $transform_len;

		for (my $j = 0; $j < scalar(@{$payload->{'proposals'}}); $j++) {
			my $proposal = @{$payload->{'proposals'}}[$j];

			$proposal->{'transformCount'} += 1;
			$proposal->{'proposalLen'} += $transform_len;

			if (defined($proposal->{'transforms'})) {
				for (my $k = 0; $k < scalar(@{$proposal->{'transforms'}}); $k++) {
					my $transform = @{$proposal->{'transforms'}}[$k];

					if ($transform->{'type'} eq 'ENCR') {
						splice(@{$proposal->{'transforms'}}, $k+1, 0, $partA_transform);
						last;
					}
				}
			}
		}
	}
}
$exp_ike_sa_init_req->{'EN-I-1-1-6-100.A.1'} = \@local_ike_sa_init_req;


#--------------------------------------#
# receive IKE_SA_INIT request          #
#--------------------------------------#
$ike_sa_init_req_param = devel_IKEv2receive_IKE_SA_INIT_request($session,
								'EN-I-1-1-6-100.A.1');
unless(defined($ike_sa_init_req_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT request.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# exit with cleanup                    #
#--------------------------------------#
IKEv2exitPass();



#
# perldoc
#
########################################################################
__END__

=head1 Title

  Test IKEv2.EN.I.1.1.6.3: Sending Multiple Transforms for IKE_SA
  Part A: Multiple Encryption Algorithms (ADVANCED)

=head1 Purpose

  To verify an IKEv2 device properly transmits IKE_SA_INIT request with multiple
  transforms for IKE_SA.

=head1 References

  * [RFC 4306] - Sections 2.7 and 3.3

=head1 Test Setup

  * Network Topology
      Connect the devices according to the Common Topology.
  * Configuration
      In each part, configure the devices according to the following configuration:

=begin html

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD rowspan="2"></TD>
<TD colspan="4">IKE_SA_INIT exchanges Algorithms</TD>
</TR>
<TR>
<TD>Encryption</TD>
<TD>PRF</TD>
<TD>Integrity</TD>
<TD>D-H Group</TD>
</TR>
<TR>
<TD>Part A</TD>
<TD>ENCR_3DES<br>ENCR_AES_CBC</TD>
<TD>PRF_HMAC_SHA1</TD>
<TD>AUTH_HMAC_SHA1_96</TD>
<TD>Group2</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

  * Pre-Sequence and Cleanup Sequence
      IKEv2 on the NUT is disabled after each part.

=head1 Procedure

=begin html

<BLOCKQUOTE>
<PRE>

   NUT                  TN1
(End-Node)           (End-Node)
    |                    |
    |------------------->| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)
    |                    | (Judgement #1)
    |                    |
    V                    V
  
</PRE>
</BLOCKQUOTE>

=end html

  Part A: Multiple Encryption Algorithms (ADVANCED)
       1. NUT starts to negotiate with TN1 by sending IKE_SA_INIT request including a SA payload
          as described above.
       2. Observe the messages transmitted on Link A.

=head1 Observable Result

  Part A
    Step 2: Judgment #1
      The NUT transmits an IKE_SA_INIT response including "ENCR_3DES",
      "ENCR_AES_CBC", "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group
      2" as accepted algorithms.

=head1 Possible Problems

  * None.

=cut

