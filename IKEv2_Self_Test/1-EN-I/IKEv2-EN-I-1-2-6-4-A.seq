#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: IKEv2-EN-I-1-2-6-4-A.seq,v 1.5 2010/07/22 13:32:49 doo Exp $
#
################################################################

BEGIN
{
	push(@INC, '..');
}

END {}

use IKEv2;
use strict;



my $remote	= 'common_remote_index';
my $selector	= 'common_selector_index_outbound';

my $session	= undef;
my $ike_sa_init_req_param	= undef;
my $ike_sa_init_resp_param	= undef;
my $ike_auth_req_param	= undef;
my $ike_auth_resp_param	= undef;
my $create_child_sa_req_param_from_tn1	= undef;
my $create_child_sa_req_param_from_nut	= undef;
my $create_child_sa_resp_param_from_tn1	= undef;
my $create_child_sa_resp_param_from_nut	= undef;
my $informational_req_param_from_tn1 = undef;
my $informational_req_param_from_nut = undef;
my $informational_resp_param_from_tn1 = undef;
my $informational_resp_param_from_nut = undef;

my $material	= undef;
my $child_sa_material_1st = undef;
my $child_sa_material_2nd = undef;
my $ret	= undef;
my $str = undef;

kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST SETUP</B></U></FONT>');

my $tn = 'EN';
my $nut = 'EN';


#------------------------------#
# register IKEv2.pm            #
#------------------------------#
unless(IKEv2initialize($tn, $nut)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 module initializing failure</FONT>');
}



#------------------------------#
# customize configuration      #
#------------------------------#
my $conf = {
	'kmp_sa_lifetime' => '120',
	'ipsec_sa_lifetime' => '60',
};
unless (IKEv2customize($conf)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 configuration failure</FONT>');
}



#------------------------------#
# configure TN                 #
#------------------------------#
unless(IKEv2setupTN()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">TN setup failure</FONT>');
}



#------------------------------#
# configure NUT                #
#------------------------------#
unless(IKEv2setupNUT()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT setup failure</FONT>');
}



kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST PROCEDURE</B></U></FONT>');



#------------------------------#
# prepare session handler      #
#------------------------------#
$session = IKEv2create_session($remote);
unless(defined($session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 session creation failure</FONT>');
}



$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



#--------------------------------------#
# invoke IKE_SA_INIT request           #
#--------------------------------------#
unless(IKEv2initiateNUT($selector)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT initiation failure</FONT>');
}



#--------------------------------------#
# receive IKE_SA_INIT request          #
#--------------------------------------#
$ike_sa_init_req_param = devel_IKEv2receive_IKE_SA_INIT_request($session, $remote);
unless(defined($ike_sa_init_req_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT request.</FONT>');
	IKEv2exitFail();
}



$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



#--------------------------------------#
# send IKE_SA_INIT response            #
#--------------------------------------#
$ike_sa_init_resp_param = devel_IKEv2send_IKE_SA_INIT_response($session, $remote, $ike_sa_init_req_param);
unless(defined($ike_sa_init_resp_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT response.</FONT>');
}



#--------------------------------------#
# generate keying material             #
#--------------------------------------#
$material = devel_IKEv2gen_keymat(0, $ike_sa_init_req_param, $ike_sa_init_resp_param);
unless(defined($material)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t generate keying material.</FONT>');
}



#--------------------------------------#
# receive IKE_AUTH request             #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_AUTH request (HDR, SK {IDi, AUTH, N(USE_TRANSPORT_MODE), SAi2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_auth_req_param = devel_IKEv2receive_IKE_AUTH_request($session,
							  $remote,
							  $ike_sa_init_req_param,
							  $ike_sa_init_resp_param,
							  $material);
unless(defined($ike_auth_req_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_AUTH request.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# send IKE_AUTH response               #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_AUTH response (HDR, SK {IDr, AUTH, N(USE_TRANSPORT_MODE), SAr2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_auth_resp_param = devel_IKEv2send_IKE_AUTH_response($session,
							 $remote,
							 $ike_sa_init_req_param,
							 $ike_sa_init_resp_param,
							 $material);
unless (defined($ike_auth_resp_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_AUTH response.</FONT>');
}



#--------------------------------------#
# set keying material                  #
#--------------------------------------#
my $keymat = undef;
{
	#--------------------------------------#
	# generate keying material (CHILD_SA)  #
	#--------------------------------------#
	$keymat = IKEv2_v6eval_generate_IPsecSA(1,	# Initial Exchanges
						$material,
						$ike_sa_init_req_param,
						$ike_sa_init_resp_param,
						$ike_auth_req_param,
						$ike_auth_resp_param);

	my $ret = IKEv2_v6eval_set_IPsecSA(0, $keymat, $ike_auth_req_param, $ike_auth_resp_param);
	unless($ret) {
		IKEv2log(kDump_Common_Error());
		IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t set keying material.</FONT>');
	}
}



#--------------------------------------#
# prepare CREATE_CHILD_SA request      #
#--------------------------------------#
my $req_notify_for_rekey =
{       # Notify Payload
	'self'		=> 'N',		# *** MUST BE HERE ***
	'nexttype'	=> undef,	# Next Payload
	'critical'	=> '0',		# Critical
	'reserved'	=> '0',		# RESERVED
	'length'	=> '12',	# Payload Length
	'id'		=> 'ESP',	# Protocol ID
	'spiSize'	=> '4',		# SPI Size
	'type'		=> 'REKEY_SA',	# Notify Message Type
	'spi'		=> undef,	# SPI
};
my $common_create_child_sa_req = IKEv2load_packet($exp_create_child_sa_req, $remote);
my @local_create_child_sa_req = @{$common_create_child_sa_req};
foreach my $payload1 (@local_create_child_sa_req) {
	if ($payload1->{'self'} eq 'E') {
		unshift(@{$payload1->{'innerPayloads'}}, $req_notify_for_rekey);

		#set correct nexttype
		$payload1->{'innerType'} = @{$payload1->{'innerPayloads'}}[0]->{'self'};
		for (my $j = 0; $j < scalar(@{$payload1->{'innerPayloads'}}); $j++) {
			my $inner = ${$payload1->{'innerPayloads'}}[$j];
			my $next = ${$payload1->{'innerPayloads'}}[$j+1];
			if (defined($next)) {
				$inner->{'nexttype'} = $next->{'self'};
			}
			else {
				$inner->{'nexttype'} = '0';
			}
		}
	}
}
my $index = 'simultaneous_CHILD_SA_rekeying_retrans';
$exp_create_child_sa_req->{$index} = \@local_create_child_sa_req;



#-------------------------------------------------------------#
# repeat Echo exchange until lifetime of NUT's SA is expired  #
#-------------------------------------------------------------#
my $sa_life = $config_pl->{'ikev2_nut_child_sa_lifetime'};
my $t1 = time;
my $t2 = time;
my $esp_seq_out = 1;
my $esp_seq_in = undef;

while (($t2 - $t1) < $sa_life)
{
	$str  = '<PRE>';
	$str .= "    (I)             (R)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |<--------------| IPsec {Echo Request}\n";
	$str .= "     |               |\n";
	$str .= "     |-------------->| IPsec {Echo Reply}\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';
	IKEv2log($str);

	my $slink = 'Link0';
	my $rlink = 'Link0';
	my $spkt = 'ipsec_ereq';
	my @rpkts = ('ipsec_erep');

	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	unless ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}

	unless(($vrecv{'recvFrame'} eq 'ipsec_erep') &&
		   (defined($vrecv{'recvHexDump'}))) {
		# NOTREACHED
		IKEv2og('<FONT COLOR="#ff0000">should not be reached to here</FONT>');
		IKEv2exitFatal();
	}

	#------------------------------#
	# update IPsec SA              #
	#------------------------------#
	{
		$esp_seq_out++;
		$esp_seq_in = $vrecv{'Frame_Ether.Packet_IPv6.Hdr_ESP.SequenceNumber'};
		$esp_seq_in++;
		my $cpp = '';
		$cpp .= '-DCPP_ECHO_ID=1 ';
		$cpp .= "-DCPP_ESP_SEQ_OUT=$esp_seq_out ";
		$cpp .= "-DCPP_ESP_SEQ_IN=$esp_seq_in ";

		my $conf = { 'cpp' => $cpp };
		my $ret = IKEv2_v6eval_set_IPsecSA(0, $keymat, $ike_auth_req_param, $ike_auth_resp_param, $conf);
	}



	#------------------------------------------#
	# receive CREATE_CHILD_SA request by NUT   #
	#------------------------------------------#
	$str  = '<PRE>';
	$str .= "    (I)             (R)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |-------------->| CREATE_CHILD_SA request (HDR, SK {N(REKEY_SA), N(USE_TRANSPORT_MODE), SA, Ni, TSi, TSr})\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';

	kLogHTML($str);


	$session->timeout(3);
	$create_child_sa_req_param_from_nut = devel_IKEv2receive_CREATE_CHILD_SA_request($session,
											 $index,
											 $ike_sa_init_req_param,
											 $ike_sa_init_resp_param,
											 $ike_auth_req_param,
											 $material);
	$t2 = time;

	if (defined($create_child_sa_req_param_from_nut)) {
		last;
	}
}

if (($t2 - $t1) >= $sa_life)
{
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe CREATE_CHILD_SA request for rekey.</FONT>');
	IKEv2exitFail();
}



#---------------------------------------------#
# (Step. 10) send CREATE_CHILD_SA request     #
#---------------------------------------------#
#--------------------------------------#
# prepare CREATE_CHILD_SA request      #
#--------------------------------------#
my $req_notify_for_rekey =
{	# Notify Payload
	'self'		=> 'N',		# *** MUST BE HERE ***
	'nexttype'	=> undef,	# Next Payload
	'critical'	=> undef,	# Critical
	'reserved'	=> undef,	# RESERVED
	'length'	=> undef,	# Payload Length
	'id'		=> '3',		# Protocol ID
	'spiSize'	=> '4',		# SPI Size
	'type'		=> 'REKEY_SA',	# Notify Message Type
	'spi'		=> $ike_auth_req_param->{'spi'}[0],	  # SPI
	'data'		=> undef	# Notification Data
};

my $common_create_child_sa_req = $gen_create_child_sa_req->{'common_remote_index'};
@local_create_child_sa_req = @{$common_create_child_sa_req};
for (my $i = 0; $i < scalar(@local_create_child_sa_req); $i++) {
	my $payload = $local_create_child_sa_req[$i];

	if (($payload->{'self'} eq 'E')) {
		splice(@local_create_child_sa_req, $i+1, 0, $req_notify_for_rekey);
		last;
	}
}
$index = 'simultaneous_CHILD_SA_rekeying_retrans.10';
$gen_create_child_sa_req->{$index} = \@local_create_child_sa_req;



#--------------------------------------#
# send CREATE_CHILD_SA request         #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| CREATE_CHILD_SA request (HDR, SK {N(REKEY_SA), N(USE_TRANSPORT_MODE), SA, Ni, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$create_child_sa_req_param_from_tn1 = devel_IKEv2send_CREATE_CHILD_SA_request($session,
									      $index,
									      $ike_sa_init_req_param,
									      $ike_sa_init_resp_param,
									      $ike_auth_req_param,
									      $material);

unless (defined($create_child_sa_req_param_from_tn1)) {
        kLogHTML(kDump_Common_Error());
        IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send CREATE_CHILD_SA request.</FONT>');
}



#---------------------------------------------#
# (Step. 11) receive CREATE_CHILD_SA response #
#---------------------------------------------#
#------------------------------------------#
# receive CREATE_CHILD_SA response by NUT  #
#------------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| CREATE_CHILD_SA response (HDR, SK {N(USE_TRANSPORT_MODE), SA, Nr, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$create_child_sa_resp_param_from_nut = devel_IKEv2receive_CREATE_CHILD_SA_response($session,
										   $remote,
										   $ike_sa_init_req_param,
										   $ike_sa_init_resp_param,
										   $create_child_sa_req_param_from_tn1,
										   $material);
unless(defined($create_child_sa_resp_param_from_nut)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe CREATE_CHILD_SA response.</FONT>');
	IKEv2exitFail();
}



#---------------------------------------------#
# (Step. 12) send INFORMATIONAL request       #
#---------------------------------------------#
#--------------------------------------------------#
# send INFORMATIONAL request with a Delete payload #
#--------------------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |               |\n";
$str .= "     |<--------------| INFORMATIONAL request (HDR, SK {D})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



my $req_delete_payload =
{	# Delete Payload
	'self'		=> 'D',	     # *** MUST BE HERE ***
	'nexttype'	=> undef,    # Next Payload
	'critical'	=> undef,    # Critical
	'reserved'	=> undef,    # RESERVED
	'length'	=> undef,    # Payload Length
	'id'		=> 'ESP',    # Protocol ID
	'spiSize'	=> '4',	     # SPI Size
	'spiCount'	=> '1',	 
	'spis'		=> $ike_auth_resp_param->{'spi'},    # SPI
};
my $common_informational_req = $gen_informational_req->{'common_remote_index'};
my @local_informational_req = @{$common_informational_req};

# add Delete payload 
for (my $i = 0; $i < scalar(@local_informational_req); $i++) {
	if ($local_informational_req[$i]->{'self'} eq 'E') {
		splice(@local_informational_req, $i+1);
		push(@local_informational_req, $req_delete_payload);
		last;
	}
}
$index = 'simultaneous_CHILD_SA_rekeying_retrans.12';
$gen_informational_req->{$index} = \@local_informational_req;

$informational_req_param_from_tn1 = devel_IKEv2send_INFORMATIONAL_request($session,
									  $index,
									  $ike_sa_init_req_param,
									  $ike_sa_init_resp_param,
									  $ike_auth_req_param,
									  $material);
unless (defined($informational_req_param_from_tn1)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t send INFORMATIONAL request.</FONT>');
	IKEv2exitFail();
}



#---------------------------------------------#
# (Step. 13) receive INFORMATIONAL response   #
#---------------------------------------------#
#-----------------------------------------#
# receive INFORMATIONAL Request by NUT    #
#-----------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| INFORMATIONAL Response (HDR, SK {D})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


my $resp_delete_payload =
{	# Delete Payload
	'self'		=> 'D',		# *** MUST BE HERE ***
	'nexttype'	=> '0',		# Next Payload
	'critical'	=> '0',		# Critical
	'reserved'	=> '0',		# RESERVED
	'length'	=> '12',	# Payload Length
	'id'		=> 'ESP',	# Protocol ID
	'spiSize'	=> '4',		# SPI Size
	'spiCount'	=> '1',		# # of SPIs
	'spis'		=> $ike_auth_req_param->{'spi'}[0],	# SPI
};
my $common_informational_resp = IKEv2load_packet($exp_informational_resp, $remote);
my @local_informational_resp = @{$common_informational_resp};
# add Delete payload 
for (my $i = 0; $i < scalar(@local_informational_resp); $i++) {
	my $payload = $local_informational_resp[$i];

	if ($payload->{'self'} eq 'E') {
		push(@{$payload->{'innerPayloads'}}, $resp_delete_payload);
		$payload->{'innerType'} = $resp_delete_payload->{'self'};
		last;
	}
}
#set correct nexttype
for (my $i = 0; $i < scalar(@local_informational_resp); $i++) {
	my $payload = $local_informational_resp[$i];

	if ($payload->{'self'} eq 'HDR') {
		my $next = $local_informational_resp[$i+1]; 
		unless (defined($next)) {
			$payload->{'nexttype'} = '0';
			next;
		}
		if ($payload->{'nexttype'} eq $next->{'self'}) {
			next;
		}
		$payload->{'nexttype'} = $next->{'self'};
	}
}

$index = 'simultaneous_CHILD_SA_rekeying_retrans.13';
$exp_informational_resp->{$index} = \@local_informational_resp;


$informational_resp_param_from_nut = devel_IKEv2receive_INFORMATIONAL_response($session,
									       $index,
									       $ike_sa_init_req_param,
									       $ike_sa_init_resp_param,
									       $informational_req_param_from_tn1,
									       $material);
unless (defined($informational_resp_param_from_nut)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe INFORMATIONAL Response.</FONT>');
	IKEv2exitFail();
}



#---------------------------------------------#
# (Step. 14) receive CREATE_CHILD_SA request  #
#---------------------------------------------#
#------------------------------------------#
# prepare CREATE_CHILD_SA request          #
#------------------------------------------#
my $common_create_child_sa_req = IKEv2load_packet($exp_create_child_sa_req, $remote);
my @local_create_child_sa_req = @{$common_create_child_sa_req};
# add Delete payload 
for (my $i = 0; $i < scalar(@local_create_child_sa_req); $i++) {
	my $payload = $local_create_child_sa_req[$i];

	if ($payload->{'self'} eq 'HDR') {
		$payload->{'messID'} = $create_child_sa_req_param_from_nut->{'messID'};
		last;
	}
}
#set correct nexttype
for (my $i = 0; $i < scalar(@local_create_child_sa_req); $i++) {
	my $payload = $local_create_child_sa_req[$i];

	if ($payload->{'self'} eq 'HDR') {
		my $next = $local_create_child_sa_req[$i+1]; 
		unless (defined($next)) {
			$payload->{'nexttype'} = '0';
			next;
		}
		if ($payload->{'nexttype'} eq $next->{'self'}) {
			next;
		}
		$payload->{'nexttype'} = $next->{'self'};
	}
}

$index = 'simultaneous_CHILD_SA_rekeying_retrans.14';
$exp_create_child_sa_req->{$index} = \@local_create_child_sa_req;


#------------------------------------------#
# receive CREATE_CHILD_SA request          #
#------------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| CREATE_CHILD_SA request (HDR, SK {N(REKEY_SA), N(USE_TRANSPORT_MODE), SA, Ni, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$create_child_sa_req_param_from_nut = devel_IKEv2receive_CREATE_CHILD_SA_request($session,
										 $index,
										 $ike_sa_init_req_param,
										 $ike_sa_init_resp_param,
										 $ike_auth_req_param,
										 $material);

unless ($create_child_sa_req_param_from_nut) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe CREATE_CHILD_SA request.</FONT>');
	IKEv2exitFail();
}



#-------------------------------------------------------------------#
# (Step. 15) send CREATE_CHILD_SA response w/ N(NO_PROPOSAL_CHOSEN) #
#-------------------------------------------------------------------#
#--------------------------------------#
# prepare CREATE_CHILD_SA response     #
#--------------------------------------#
my $notify_payload =
{	# Notify Payload
	'self'		=> 'N',		# *** MUST BE HERE ***
	'nexttype'	=> undef,	# Next Payload
	'critical'	=> undef,	# Critical
	'reserved'	=> undef,	# RESERVED
	'length'	=> '8',		# Payload Length
	'length_comparator'	=> 'range',	# Payload Length
	'id'		=> undef,	# Protocol ID
	'spiSize'	=> undef,	# SPI Size
	'type'		=> 'NO_PROPOSAL_CHOSEN',    # Notify Type
	'data'		=> undef,	# Notification Data 
};

my $common_create_child_sa_resp = $gen_create_child_sa_resp->{'common_remote_index'};
my @local_create_child_sa_resp = @{$common_create_child_sa_resp};
for (my $i = 0; $i < scalar(@local_create_child_sa_resp); $i++) {
	my $payload = $local_create_child_sa_resp[$i];

	if (($payload->{'self'} eq 'E')) {
		splice(@local_create_child_sa_resp, $i+1);
		push(@local_create_child_sa_resp, $notify_payload);
		last;
	}
}
$index = 'simultaneous_CHILD_SA_rekeying_retrans.15';
$gen_create_child_sa_resp->{$index} = \@local_create_child_sa_resp;


#--------------------------------------#
# send CREATE_CHILD_SA response        #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| CREATE_CHILD_SA response (HDR, SK {SA, Nr, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$create_child_sa_resp_param_from_tn1 = devel_IKEv2send_CREATE_CHILD_SA_response($session,
										$index,
										$ike_sa_init_req_param,
										$ike_sa_init_resp_param,
										$create_child_sa_req_param_from_nut,
										$material);

unless (defined($create_child_sa_resp_param_from_tn1)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send CREATE_CHILD_SA request.</FONT>');
}



#--------------------------------------#
# generate keying material (CHILD_SA)  #
#--------------------------------------#
$child_sa_material_2nd = devel_IKEv2gen_child_sa_keymat(0,	# CREATE_CHILD_SA Exchange
							$material,
							$ike_sa_init_req_param,
							$ike_sa_init_resp_param,
							$ike_auth_req_param,
							$ike_auth_resp_param,
							$create_child_sa_req_param_from_tn1,
							$create_child_sa_resp_param_from_nut);



#-----------------------------------------#
# flush SAD and SPD (delete 1st CHILD_SA) #
#-----------------------------------------#
$ret = IKEv2flush_SAD_SPD();
unless ($ret) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t flush SAD or SPD.</FONT>');
}



#----------------------------------------#
# set keying material (for 2nd CHILD_SA) #
#----------------------------------------#
$ret = IKEv2set_child_sa_keymat(0,
				$child_sa_material_2nd,
				$create_child_sa_req_param_from_tn1,
				$create_child_sa_resp_param_from_nut);
unless($ret) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t set keying material.</FONT>');
}



#---------------------------------------------#
# (Step. 16) send ICMP                        #
#---------------------------------------------#
#---------------------------------------------#
# (Step. 17) receive ICMP                     #
#---------------------------------------------#
{
	$str  = '<PRE>';
	$str .= "    (I)             (R)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |<--------------| IPsec {Echo Request}\n";
	$str .= "     |               |\n";
	$str .= "     |-------------->| IPsec {Echo Reply}\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';
	IKEv2log($str);

	my $slink = 'Link0';
	my $rlink = 'Link0';
	my $spkt = 'ipsec_ereq';
	my @rpkts = ('ipsec_erep');

	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	unless ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}
}



#--------------------------------------#
# exit with cleanup                    #
#--------------------------------------#
IKEv2exitPass();



#
# perldoc
#
########################################################################
__END__

=head1 Title

  Test IKEv2.EN.I.1.2.6.4: Simultaneous CHILD_SA Rekeying with retransmission
  Part A: (BASIC)

=head1 Purpose

  To verify an IKEv2 device properly handles simultaneous CREATE_CHILD_SA Exchanges
  to rekey CHILD_SA.

=head1 References

  * [RFC 4718] - Sections 5.11.3

=head1 Test Setup

  * Network Topology
      Connect the devices according to the Common Topology.
  * Configuration
      In each part, configure the devices according to the Common Configuration.
      In addition, set IKE_SA Lifetime to 300 seconds and set CHILD_SA Lifetime to 30
      seconds.
  * Pre-Sequence and Cleanup Sequence
      IKEv2 on the NUT is disabled after each part.

=head1 Procedure

=begin html

<BLOCKQUOTE>
<PRE>

   NUT                  TN1
(End-Node)           (End-Node)
    |                    |
    |------------------->| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)
    |                    | (Judgement #1)
    |<-------------------| IKE_SA_INIT Response (HDR, SAr1, KEr, Nr)
    |                    | (Packet #1)
    |                    |
    |------------------->| IKE_AUTH request (HDR, SK {IDi, AUTH, N+, SAi2, TSi, TSr})
    |                    | (Judgement #2)
    |<-------------------| IKE_AUTH Response (HDR, SK {IDr, AUTH, N+, SAr2, TSi, TSr})
    |                    | (Packet #2)
    |                    |
   ---                  ---
    |                    |                       ---
    |<-------------------| IPsec {Echo Request}   |
    |                    | (Packet #3)            |
    |                    |                        | repeat Echo exchange until lifetime of SA is expired
    |------------------->| IPsec {Echo Reply}     |
    |                    | (Judgement #3)         |
    |                    |                       ---
   ---                  ---
    |                    |
    |------------------->| CREATE_CHILD_SA request (HDR, SK {N, N+, SA, Ni, TSi, TSr})
    |                    | (Judgement #4)
    |<-------------------| CREATE_CHILD_SA request (HDR, SK {N, N+, SA, Nr, TSi, TSr})
    |                    | (Packet #4)
    |                    |
    |------------------->| CREATE_CHILD_SA Response (HDR, SK {N+, SA, Ni, TSi, TSr})
    |                    | (Judgement #5)
    |                    |
    |<-------------------| INFORMATIONAL request (HDR, SK {D})
    |                    | (Packet #5)
    |                    |
    |------------------->| INFORMATIONAL response (HDR, SK {D})
    |                    | (Judgement #6)
    |                    |
    |------------------->| CREATE_CHILD_SA request (HDR, SK {N, N+, SA, Ni, TSi, TSr})
    |                    | (Judgement #7)
    |                    |
    |<-------------------| CREATE_CHILD_SA Response (HDR, SK {N(NO_PROPOSAL_CHOSEN)})
    |                    | (Packet #6)
    |                    |
    |<-------------------| IPsec {Echo Request}
    |                    | (Packet #7)
    |                    |
    |------------------->| IPsec {Echo Reply}
    |                    | (Judgement #8)
    |                    |
    V                    V<br>

 N: REKEY_SA
 N+: USE_TRANSPORT_MODE
<br>
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD><TT>Packet #1</TT></TD>
<TD><TT>See Common Packet #2</TT></TD>
</TR>
<TR>
<TD><TT>Packet #2</TT></TD>
<TD><TT>See Common Packet #4</TT></TD>
</TR>
<TR>
<TD><TT>Packet #3</TT></TD>
<TD><TT>See Common Packet #19</TT></TD>
</TR>
<TR>
<TD><TT>Packet #4</TT></TD>
<TD><TT>See Common Packet #13</TT></TD>
</TR>
<TR>
<TD><TT>Packet #5</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
<TR>
<TD><TT>Packet #6</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
<TR>
<TD><TT>Packet #7</TT></TD>
<TD><TT>See Common Packet #19</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
* Packet #5: INFORMATIONAL request
<TABLE BORDER>
<TR>
<TD rowspan="2">IPv6 Header</TD>
<TD>Source Address</TD>
<TD>TN1's Global Address on Link X</TD>
</TR>
<TR>
<TD>Destination Address</TD>
<TD>NUT's Global Address on Link A</TD>
</TR>
<TR>
<TD rowspan="2">UDP Header</TD>
<TD>Source Port</TD>
<TD>500</TD>
</TR>
<TR>
<TD>Destination Port</TD>
<TD>500</TD>
</TR>
<TR>
<TD rowspan="13">IKEv2 Header</TD>
<TD>IKE_SA Initiator's SPI</TD>
<TD>any</TD>
</TR>
<TR>
<TD>IKE_SA Responder's SPI</TD>
<TD>any</TD>
</TR>
<TR>
<TD>Next Payload</TD>
<TD>46 (E)</TD>
</TR>
<TR>
<TD>Major Version</TD>
<TD>2</TD>
</TR>
<TR>
<TD>Minor Version</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Exchange Type</TD>
<TD>37 (INFORMATIONAL)</TD>
</TR>
<TR>
<TD>X (bits 0-2 of Flags)</TD>
<TD>0</TD>
</TR>
<TR>
<TD>I (bit 3 of Flags)</TD>
<TD>0</TD>
</TR>
<TR>
<TD>V (bit 4 of Flags)</TD>
<TD>0</TD>
</TR>
<TR>
<TD>R (bit 5 of Flags)</TD>
<TD>0</TD>
</TR>
<TR>
<TD>X (bits 6-7 Flags)</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Message ID</TD>
<TD>The same value as corresponding request's Message ID</TD>
</TR>
<TR>
<TD>Length</TD>
<TD>any</TD>
</TR>
<TR>
<TD rowspan="9">E Payload</TD>
<TD>Next Payload</TD>
<TD>42 (D)</TD>
</TR>
<TR>
<TD>Critical</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Reserved</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Payload Length</TD>
<TD>any</TD>
</TR>
<TR>
<TD>Initialization Vector</TD>
<TD>The same value as block length of the underlying encryption algorithm</TD>
</TR>
<TD>Encrypted IKE Payloads</TD>
<TD>Subsequent payloads encrypted by underlying encryption algorithm</TD>
</TR>
<TR>
<TD>Padding</TD>
<TD>Any value which to be a multiple of the encryption block size</TD>
</TR>
<TR>
<TD>Pad Length</TD>
<TD>The length of the Padding field</TD>
</TR>
<TR>
<TD>Integrity Checksum Data</TD>
<TD>The Cryptographic checksum of the entire message</TD>
</TR>
<TR>
<TD rowspan="8">D Payload</TD>
<TD>Next Payload</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Critical</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Reserved</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Payload Length</TD>
<TD>12</TD>
</TR>
<TR>
<TD>Protocol ID</TD>
<TD>3 (ESP)</TD>
</TR>
<TR>
<TD>SPI Size</TD>
<TD>4</TD>
</TR>
<TR>
<TD># of SPIs</TD>
<TD>1</TD>
</TR>
<TR>
<TD>Security Parameter Index</TD>
<TD>NUT's inbound CHILD_SA SPI value of the original CHILD_SA</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
Packet #6: CREATE_CHILD_SA response
<TABLE BORDER>
<TR>
<TD>IPv6 Header</TD>
<TD colspan="2">Same as Common Packet #14</TD>
</TR>
<TR>
<TD>UDP Header</TD>
<TD colspan="2">Same as Common Packet #14</TD>
</TR>
<TR>
<TD>IKEv2 Header</TD>
<TD colspan="2">Same as Common Packet #14</TD>
</TR>
<TR>
<TD>E Payload</TD>
<TD colspan="2">Same as Common Packet #14</TD>
</TR>
<TR>
<TD rowspan="7">N Payload</TD>
<TD>Next Payload</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Critical</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Reserved</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Payload Length</TD>
<TD>8</TD>
</TR>
<TR>
<TD>Protocol ID</TD>
<TD>0</TD>
</TR>
<TR>
<TD>SPI Size</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Notify Message Type</TD>
<TD>NO_PROPOSAL_CHOSEN (14)</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

  Part A: (BASIC)
     1. NUT starts to negotiate with TN1 by sending IKE_SA_INIT request.
     2. Observe the messages transmitted on Link A.
     3. TN1 responds with an IKE_SA_INIT response to the NUT.
     4. Observe the messages transmitted on Link A.
     5. After reception of IKE_AUTH request from the NUT, TN1 responds with an IKE_AUTH
         response to the NUT
     6. TN1 transmits an Echo Request with IPsec ESP using the first negotiated algorithms to NUT.
     7. Observe the messages transmitted on Link A.
     8. Repeat Steps 6 and 7 until lifetime of SA is expired.
     9. Observe the messages transmitted on Link A.
     10. TN1 transmits a CREATE_CHILD_SA request to rekey CHILD_SA to the NUT.
     11. Observe the messages transmitted on Link A.
     12. TN1 transmits an INFORMAITONAL request with a Delete Payload to close the replaced
         CHILD_SA.
     13. Observe the messages transmitted on Link A.
     14. Observe the messages transmitted on Link A.
     15. TN1 responds with a CREATE_CHILD_SA response with a Notify payload of type
         NO_PROPOSAL_CHOSEN to the retransmitted CREATE_CHILD_SA request.
     16. TN1 transmits an Echo Request with IPsec ESP using the existing algorithms to the NUT.
     17. Observe the messages transmitted on Link A.

=head1 Observable Result

  Part A
       Step 2: Judgment #1
       The NUT transmits an IKE_SA_INIT request including "ENCR_3DES",
       "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as proposed
       algorithms.

       Step 4: Judgment #2
       The NUT transmits an IKE_AUTH request including "ENCR_3DES",
       "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" as proposed algorithms.

       Step 7: Judgment #3
       The NUT transmits an Echo Reply with IPsec ESP using corresponding algorithms.

       Step 9: Judgment #4
       The NUT transmits a CREATE_CHILD_SA request to rekey a CHILD_SA. The message
       includes "ENCR_3DES", "AUTH_HMAC_SHA1_96" and "No Extended Sequence
       Numbers" as proposed algorithms. And the CREATE_CHILD_SA request includes a Notify
       payload of type REKEY_SA containing rekeyed CHILD_SA's SPI value in the SPI field.

       Step 11: Judgment #5
       The NUT transmits a CREATE_CHILD_SA response including "ENCR_3DES",
       "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" as proposed algorithms.

       Step 13: Judgment #6
       The NUT transmits an INFORMATIONAL response with a Delete Payload including 3
       (ESP) as Protocol ID, 4 as SPI Size and the inblund SPI value of the original CHILD_SA.

       Step 14: Judgment #7
       The NUT retransmits the same CREATE_CHILD_SA request as the message at Step 11. The
       message includes "ENCR_3DES", "AUTH_HMAC_SHA1_96" and "No Extended Sequence
       Numbers" as proposed algorithms.

       Step 17: Judgment #8
       The NUT transmits an Echo Reply with IPsec ESP using the existing CHILD_SA initiated by
       the TN1 at Step 10.

=head1 Possible Problems

  * Each NUT has the different lifetime of SA.

=cut


