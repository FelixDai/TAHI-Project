#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: IKEv2-EN-I-1-1-6-11-A.seq,v 1.7 2010/07/22 13:32:49 doo Exp $
#
################################################################

BEGIN
{
	push(@INC, '..');
}

END {}

use IKEv2;
use strict;



my $remote	= 'common_remote_index';
my $selector	= 'common_selector_index_outbound';


my $session	= undef;
my $ret	= undef;
my $str = undef;
my $ike_sa_init_req_param_1	= undef;
my $ike_sa_init_req_param_2	= undef;
my $ike_sa_init_resp_param_1	= undef;
my $material	= undef;

my @local_ike_sa_init_resp = undef;
my @local_ike_sa_init_req = undef;

my $tn = 'EN';
my $nut = 'EN';

#------------------------------#
# register IKEv2.pm            #
#------------------------------#
unless(IKEv2initialize($tn, $nut)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 module initializing failure</FONT>');
}



#---------------------------------#
# switch Support or Not Support   #
#---------------------------------#
unless ($config_pl->{'advanced_support_dh_group14'}) {
       IKEv2exitNS('Not support ' . "'advanced_support_dh_group14'");
}

unless ($config_pl->{'advanced_multiple_transform_initial_ike_sa'}) {
       IKEv2exitNS('Not support ' . "'advanced_multiple_transform_initial_ike_sa'");
}



#------------------------------#
# customize configuration      #
#------------------------------#
my $conf = {
	'kmp_dh_group' => [
		'modp2048',
		'modp1024',
	],
};
unless (IKEv2customize($conf)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 configuration failure</FONT>');
}



#------------------------------#
# configure TN                 #
#------------------------------#
unless(IKEv2setupTN()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">TN setup failure</FONT>');
}



#------------------------------#
# configure NUT                #
#------------------------------#
unless(IKEv2setupNUT()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT setup failure</FONT>');
}



kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST PROCEDURE</B></U></FONT>');



#------------------------------#
# prepare session handler      #
#------------------------------#
$session = IKEv2create_session($remote);
unless(defined($session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 session creation failure</FONT>');
}



{
	#--------------------------------------#
	# prepare expected IKE_SA_INIT Request #
	#--------------------------------------#
	my $transform_dh14 = {
		# Transform Substructure
		'nexttype'	=> '0',		# 0 (last) or 3 (more)
		'reserved1'	=> '0',		# RESERVED
		'transformLen'	=> '8',		# Transform Length
		'type'		=> 'D-H',	# Transform Type
		'reserved2'	=> '0',		# RESERVED
		'id'		=> '2048 MODP Group',	# Transform ID
		'attributes'	=> [		# Transform Attributes
		]
	};
	my $transform_len = 8;
	my $common_ike_sa_init_req = IKEv2load_packet($exp_ike_sa_init_req, $remote);
	@local_ike_sa_init_req = @{$common_ike_sa_init_req};

	# add transform payload
	for (my $i = 0; $i < scalar(@local_ike_sa_init_req); $i++) {
		my $payload = $local_ike_sa_init_req[$i];

		if ($payload->{'self'} eq 'SA') {
			$payload->{'length'} += $transform_len;

			for (my $j = 0; $j < scalar(@{$payload->{'proposals'}}); $j++) {
				my $proposal = @{$payload->{'proposals'}}[$j];

				$proposal->{'transformCount'} += 1;
				$proposal->{'proposalLen'} += $transform_len;

				if (defined($proposal->{'transforms'})) {
					for (my $k = 0; $k < scalar(@{$proposal->{'transforms'}}); $k++) {
						my $transform = @{$proposal->{'transforms'}}[$k];

						if ($transform->{'type'} eq 'D-H') {
							$transform->{'nexttype'} = '3';
							splice(@{$proposal->{'transforms'}}, $k+1, 0, $transform_dh14);
							last;
						}
					}
				}
			}
		}
		elsif ($payload->{'self'} eq 'KE') {
			$payload->{'length'} = 264; # '2048 MODP Group';
			$payload->{'group'} = 14; # '2048 MODP Group';
		}
	}
	my $index = 'ike_sa_init_req_multiple_dh_transforms_dh14';
	$exp_ike_sa_init_req->{$index} = \@local_ike_sa_init_req;

	$str  = '<PRE>';
	$str .= "    (I)             (R)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |-------------->| IKE_SA_INIT request (HDR, SAi1(DH#2, DH#14), KEi(DH#14), Ni)\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';

	kLogHTML($str);



	#--------------------------------------#
	# invoke IKE_SA_INIT request           #
	#--------------------------------------#
	unless(IKEv2initiateNUT($selector)) {
		IKEv2exitFatal('<FONT COLOR="#ff0000">NUT initiation failure</FONT>');
	}



	#--------------------------------------#
	# receive IKE_SA_INIT request          #
	#--------------------------------------#
	$ike_sa_init_req_param_1 = devel_IKEv2receive_IKE_SA_INIT_request($session,
									  $index);
	unless(defined($ike_sa_init_req_param_1)) {
		kLogHTML(kDump_Common_Error());
		kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT request.</FONT>');
		IKEv2exitFail();
	}
}



$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_SA_INIT response (HDR, N(INVALID_KE_PAYLOAD(DH#2)))\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



#-----------------------------------------------------#
# prepare send packet for IKE_SA_INIT response        #
# including Notify payload of type INVALID_KE_PAYLOAD #
#-----------------------------------------------------#
my $notify_payload =
{	# Notify Payload
	'self'		=> 'N',		# *** MUST BE HERE ***
	'nexttype'	=> undef,	# Next Payload
	'critical'	=> undef,	# Critical
	'reserved'	=> undef,	# RESERVED
	'length'	=> undef,     # Payload Length
	'length_comparator'	=> 'range',	# Payload Length
	'id'		=> undef,	  # Protocol ID
	'spiSize'	=> undef,	  # SPI Size
	'type'		=> 'INVALID_KE_PAYLOAD',    # Notify Type
	'data'		=> unpack('H*', pack('n', 2)),		  # Notification Data
};
my $common_ike_sa_init_resp = $gen_ike_sa_init_resp->{'common_remote_index'};
@local_ike_sa_init_resp = @{$common_ike_sa_init_resp};

# remove payloads except HDR
@local_ike_sa_init_resp = grep {
	my $ret = 0;
	if ($_->{'self'} eq 'HDR') { $ret = 1; $_->{'respSPI'} = '0000000000000000'; }
	$ret;
} @local_ike_sa_init_resp;


# add Notify payload
push (@local_ike_sa_init_resp, $notify_payload);
my $index = 'receiving_ike_sa_init_invalid_ke_payload';
$gen_ike_sa_init_resp->{$index} = \@local_ike_sa_init_resp;



#--------------------------------------#
# send IKE_SA_INIT response            #
#--------------------------------------#
$ike_sa_init_resp_param_1 = devel_IKEv2send_IKE_SA_INIT_response($session,
								 $index,
								 $ike_sa_init_req_param_1);
unless(defined($ike_sa_init_resp_param_1)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT request.</FONT>');
}



{
	#--------------------------------------#
	# prepare expected IKE_SA_INIT Request #
	#--------------------------------------#
	my $transform_dh14 = {
		# Transform Substructure
		'nexttype'	=> '0',		# 0 (last) or 3 (more)
		'reserved1'	=> '0',		# RESERVED
		'transformLen'	=> '8',		# Transform Length
		'type'		=> 'D-H',	# Transform Type
		'reserved2'	=> '0',		# RESERVED
		'id'		=> '2048 MODP Group',	# Transform ID
		'attributes'	=> [		# Transform Attributes
		]
	};
	my $transform_len = 8;
	my $common_ike_sa_init_req = IKEv2load_packet($exp_ike_sa_init_req, $remote);
	@local_ike_sa_init_req = @{$common_ike_sa_init_req};

	# add transform payload
	for (my $i = 0; $i < scalar(@local_ike_sa_init_req); $i++) {
		my $payload = $local_ike_sa_init_req[$i];

		if ($payload->{'self'} eq 'SA') {
			$payload->{'length'} += $transform_len;

			for (my $j = 0; $j < scalar(@{$payload->{'proposals'}}); $j++) {
				my $proposal = @{$payload->{'proposals'}}[$j];

				$proposal->{'transformCount'} += 1;
				$proposal->{'proposalLen'} += $transform_len;

				if (defined($proposal->{'transforms'})) {
					for (my $k = 0; $k < scalar(@{$proposal->{'transforms'}}); $k++) {
						my $transform = @{$proposal->{'transforms'}}[$k];

						if ($transform->{'type'} eq 'D-H') {
							$transform->{'nexttype'} = '3';
							splice(@{$proposal->{'transforms'}}, $k+1, 0, $transform_dh14);
							last;
						}
					}
				}
			}
		}
		elsif ($payload->{'self'} eq 'KE') {
			$payload->{'length'} = 136; # '1024 MODP Group';
			$payload->{'group'} = 2; # '1024 MODP Group';
		}
	}
	my $index = 'ike_sa_init_req_multiple_dh_transforms_dh2';
	$exp_ike_sa_init_req->{$index} = \@local_ike_sa_init_req;

	$str  = '<PRE>';
	$str .= "    (I)             (R)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |-------------->| IKE_SA_INIT request (HDR, SAi1(DH#2, DH#14), KEi(DH#2), Ni)\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';

	kLogHTML($str);



	#--------------------------------------#
	# invoke IKE_SA_INIT request           #
	#--------------------------------------#
	unless(IKEv2initiateNUT($selector)) {
		IKEv2exitFatal('<FONT COLOR="#ff0000">NUT initiation failure</FONT>');
	}



	#--------------------------------------#
	# receive IKE_SA_INIT request          #
	#--------------------------------------#
	$ike_sa_init_req_param_2 = devel_IKEv2receive_IKE_SA_INIT_request($session,
									  $index);
	unless(defined($ike_sa_init_req_param_2)) {
		kLogHTML(kDump_Common_Error());
		kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT request.</FONT>');
		IKEv2exitFail();
	}
}



#--------------------------------------#
# exit with cleanup                    #
#--------------------------------------#
IKEv2exitPass();



#
# perldoc
#
########################################################################
__END__

=head1 Title

  Test IKEv2.EN.I.1.1.6.11: Receipt of INVALID_KE_PAYLOAD in Initial Exchange 
  Part A: IKE_SA Responder's SPI is zero (ADVANCED)

=head1 Purpose

  To verify an IKEv2 device properly handles IKE_SA_INIT Response with a Notify payload
  of type INVALID_KE_PAYLOAD.

=head1 References

  * [RFC 4306] - Sections 2.7, 3.4 and 3.10.1
  * [RFC 4718] - Sections 2.1 and 2.2

=head1 Test Setup

  * Network Topology
      Connect the devices according to the Common Topology.
  * Configuration
      In each part, configure the devices according to the Common Configuration.
  * Pre-Sequence and Cleanup Sequence
      IKEv2 on the NUT is disabled after each part.

=head1 Procedure

=begin html

<BLOCKQUOTE>
<PRE>

   NUT                  TN1
(End-Node)           (End-Node)
    |                    |
    |------------------->| IKE_SA_INIT request (HDR, SAi1(DH#2, DH#14), KEi(DH#14), Ni)
    |                    | (Judgement #1)
    |<-------------------| IKE_SA_INIT Response (HDR, N(INVALID_KE_PAYLOAD(DH#2)))
    |                    | (Packet #1)
    |                    |
    |------------------->| IKE_SA_INIT request (HDR, SAi1(DH#2, DH#14), KEi'(DH#2), Ni)
    |                    | (Judgement #2)
    |                    |
    V                    V
  
</PRE>
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD><TT>Packet #1</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
Packet #1: IKE_SA_INIT response
<TABLE BORDER>
<TR>
<TD>IPv6 Header</TD>
<TD colspan="2">Same as the Common Packet #2</TD>
</TR>
<TR>
<TD>UDP Header</TD>
<TD colspan="2">Same as the Common Packet #2</TD>
</TR>
<TR>
<TD rpwspan="2">IKEv2 Header</TD>
<TD colspan="2">Same as the Common Packet #2</TD>
</TR>
<TR>
<TD>IKE_SA Responder's SPI</TD>
<TD>See each Part</TD>
</TR>
<TR>
<TD rowspan="8">N Payload</TD>
<TD>Next Payload</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Critical</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Reserved</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Payload Length</TD>
<TD>10</TD>
</TR>
<TR>
<TD>Protocol ID</TD>
<TD>0</TD>
</TR>
<TR>
<TD>SPI Size</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Notify Message Type</TD>
<TD>INVALID_KE_PAYLOAD (17)</TD>
</TR>
<TR>
<TD>Notification Data</TD>
<TD>The accepted D-H Group # (2)</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

  Part A: IKE_SA Responder's SPI is zero (BASIC)
     1. NUT starts to negotiate with TN1 by sending IKE_SA_INIT request.
     2. Observe the messages transmitted on Link A.
     3. TN1 responds with an IKE_SA_INIT Response including a Notify payload of type
        INVALID_KE_PAYLOAD containing 2 (1024 Bit MODP) as Notification Data to the NUT.
        The message's IKE_SA Responder's SPI is set to zero.
     4. Observe the messages transmitted on Link A.

=head1 Observable Result

  Part A
       Step 2: Judgment #1
       The NUT transmits an IKE_SA_INIT Request including
       "ENCR_3DES", "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96", "D-H group 2" and "D-H
       group 14" as proposed algorithms. KEi payload must carry "D-H group 14" public key
       value.

       Step 4: Judgment #2
       The NUT transmits an IKE_SA_INIT request including a Key Exchange payoad which
       contains "D-H group 2" public key value. All other payloads are unchanged.


=head1 Possible Problems

  * None.

=cut


