#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: IKEv2-EN-I-1-1-4-1-B.seq,v 1.6 2010/07/22 13:32:49 doo Exp $
#
################################################################

BEGIN
{
	push(@INC, '..');
}

END {}

use IKEv2;
use strict;



my $remote	= 'common_remote_index';
my $selector	= 'common_selector_index_outbound';



my $session	= undef;
my $ret	= undef;
my $str = undef;
my $ike_sa_init_req_param	= undef;
my $ike_sa_init_resp_param	= undef;
my $ike_auth_req_param	= undef;
my $ike_auth_resp_param	= undef;
my $create_child_sa_req_param	= undef;
my $create_child_sa_resp_param	= undef;

my $material	= undef;
my $child_sa_material_1st = undef;
my $child_sa_material_2nd = undef;

kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST SETUP</B></U></FONT>');

my $tn = 'EN';
my $nut = 'EN';


#------------------------------#
# register IKEv2.pm            #
#------------------------------#
unless(IKEv2initialize($nut, $tn)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 module initializing failure</FONT>');
}



#------------------------------#
# customize configuration      #
#------------------------------#
my $conf = {
	'kmp_sa_lifetime' => '120',
	'ipsec_sa_lifetime' => '60',
};
unless (IKEv2customize($conf)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 configuration failure</FONT>');
}



#------------------------------#
# configure TN                 #
#------------------------------#
unless(IKEv2setupTN()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">TN setup failure</FONT>');
}



#------------------------------#
# configure NUT                #
#------------------------------#
unless(IKEv2setupNUT()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT setup failure</FONT>');
}



kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST PROCEDURE</B></U></FONT>');
kLogHTML('<FONT COLOR="#000000" SIZE="+1"><U><B>Part A:Invalid payload type 1.</B></U></FONT>');


#------------------------------#
# prepare session handler      #
#------------------------------#
$session = IKEv2create_session($remote);
unless(defined($session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 session creation failure</FONT>');
}



$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



#--------------------------------------#
# invoke IKE_SA_INIT request           #
#--------------------------------------#
unless(IKEv2initiateNUT($selector)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT initiation failure</FONT>');
}



#--------------------------------------#
# receive IKE_SA_INIT request          #
#--------------------------------------#
$ike_sa_init_req_param = devel_IKEv2receive_IKE_SA_INIT_request($session, $remote);
unless(defined($ike_sa_init_req_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT request.</FONT>');
	IKEv2exitFail();
}



$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_SA_INIT response (HDR, P, SAr1, KEr, Nr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



#--------------------------------------#
# send IKE_SA_INIT response            #
#--------------------------------------#
$ike_sa_init_resp_param = devel_IKEv2send_IKE_SA_INIT_response($session,
							       $remote,
							       $ike_sa_init_req_param);
unless(defined($ike_sa_init_resp_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT response.</FONT>');
}



#--------------------------------------#
# generate keying material             #
#--------------------------------------#
$material = devel_IKEv2gen_keymat(0, $ike_sa_init_req_param, $ike_sa_init_resp_param);
unless(defined($material)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t generate keying material.</FONT>');
}



$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_AUTH request (HDR, SK {IDi, AUTH, N(USE_TRANSPORT_MODE), SAi2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



#--------------------------------------#
# receive IKE_AUTH request             #
#--------------------------------------#
$ike_auth_req_param = devel_IKEv2receive_IKE_AUTH_request($session,
							  $remote,
							  $ike_sa_init_req_param,
							  $ike_sa_init_resp_param,
							  $material);
unless(defined($ike_auth_req_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_AUTH request.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# send IKE_AUTH response               #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_AUTH response (HDR, SK {IDr, AUTH, N(USE_TRANSPORT_MODE), SAr2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_auth_resp_param = devel_IKEv2send_IKE_AUTH_response($session,
							 $remote,
							 $ike_sa_init_req_param,
							 $ike_sa_init_resp_param,
							 $material);
unless (defined($ike_auth_resp_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_AUTH response.</FONT>');
}



#--------------------------------------#
# set keying material                  #
#--------------------------------------#
my $keymat = undef;
{
	#--------------------------------------#
	# generate keying material (CHILD_SA)  #
	#--------------------------------------#
	$keymat = IKEv2_v6eval_generate_IPsecSA(1,	# Initial Exchanges
						$material,
						$ike_sa_init_req_param,
						$ike_sa_init_resp_param,
						$ike_auth_req_param,
						$ike_auth_resp_param);

	my $ret = IKEv2_v6eval_set_IPsecSA(0, $keymat, $ike_auth_req_param, $ike_auth_resp_param);
	unless($ret) {
		IKEv2log(kDump_Common_Error());
		IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t set keying material.</FONT>');
	}
}



#--------------------------------------#
# prepare CREATE_CHILD_SA request      #
#--------------------------------------#
my $req_notify_for_rekey =
{	# Notify Payload
	'self'		=> 'N',		# *** MUST BE HERE ***
	'nexttype'	=> undef,	# Next Payload
	'critical'	=> '0',		# Critical
	'reserved'	=> '0',		# RESERVED
	'length'	=> '12',	# Payload Length
	'id'		=> 'ESP',	# Protocol ID
	'spiSize'	=> '4',		# SPI Size
	'type'		=> 'REKEY_SA',	# Notify Message Type
	'spi'		=> undef,	# SPI
};
my $common_create_child_sa_req = $exp_create_child_sa_req->{'common_remote_index'};
my @local_create_child_sa_req = @{$common_create_child_sa_req};
# change N(USE_TRANSPORT_MODE) & add N(REKEY_SA)
foreach my $payload1 (@local_create_child_sa_req) {
	if ($payload1->{'self'} eq 'E') {
		unshift(@{$payload1->{'innerPayloads'}}, $req_notify_for_rekey);

		#set correct nexttype
		$payload1->{'innerType'} = @{$payload1->{'innerPayloads'}}[0]->{'self'};
		for (my $j = 0; $j < scalar(@{$payload1->{'innerPayloads'}}); $j++) {
			my $inner = ${$payload1->{'innerPayloads'}}[$j];
			my $next = ${$payload1->{'innerPayloads'}}[$j+1];
			if (defined($next)) {
				$inner->{'nexttype'} = $next->{'self'};
			}
			else {
				$inner->{'nexttype'} = '0';
			}
		}
	}
}
my $index = 'unrecognized_payload_critical_not_set.1';
$exp_create_child_sa_req->{$index} = \@local_create_child_sa_req;



#-------------------------------------------------------------#
# repeat Echo exchange until lifetime of NUT's SA is expired  #
#-------------------------------------------------------------#
my $sa_life = $config_pl->{'ikev2_nut_child_sa_lifetime'};
my $t1 = time;
my $t2 = time;
my $esp_seq_out = 1;

while (($t2 - $t1) < $sa_life)
{
	$str  = '<PRE>';
	$str .= "    (I)             (R)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |<--------------| IPsec {Echo Request}\n";
	$str .= "     |               |\n";
	$str .= "     |-------------->| IPsec {Echo Reply}\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';
	IKEv2log($str);

	my $slink = 'Link0';
	my $rlink = 'Link0';
	my $spkt = 'ipsec_ereq';
	my @rpkts = ('ipsec_erep');

	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	unless ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}

	unless(($vrecv{'recvFrame'} eq 'ipsec_erep') &&
		   (defined($vrecv{'recvHexDump'}))) {
		# NOTREACHED
		IKEv2og('<FONT COLOR="#ff0000">should not be reached to here</FONT>');
		IKEv2exitFatal();
	}

	#------------------------------#
	# update IPsec SA              #
	#------------------------------#
	{
		$esp_seq_out++;
		my $esp_seq_in = $vrecv{'Frame_Ether.Packet_IPv6.Hdr_ESP.SequenceNumber'};
		$esp_seq_in++;
		my $cpp = '';
		$cpp .= '-DCPP_ECHO_ID=1 ';
		$cpp .= "-DCPP_ESP_SEQ_OUT=$esp_seq_out ";
		$cpp .= "-DCPP_ESP_SEQ_IN=$esp_seq_in ";

		my $conf = { 'cpp' => $cpp };
		my $ret = IKEv2_v6eval_set_IPsecSA(0, $keymat, $ike_auth_req_param, $ike_auth_resp_param, $conf);
	}



	#------------------------------------------#
	# receive CREATE_CHILD_SA request by NUT   #
	#------------------------------------------#
	$str  = '<PRE>';
	$str .= "    (I)             (R)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |-------------->| CREATE_CHILD_SA request (HDR, SK {N(REKEY_SA), N(USE_TRANSPORT_MODE), SA, Ni, TSi, TSr})\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';

	kLogHTML($str);


	$session->timeout(3);
	$create_child_sa_req_param = devel_IKEv2receive_CREATE_CHILD_SA_request($session,
										$index,
										$ike_sa_init_req_param,
										$ike_sa_init_resp_param,
										$ike_auth_req_param,
										$material);
	$t2 = time;

	if (defined($create_child_sa_req_param)) {
		last;
	}
}

if (($t2 - $t1) >= $sa_life)
{
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe CREATE_CHILD_SA request for rekey.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# prepare CREATE_CHILD_SA response     #
#--------------------------------------#
my $invalid_payload = {
	# INVALID Payload
	'self'		=> 'UNDEFINED',	# *** MUST BE HERE ***

	'nexttype'	=> undef,	# Next Payload
	'critical'	=> '0',		# Critical
	'reserved'	=> undef,	# RESERVED
	'length'	=> undef,	# Payload Length
	'type'		=> '32',	# This value is set to previous payload's Next Payload
};
my $common_create_child_sa_resp = $gen_create_child_sa_resp->{'common_remote_index'};
my @local_create_child_sa_resp = @{$common_create_child_sa_resp};


# add invalid payload
for (my $i = 0; $i < scalar(@local_create_child_sa_resp); $i++) {
	if ($local_create_child_sa_resp[$i]->{'self'} eq 'E') {
		splice(@local_create_child_sa_resp, $i+1, 0, $invalid_payload);
		last;
	}
}
$index = 'unrecognized_payload_critical_not_set.2';
$gen_create_child_sa_resp->{$index} = \@local_create_child_sa_resp;



#--------------------------------------#
# send CREATE_CHILD_SA response        #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (I)             (R)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| CREATE_CHILD_SA response (HDR, SK {UNDEFINED_PAYLOAD, SA, Nr, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$create_child_sa_resp_param = devel_IKEv2send_CREATE_CHILD_SA_response($session,
								       $index,
								       $ike_sa_init_req_param,
								       $ike_sa_init_resp_param,
								       $create_child_sa_req_param,
								       $material);
unless (defined($create_child_sa_resp_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe CREATE_CHILD_SA response.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# set keying material                  #
#--------------------------------------#
my $keymat2 = undef;
{
	#--------------------------------------#
	# generate keying material (CHILD_SA)  #
	#--------------------------------------#
	$keymat2 = IKEv2_v6eval_generate_IPsecSA(0,	# CREATE_CHILD_SA Exchanges
						 $material,
						 $ike_sa_init_req_param,
						 $ike_sa_init_resp_param,
						 $ike_auth_req_param,
						 $ike_auth_resp_param,
						 $create_child_sa_req_param,
						 $create_child_sa_resp_param);

	my $ret = IKEv2_v6eval_set_IPsecSA(0, $keymat2, $create_child_sa_req_param, $create_child_sa_resp_param);
	unless($ret) {
		IKEv2log(kDump_Common_Error());
		IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t set keying material.</FONT>');
	}
}



#--------------------------------------#
# send Echo Request                    #
#--------------------------------------#
{
	$str  = '<PRE>';
	$str .= "    (I)             (R)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |<--------------| IPsec {Echo Request}\n";
	$str .= "     |               |\n";
	$str .= "     |-------------->| IPsec {Echo Reply}\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';
	IKEv2log($str);

	my $slink = 'Link0';
	my $rlink = 'Link0';
	my $spkt = 'ipsec_ereq';
	my @rpkts = ('ipsec_erep');

	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	unless ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}
}



#--------------------------------------#
# exit with cleanup                    #
#--------------------------------------#
IKEv2exitPass();



#
# perldoc
#
########################################################################
__END__

=head1 Title

  Test IKEv2.EN.I.1.1.4.1: Unrecognized payload types and Critical bit is not set
  Part B: Invalid payload type 32 (BASIC)

=head1 Purpose

  To verify an IKEv2 device ignores invalid payload types when the invalid type payload's
  critical bit is not set.

=head1 References

  * [RFC 4306] - Sections 2.5

=head1 Test Setup

  * Network Topology
      Connect the devices according to the Common Topology.
  * Configuration
      In each part, configure the devices according to the Common Configuration.
  * Pre-Sequence and Cleanup Sequence
      IKEv2 on the NUT is disabled after each part.

=head1 Procedure

=begin html

<BLOCKQUOTE>
<PRE>
   NUT                  TN1
(End-Node)           (End-Node)
    |                    |
    |------------------->| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)
    |                    | (Judgement #1)
    |<-------------------| IKE_SA_INIT Response (HDR, SAr1, KEr, Nr)
    |                    | (Packet #1)
    |                    |
    |------------------->| IKE_AUTH request (HDR, SK {IDi, AUTH, N+, SAi2, TSi, TSr})
    |                    | (Judgement #2)
    |<-------------------| IKE_AUTH response (HDR, SK {IDr, AUTH, N+, SAr2, TSi, TSr})
    |                    | (Packet #2)
    |                    |
   ---                  ---
    |                    |                        ---
    |<-------------------| IPSec {Echo Request}    |
    |                    | (Packet #3)             |
    |------------------->| IPSec {Echo Reply}      | repeat Echo exchange until lifetime of SA is expired
    |                    | (Judgement #3)          |
    |                    |                        ---
   ---                  ---
    |                    |
    |------------------->| CREATE_CHILD_SA request (HDR, SK {N, N+, SA, Ni, TSi, TSr})
    |                    | (Judgement #4)
    |<-------------------| CREATE_CHILD_SA response (HDR, SK {P, N+, SA, Nr, TSi, TSr})
    |                    | (Packet #4)
    |                    |
    |<-------------------| IPSec {Echo Request} (new CHILD_SA)
    |                    | (Packet #5)
    |------------------->| IPSec {Echo Reply} (new CHILD_SA)
    |                    | (Judgement #5)
    |                    |
    V                    V

 P: Payload with an invalid payload type
 N: REKEY_SA
 N+: USE_TRANSPORT_MODE 

</PRE>
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD><TT>Packet #1</TT></TD>
<TD><TT>See Common Packet #2</TT></TD>
</TR>
<TR>
<TD><TT>Packet #2</TT></TD>
<TD><TT>See Common Packet #4</TT></TD>
</TR>
<TR>
<TD><TT>Packet #3</TT></TD>
<TD><TT>See Common Packet #19</TT></TD>
</TR>
<TR>
<TD><TT>Packet #4</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
<TR>
<TD><TT>Packet #5</TT></TD>
<TD><TT>See Common Packet #19</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
Packet #4: CREATE_CHILD_SA response
<TABLE BORDER>
<TR>
<TD>IPv6 Header</TD>
<TD colspan="2">All fields are same as Common Packet #14 Payload</TD>
</TR>
<TR>
<TD>UDP Header</TD>
<TD colspan="2">All fields are same as Common Packet #14 Payload</TD>
</TR>
<TR>
<TD rowspan="2">IKEv2 Header</TD>
<TD>Next Payload</TD>
<TD>Invalid payload type value</TD>
</TR>
<TR>
<TD colspan="2">Other fields are same as Common Packet #14</TD>
</TR>
<TR>
<TD rowspan="4">Invalid Payload</TD>
<TD>Next Payload</TD>
<TD>41(N)</TD>
</TR>
<TR>
<TD>Critical</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Reserved</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Payload Length</TD>
<TD>4</TD>
</TR>
<TR>
<TD>N Payload</TD>
<TD colspan="2">All fields are same as Common Packet #14 Payload</TD>
</TR>
<TR>
<TD>SA Payload</TD>
<TD colspan="2">All fields are same as Common Packet #14 Payload</TD>
</TR>
<TR>
<TD>Ni, Nr paylaod</TD>
<TD colspan="2">All fields are same as Common Packet #14 Payload</TD>
</TR>
<TR>
<TD>TSi Payload</TD>
<TD colspan="2">All fields are same as Common Packet #14 Payload</TD>
</TR>
<TR>
<TD>TSr Payload</TD>
<TD colspan="2">All fields are same as Common Packet #14 Payload</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

  Part B: Invalid payload type 32 (BASIC)
     14. NUT starts to negotiate with TN1 by sending IKE_SA_INIT request.
     15. Observe the messages transmitted on Link A.
     16. TN1 responds with an IKE_SA_INIT response to the NUT.
     17. Observe the messages transmitted on Link A.
     18. After reception of IKE_AUTH request from the NUT, TN1 responds with an IKE_AUTH
         response to the NUT
     19. TN1 transmits an Echo Request with IPsec ESP using the first negotiated algorithms to NUT.
     20. Observe the messages transmitted on Link A.
     21. Repeat Steps 19 and 20 until lifetime of SA is expired.
     22. Observe the messages transmitted on Link A.
     23. After reception of CREATE_CHILD_SA request for rekeying from the NUT, TN1 responds
         with a CREATE_CHILD_SA response which includes a payload with invalid payload type
         to the NUT. The E payload's IKE Header Next Payload field is set to 32 and the invalid
         payload's critical flag is not set.
     24. Observe the messages transmitted on Link A.
     25. TN1 transmits an Echo Request with IPsec ESP using the second negotiated algorithms to
          NUT.
     26. Observe the messages transmitted on Link A.

=head1 Observable Result

  Part B
       Step 15: Judgment #1
       The NUT transmits an IKE_SA_INIT request including "ENCR_3DES",
       "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as proposed
       lgorithms.

       Step 17: Judgment #2
       The NUT transmits an IKE_AUTH request including "ENCR_3DES",
       "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" as proposed algorithms.

       Step 20 Judgment #3
       The NUT transmits an Echo Reply with IPsec ESP using corresponding algorithms.

       Step 24: Judgment #4
       The NUT transmits a CREATE_CHILD_SA request including "ENCR_3DES",
       "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" as proposed
       algorithms. And the CREATE_CHILD_SA request includes a Notify payload of type
       REKEY_SA containing rekeyed CHILD_SA's SPI value in the SPI field.

       Step 26: Judgment #5
       The NUT transmits an Echo Reply with IPsec ESP using the second negotiated algorithms.

=head1 Possible Problems

  * None.

=cut


