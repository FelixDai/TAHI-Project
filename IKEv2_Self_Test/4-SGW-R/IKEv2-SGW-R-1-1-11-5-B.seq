#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: IKEv2-SGW-R-1-1-11-5-B.seq,v 1.4 2010/03/05 07:28:46 doo Exp $
#
################################################################



BEGIN
{
	push(@INC, '..');
}

END { }



use IKEv2;
use strict;



my $remote	= 'common_remote_index';
my $ike_sa_init_req_param	= undef;
my $ike_sa_init_resp_param	= undef;
my $ike_auth_req_param	= undef;
my $ike_auth_resp_param	= undef;



my $session	= undef;
my $material	= undef;
my $child_sa_material	= undef;
my $str	= undef;
my $ret = undef;



#------------------------------#
# register IKEv2.pm            #
#------------------------------#
IKEv2log('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST SETUP</B></U></FONT>');



unless(IKEv2initialize('SGW', 'SGW')) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 module initializing failure</FONT>');
}



#------------------------------#
# configure TN                 #
#------------------------------#
unless(IKEv2setupTN()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">TN setup failure</FONT>');
}



#------------------------------#
# configure NUT                #
#------------------------------#
unless(IKEv2setupNUT()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT setup failure</FONT>');
}



#------------------------------#
# prepare session handler      #
#------------------------------#
IKEv2log('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST PROCEDURE</B></U></FONT>');



$session = IKEv2create_session($remote);
unless(defined($session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 session creation failure</FONT>');
}



#--------------------------------------#
# send IKE_SA_INIT request to NUT      #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

IKEv2log($str);



$ike_sa_init_req_param = devel_IKEv2send_IKE_SA_INIT_request($session, $remote);
unless(defined($ike_sa_init_req_param)) {
	IKEv2log(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT request.</FONT>');
}



#--------------------------------------#
# receive IKE_SA_INIT response by NUT  #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

IKEv2log($str);



$ike_sa_init_resp_param = devel_IKEv2receive_IKE_SA_INIT_response($session,
							$remote,
							$ike_sa_init_req_param);
unless(defined($ike_sa_init_resp_param)) {
	IKEv2log(kDump_Common_Error());
	IKEv2log('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT response.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# generate keying material             #
#--------------------------------------#
$material = devel_IKEv2gen_keymat(1, $ike_sa_init_req_param, $ike_sa_init_resp_param);
unless(defined($material)) {
	IKEv2log(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t generate keying material.</FONT>');
}



#--------------------------------------#
# send IKE_AUTH request to NUT         #
#--------------------------------------#
{
	$str  = '<PRE>';
	$str .= "    (R)             (I)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |<--------------| IKE_AUTH request (HDR, SK {IDi, AUTH, SAi2, TSi, TSr})\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';

	IKEv2log($str);

	my $common_gen_ike_auth_req = $gen_ike_auth_req->{'common_remote_index'};
	my @my_gen_ike_auth_req = @{$common_gen_ike_auth_req};
	# remove N(USE_TRANSPORT_MODE)
	@my_gen_ike_auth_req = grep {
		my $ret = 0;
		if ($_->{'self'} ne 'N') { $ret = 1; }
		if ($_->{'type'} ne 'USE_TRANSPORT_MODE') { $ret = 1; }
		$ret;
	} @my_gen_ike_auth_req;

	my $gen_index = 'SGW-R-1-1-1-3.1';
	$gen_ike_auth_req->{$gen_index} = \@my_gen_ike_auth_req;

	my $unrecognized_notify_type_payload = {
		# INVALID Payload
		'self'		=> 'N',		# *** MUST BE HERE ***
		'nexttype'	=> undef,	# Next Payload
		'critical'	=> '0',		# Critical
		'reserved'	=> undef,	# RESERVED
		'length'	=> undef,	# Payload Length
		'id'		=> undef,	# Protocol ID
		'spiSize'	=> undef,	# SPI Size
		'type'		=> 65535,	# Notify Message Type
		'spi'		=> undef,	# SPI
		'data'		=> undef,	# Notification Data
	};
	my $ike_auth_req = IKEv2load_packet($gen_ike_auth_req, $gen_index);
	my @local_ike_auth_req = @{$ike_auth_req};

	# add unrecognized Notify Type payload
	push(@local_ike_auth_req, $unrecognized_notify_type_payload);
	my $index = 'unrecognized_notify_type_payload';
	$gen_ike_auth_req->{$index} = \@local_ike_auth_req;

	$ike_auth_req_param = devel_IKEv2send_IKE_AUTH_request($session,
							       $index,
							       $ike_sa_init_req_param,
							       $ike_sa_init_resp_param,
							       $material);
	unless(defined($ike_auth_req_param)) {
		IKEv2log(kDump_Common_Error());
		IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_AUTH request.</FONT>');
	}
}



#--------------------------------------#
# prepare IKE_AUTH response            #
#--------------------------------------#
my $common_exp_ike_auth_resp = $exp_ike_auth_resp->{'common_remote_index'};
my @my_exp_ike_auth_resp = @{$common_exp_ike_auth_resp};
# remove N(USE_TRANSPORT_MODE)
foreach my $payload (@my_exp_ike_auth_resp) {
	if ($payload->{'self'} eq 'E') {
		my @payloads = grep {
				my $ret = 0;
				if ($_->{'self'} ne 'N') { $ret = 1; }
				if ($_->{'type'} ne 'USE_TRANSPORT_MODE') { $ret = 1; }
				$ret;
			} @{$payload->{'innerPayloads'}};

		$payload->{'innerPayloads'} = \@payloads;
	}
}
# set correct nexttype
for (my $i = 0; $i < scalar(@my_exp_ike_auth_resp); $i++) {
	my $payload = $my_exp_ike_auth_resp[$i];

	if ($payload->{'self'} eq 'E') {
		for (my $j = 0; $j < scalar(@{$payload->{'innerPayloads'}}); $j++) {
			my $cur = $payload->{'innerPayloads'}->[$j];
			my $next = $payload->{'innerPayloads'}->[$j+1];
			unless (defined($next)) {
				$cur->{'nexttype'} = '0';
				next;
			}
			if ($cur->{'nexttype'} eq $next->{'self'}) {
				next;
			}
			$cur->{'nexttype'} = $next->{'self'};
		}

		next;
	}

}

my $exp_index = 'SGW-R-1-1-1-3.2';
$exp_ike_auth_resp->{$exp_index} = \@my_exp_ike_auth_resp;



#--------------------------------------#
# receive IKE_AUTH response by NUT     #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_AUTH response (HDR, SK {IDr, AUTH, SAr2, TSi, TSr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

IKEv2log($str);



$ike_auth_resp_param = devel_IKEv2receive_IKE_AUTH_response($session,
							$exp_index,
							$ike_sa_init_req_param,
							$ike_sa_init_resp_param,
							$ike_auth_req_param,
							$material);
unless(defined($ike_auth_resp_param)) {
	IKEv2log(kDump_Common_Error());
	IKEv2log('<FONT COLOR="#ff0000">Can\'t observe IKE_AUTH response.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# set keying material                  #
#--------------------------------------#
{
	#--------------------------------------#
	# generate keying material (CHILD_SA)  #
	#--------------------------------------#
	my $keymat = IKEv2_v6eval_generate_IPsecSA(1,	# Initial Exchanges
						   $material,
						   $ike_sa_init_req_param,
						   $ike_sa_init_resp_param,
						   $ike_auth_req_param,
						   $ike_auth_resp_param);

	my $ret = IKEv2_v6eval_set_IPsecSA(1, $keymat, $ike_auth_req_param, $ike_auth_resp_param);
	unless($ret) {
		IKEv2log(kDump_Common_Error());
		IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t set keying material.</FONT>');
	}
}



#------------------------------#
# send Echo Request            #
#------------------------------#
{
	$str  = '<PRE>';
	$str .= "                    (I)             (R)\n";
	$str .= "    TH1             NUT             TN1             TH2\n";
	$str .= "     |               |               |               |\n";
	$str .= "     |<--------------+===============+---------------| IPsec {Echo Request}\n";
	$str .= "     |               |               |               |\n";
	$str .= "     V               V               V               V";
	$str .= '</PRE>';
	IKEv2log($str);

	my $slink = 'Link0';
	my $rlink = 'Link1';
	my $spkt = 'ipsec_ereq';
	my @rpkts = ('ereq');
	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	unless ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}
}



#------------------------------#
# send Echo Reply              #
#------------------------------#
{
	$str  = '<PRE>';
	$str .= "                    (I)             (R)\n";
	$str .= "    TH1             NUT             TN1             TH2\n";
	$str .= "     |               |               |               |\n";
	$str .= "     |---------------+===============+-------------->| IPsec {Echo Reply}\n";
	$str .= "     |               |               |               |\n";
	$str .= "     V               V               V               V";
	$str .= '</PRE>';
	IKEv2log($str);

	my $slink = 'Link1';
	my $rlink = 'Link0';
	my $spkt = 'erep';
	my @rpkts = ('ipsec_erep');
	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	unless ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}
}



#--------------------------------------#
# exit with cleanup                    #
#--------------------------------------#
IKEv2exitPass();
# NOTREACHED



#
# perldoc
#
########################################################################
__END__

=head1 Title

  Test IKEv2.SGW.R.1.1.11.5: Unrecognized Notify Message Type
  Part B: Unrecognized Notify Message Type of status 65535 (BASIC)

=head1 Purpose

  To verify an IKEv2 device ignores the unrecognized Notify Message Type in IKE messages.

=head1 References

  * [RFC 4306] - Sections 3.10.1

=head1 Test Setup

  * Network Topology
     Connect the devices according to the Common Topology.
  * Configuration
     In each part, configure the devices according to the Common Configuration.
  * Pre-Sequence and Cleanup Sequence
     IKEv2 on the NUT is disabled after each part.

=head1 Procedure

=begin html
<BLOCKQUOTE>
<PRE>

   TH1            NUT           TN1           TH2
 (HOST)          (SGW)         (SGW)         (Host)
    |              |             |             |
    |              |<------------|             | IKE_SA_INIT request (HDR, SAi1, KEi, Ni)
    |              |             |             | (Packet #1)
    |              |------------>|             | IKE_SA_INIT Response (HDR, SAr1, KEr, Nr)
    |              |             |             | (Judgement #1)
    |              |             |             |
    |              |<------------|             | IKE_AUTH request (HDR, SK {IDi, AUTH, SAi2, TSi, TSr, N})
    |              |             |             | (Packet #2)
    |              |------------>|             | IKE_AUTH Response (HDR, SK {IDr, AUTH, SAr2, TSi, TSr})
    |              |             |             | (Judgement #2)
    |              |             |             |
    |<-------------+=============+-------------| IPSec {Echo Request}
    |              |             |             | (Packet #3) (Judgement #3)
    |--------------+=============+------------>| IPSec {Echo Reply}
    |              |             |             | (Packet #4) (Judgement #4)
    |              |             |             |
    V              V             V             V<br>
 N: Notify Payload with unrecognized Notify Message Type
</PRE>
</BLOCKQUOTE>

<BLOCKQUOTE>  
<TABLE BORDER>
<TR>
<TD><TT>Packet #1</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
Packet #1: IKE_SA_INIT request
<TABLE BORDER>
<TR>
<TD>IPv6 Header</TD>
<TD colspan="2">All fields are same as Common Packet #1</TD>
</TR>
<TR>
<TD>UDP Header</TD>
<TD colspan="2">All fields are same as Common Packet #1</TD>
</TR>
<TR>
<TD>IKEv2 Header</TD>
<TD colspan="2">All fields are same as Common Packet #1</TD>
</TR>
<TR>
<TD>SA Payload</TD>
<TD colspan="2">All fields are same as Common Packet #1</TD>
</TR>
<TR>
<TD>KE Payload</TD>
<TD colspan="2">All fields are same as Common Packet #1</TD>
</TR>
<TR>
<TD rowspan="2">Ni, Nr paylaod</TD>
<TD>Next Payload</TD>
<TD>41 (Notify)</TD>
</TR>
<TR>
<TD colspan="2">Other fields are same as Common Packet #1</TD>
</TR>
<TR>
<TD rowspan="7">N Payload</TD>
<TD>Next Payload</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Critical</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Reserved</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Payload Length</TD>
<TD>8</TD>
</TR>
<TR>
<TD>Procotol ID</TD>
<TD>0</TD>
</TR>
<TR>
<TD>SPI Size</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Notify Message Type</TD>
<TD>See each part description.</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

  Part B: Unrecognized Notify Message Type of status 65535 (BASIC)
     9. TN1 starts to negotiate with NUT by sending IKE_SA_INIT request.
     10. Observe the messages transmitted on Link A..
     11. After reception of IKE_SA_INIT response from the NUT, TN1 transmits an IKE_AUTH
         request with unrecognized Notify type of status to the NUT.
     12. Observe the messages transmitted on Link A..
     13. TH2 transmits an Echo Request to TH1.
     14. Observe the messages transmitted on Link B.
     15. TH1 transmits an Echo Reply to TH2.
     16. Observe the messages transmitted on Link A..

=head1 Observable Results

  Part B
       Step 10: Judgment #1
       The NUT transmits an IKE_SA_INIT response including "ENCR_3DES",
       "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as accepted
       algorithms.

       Step 12: Judgment #2
       The NUT transmits an IKE_AUTH response including "ENCR_3DES",
       "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" as accepted algorithms.

       Step 14: Judgment #3
       The NUT forwards an Echo Request.

       Step 16: Judgment #4
       The NUT forwards an Echo Reply with IPsec ESP using ENCR_3DES an
       AUTH_HMAC_SHA1_96.

=head1 Possible Problems

  * None

=cut

