#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct-ikev2/4-SGW-R/IKEv2-SGW-R-1-1-4-4-D.seq,v 1.5 2010/03/05 02:21:07 doo Exp $
#
################################################################

BEGIN
{
	push(@INC, '..');
}

END { }

use IKEv2;
use strict;


my $remote	= 'common_remote_index';


my $session = undef;
my $ret = undef;
my $str = undef;

my $ike_sa_init_req_param = undef;
my $ike_sa_init_resp_param = undef;
my $ike_auth_req_param = undef;
my $ike_auth_resp_param = undef;
my $create_child_sa_req_param = undef;
my $create_child_sa_resp_param = undef;

my $material = undef;



kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST SETUP</B></U></FONT>');

my $tn = 'SGW';
my $nut = 'SGW';


#------------------------------#
# register IKEv2.pm            #
#------------------------------#
unless (IKEv2initialize($nut, $tn)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 module initializing failure</FONT>');
}


#------------------------------#
# configure TN                 #
#------------------------------#
unless (IKEv2setupTN()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">TN setup failure</FONT>');
}


#------------------------------#
# configure NUT                #
#------------------------------#
unless (IKEv2setupNUT()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT setup failure</FONT>');
}

kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST PROCEDURE</B></U></FONT>');
kLogHTML('<FONT COLOR="#000000" SIZE="+1"><U><B>Part A:Invalid payload type 1.</B></U></FONT>');


#------------------------------#
# prepare session handler      #
#------------------------------#
$session = IKEv2create_session('common_remote_index');
unless (defined($session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 session creation failure</FONT>');
}



#--------------------------------------#
# send IKE_SA_INIT request to NUT      #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_SA_INIT request (HDR, P, SAi1, KEi, Ni)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


$ike_sa_init_req_param = devel_IKEv2send_IKE_SA_INIT_request($session, $remote);
unless (defined($ike_sa_init_req_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT request.</FONT>');
}


#--------------------------------------#
# receive IKE_SA_INIT response by NUT  #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


$ike_sa_init_resp_param = devel_IKEv2receive_IKE_SA_INIT_response($session,
								  $remote,
								  $ike_sa_init_req_param);
unless (defined($ike_sa_init_resp_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT response.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# generate keying material             #
#--------------------------------------#
$material = devel_IKEv2gen_keymat(1, $ike_sa_init_req_param, $ike_sa_init_resp_param);
unless(defined($material)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t generate keying material.</FONT>');
}



#--------------------------------------#
# send IKE_AUTH request to NUT         #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_AUTH request (HDR, SK {IDi, AUTH, SAi2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_auth_req_param = devel_IKEv2send_IKE_AUTH_request($session,
						       $remote,
						       $ike_sa_init_req_param,
						       $ike_sa_init_resp_param,
						       $material);
unless(defined($ike_auth_req_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_AUTH request.</FONT>');
}



#--------------------------------------#
# receive IKE_AUTH response by NUT     #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_AUTH response (HDR, SK {IDr, AUTH, SAr2, TSi, TSr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_auth_resp_param = devel_IKEv2receive_IKE_AUTH_response($session,
							    $remote,
							    $ike_sa_init_req_param,
							    $ike_sa_init_resp_param,
							    $ike_auth_req_param,
							    $material);
unless(defined($ike_auth_resp_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_AUTH response.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# prepare CREATE_CHILD_SA request      #
#--------------------------------------#
my $invalid_payload = {
	# INVALID Payload
	'self'		=> 'UNDEFINED',	# *** MUST BE HERE ***
	'nexttype'	=> undef,	# Next Payload
	'critical'	=> '1',		# Critical
	'reserved'	=> undef,	# RESERVED
	'length'	=> undef,	# Payload Length
	'type'		=> '255',	# This value is set to previous payload's Next Payload
};

my $rekey_notify =
{	# Notify Payload
	'self'		=> 'N',		# *** MUST BE HERE ***
	'nexttype'	=> undef,	# Next Payload
	'critical'	=> undef,	# Critical
	'reserved'	=> undef,	# RESERVED
	'length'	=> undef,	# Payload Length
	'id'		=> '3',		# Protocol ID
	'spiSize'	=> '4',		# SPI Size
	'type'		=> 'REKEY_SA',	# Notify Message Type
	'spi'		=> $ike_auth_req_param->{'spi'}[0],	  # SPI
	'data'		=> undef,	# Notification Data
};

my $common_create_child_sa_req = $gen_create_child_sa_req->{'common_remote_index'};
my @local_create_child_sa_req = @{$common_create_child_sa_req};
for (my $i = 0; $i < scalar(@local_create_child_sa_req); $i++) {
	my $payload = $local_create_child_sa_req[$i];

	if (($payload->{'self'} eq 'E')) {
		splice(@local_create_child_sa_req, $i+1, 0, $invalid_payload);
		splice(@local_create_child_sa_req, $i+1, 0, $rekey_notify);
		last;
	}
}
my $index = 'unrecognized_payload_critical_set.1';
$gen_create_child_sa_req->{$index} = \@local_create_child_sa_req;



#--------------------------------------#
# send CREATE_CHILD_SA request to NUT  #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| CREATE_CHILD_SA request (HDR, SK {N(REKEY_SA), UNDEFINED_PAYLOAD, SA, Ni, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$create_child_sa_req_param = devel_IKEv2send_CREATE_CHILD_SA_request($session,
								     $index,
								     $ike_sa_init_req_param,
								     $ike_sa_init_resp_param,
								     $ike_auth_req_param,
								     $material);
unless(defined($create_child_sa_req_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send CREATE_CHILD_SA request.</FONT>');
}



#------------------------------------------#
# prepare CREATE_CHILD_SA response by NUT  #
#------------------------------------------#
my $tmp_notify_payload =
{	# Notify Payload
	'self'		=> 'N',
	'nexttype'	=> '0',		# Next Payload
	'critical'	=> '0',		# Critical
	'reserved'	=> '0',		# RESERVED
	'length'	=> '9',		# Payload Length
	'id'		=> '0',		# Protocol ID
	'spiSize'	=> '0',		# SPI Size
	'type'		=> 'UNSUPPORTED_CRITICAL_PAYLOAD',# Notify Type
	'spi'		=> undef,	# SPI
	'data'		=> 'ff',	# 255 = 0xff Notification Data
};
my $common_create_child_sa_resp = $exp_create_child_sa_resp->{'common_remote_index'};
my @local_create_child_sa_resp = @{$common_create_child_sa_resp};
# add Notify payload 
for (my $i = 0; $i < scalar(@local_create_child_sa_resp); $i++) {
	my $payload = $local_create_child_sa_resp[$i];

	if ($payload->{'self'} eq 'E') {
		$payload->{'innerPayloads'} = [ $tmp_notify_payload ];
		$payload->{'innerType'} = $tmp_notify_payload->{'self'};
		last;
	}
}
#set correct nexttype
for (my $i = 0; $i < scalar(@local_create_child_sa_resp); $i++) {
        my $payload = $local_create_child_sa_resp[$i];

        if ($payload->{'self'} eq 'HDR') {
                my $next = $local_create_child_sa_resp[$i+1]; 
                unless (defined($next)) {
                        $payload->{'nexttype'} = '0';
                        next;
                }
                if ($payload->{'nexttype'} eq $next->{'self'}) {
                        next;
                }
                $payload->{'nexttype'} = $next->{'self'};
        }
}

$index = 'unrecognized_payload_critical_set.2';
$exp_create_child_sa_resp->{$index} = \@local_create_child_sa_resp;



#------------------------------------------#
# receive CREATE_CHILD_SA response by NUT  #
#------------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| CREATE_CHILD_SA response (HDR, SK {N(UNSUPPORTED_CRITICAL_PAYLOAD)})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



my $create_child_sa_resp_param = devel_IKEv2receive_CREATE_CHILD_SA_response2($session,
									      $index,
									      $ike_sa_init_req_param,
									      $ike_sa_init_resp_param,
									      $create_child_sa_req_param,
									      $material);

unless (defined($create_child_sa_resp_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe incorrect CREATE_CHILD_SA response.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# exit with cleanup                    #
#--------------------------------------#
IKEv2exitPass();

#
# perldoc
#
########################################################################
__END__

=head1 Title

  Test IKEv2.SGW.R.1.1.4.4: Unrecognized payload types and critical bit is set
  Part D: Invalid payload type 255 and Critical bit is set (BASIC)

=head1 Purpose

  To verify an IKEv2 device ignores invalid payload types when the invalid type payload's
  critical bit is set.

=head1 References

  * [RFC 4306] - Sections 2.5

=head1 Test Setup

  * Network Topology
      Connect the devices according to the Common Topology.
  * Configuration
      In each part, configure the devices according to the Common Configuration.
  * Pre-Sequence and Cleanup Sequence
      IKEv2 on the NUT is disabled after each part.

=head1 Procedure

=begin html

<BLOCKQUOTE>
<PRE>
   NUT                  TN1
  (SGW)                (SGW)
    |                    |
    |<-------------------| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)
    |                    | (Packet #1)
    |------------------->| IKE_SA_INIT Response (HDR, SAr1, KEr, Nr)
    |                    | (Judgement #1)
    |                    |
    |<-------------------| IKE_AUTH request (HDR, SK {IDi, AUTH, N+, SAi2, TSi, TSr})
    |                    | (Packet #2)
    |------------------->| IKE_AUTH response (HDR, SK {IDr, AUTH, N+, SAr2, TSi, TSr})
    |                    | (Judgement #2)
    |                    |
    |<-------------------| CREATE_CHILD_SA request (HDR, SK {N, P, SA, Ni, TSi, TSr})
    |                    | (Packet #3)
    |------------------->| CREATE_CHILD_SA response (HDR, SK {N(UNSUPPORTED_CRITICAL_PAYLOAD)})
    |                    | (Judgement #3)
    |                    |
    V                    V

 P: Payload with an invalid payload type
 N: REKEY_SA
</PRE>
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD><TT>Packet #1</TT></TD>
<TD><TT>See Common Packet #1</TT></TD>
</TR>
<TR>
<TD><TT>Packet #2</TT></TD>
<TD><TT>See Common Packet #5</TT></TD>
</TR>
<TR>
<TD><TT>Packet #3</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
Packet #3: CREATE_CHILD_SA request
<TABLE BORDER>
<TR>
<TD>IPv6 Header</TD>
<TD colspan="2">All fields are same as Common Packet #15 Payload</TD>
</TR>
<TR>
<TD>UDP Header</TD>
<TD colspan="2">All fields are same as Common Packet #15 Payload</TD>
</TR>
<TR>
<TD>IKEv2 Header</TD>
<TD colspan="2">All fields are same as Common Packet #15 Payload</TD>
</TR>
<TR>
<TD rowspan="2">E Payload</TD>
<TD>Next Payload</TD>
<TD>Invalid payload type value</TD>
</TR>
<TR>
<TD colspan="2">Other fields are same as Common Packet #15</TD>
</TR>
<TR>
<TD rowspan="4">Invalid Payload</TD>
<TD>Next Payload</TD>
<TD>41(N)</TD>
</TR>
<TR>
<TD>Critical</TD>
<TD>1</TD>
</TR>
<TR>
<TD>Reserved</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Payload Length</TD>
<TD>4</TD>
</TR>
<TR>
<TD>N Payload</TD>
<TD colspan="2">All fields are same as Common Packet #15 Payload</TD>
</TR>
<TR>
<TD>SA Payload</TD>
<TD colspan="2">All fields are same as Common Packet #15 Payload</TD>
</TR>
<TR>
<TD>Ni, Nr paylaod</TD>
<TD colspan="2">All fields are same as Common Packet #15 Payload</TD>
</TR>
<TR>
<TD>TSi Payload</TD>
<TD colspan="2">All fields are same as Common Packet #15 Payload</TD>
</TR>
<TR>
<TD>TSr Payload</TD>
<TD colspan="2">All fields are same as Common Packet #15 Payload</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

  Part D: Invalid payload type 255 and Critical bit is set (BASIC)
     19. TN1 starts to negotiate with NUT by sending IKE_SA_INIT request.
     20. Observe the messages transmitted on Link A..
     21. After reception of IKE_SA_INIT response from the NUT, TN transmits an IKE_AUTH
         request to the NUT.
     22. Observe the messages transmitted on Link A..
     23. After reception of IKE_AUTH response from the NUT, TN1 transmits an
         CREATE_CHILD_SA request including a payload invalid payload type to the NUT. The
         CREATE_CHILD_SA request's IKE Header Next Payload field is set to 255 and the
         pointed pyaload's Critical bit is set.
     24. Observe the messages transmitted on Link A..

=head1 Observable Result

  Part D
       Step 20: Judgment #1
       The NUT transmits an IKE_SA_INIT response including "ENCR_3DES",
       "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as accepted
       algorithms.

       Step 22: Judgment #2
       The NUT transmits an IKE_AUTH response including "ENCR_3DES",
       "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" as accepted algorithms.

       Step 24: Judgment #3
       The NUT transmits a CREATE_CHILD_SA response with a Notify
       payload of type UNSUPPORTED_CRITICAL_PAYLOAD with the invalid
       payload type value (255).

=head1 Possible Problems

  * None.

=cut


