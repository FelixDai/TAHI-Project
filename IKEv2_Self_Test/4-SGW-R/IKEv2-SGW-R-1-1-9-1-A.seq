#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: IKEv2-SGW-R-1-1-9-1-A.seq,v 1.3 2008/11/28 10:16:29 doo Exp $
#
################################################################



BEGIN
{
	push(@INC, '..');
}

END { }



use IKEv2;
use strict;



my $remote	= 'common_remote_index';
my $ike_sa_init_req_param	= undef;
my $ike_sa_init_resp_param	= undef;
my $ike_auth_req_param	= undef;
my $ike_auth_resp_param	= undef;

my $session	= undef;
my $material	= undef;
my $str	= undef;
my $ret	= undef;

my @local_ike_auth_req = undef;


#--------------------------------------#
# prepare IKE_AUTH request             #
#--------------------------------------#
my $common_gen_ike_auth_req = $gen_ike_auth_req->{'common_remote_index'};
my @local_ike_auth_req = @{$common_gen_ike_auth_req};
# remove N(USE_TRANSPORT_MODE)
@local_ike_auth_req = grep {
                my $ret = 0;
                if ($_->{'self'} ne 'N') { $ret = 1; }
                if ($_->{'type'} ne 'USE_TRANSPORT_MODE') { $ret = 1; }
                $ret;
        } @local_ike_auth_req;
                                
$gen_ike_auth_req->{'SGW_R_IKE_AUTH_REQ'} = \@local_ike_auth_req;



#--------------------------------------#
# prepare IKE_AUTH response            #
#--------------------------------------#
my $common_exp_ike_auth_resp = $exp_ike_auth_resp->{'common_remote_index'};
my @local_ike_auth_resp = @{$common_exp_ike_auth_resp};
# remove N(USE_TRANSPORT_MODE)
foreach my $payload (@local_ike_auth_resp) {
        if ($payload->{'self'} eq 'E') {
                my @payloads = grep {
                                my $ret = 0;
                                if ($_->{'self'} ne 'N') { $ret = 1; }
                                if ($_->{'type'} ne 'USE_TRANSPORT_MODE') { $ret = 1; }
                                $ret;
                        } @{$payload->{'innerPayloads'}};

                $payload->{'innerPayloads'} = \@payloads;
        }
}
# set correct nexttype
for (my $i = 0; $i < scalar(@local_ike_auth_resp); $i++) {
        my $payload = $local_ike_auth_resp[$i];

        if ($payload->{'self'} eq 'E') {
                for (my $j = 0; $j < scalar(@{$payload->{'innerPayloads'}}); $j++) {
                        my $cur = $payload->{'innerPayloads'}->[$j];
                        my $next = $payload->{'innerPayloads'}->[$j+1];
                        unless (defined($next)) {
                                $cur->{'nexttype'} = '0';
                                next;
                        }
                        if ($cur->{'nexttype'} eq $next->{'self'}) {
                                next;
                        }
                        $cur->{'nexttype'} = $next->{'self'};
                }

                next;
        }

}
$exp_ike_auth_resp->{'SGW_R_IKE_AUTH_RESP'} = \@local_ike_auth_resp;



#------------------------------#
# register IKEv2.pm            #
#------------------------------#
kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST SETUP</B></U></FONT>');



unless(IKEv2initialize('SGW', 'SGW')) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 module initializing failure</FONT>');
}



#------------------------------#
# change configuration         #
#------------------------------#
my $conf = {
        'peers_id.ipaddr' => [
                '192.168.0.1'
        ],
};
unless (IKEv2customize($conf)) {
        IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 configuration failure</FONT>');
}


#------------------------------#
# configure TN                 #
#------------------------------#
unless(IKEv2setupTN()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">TN setup failure</FONT>');
}



#------------------------------#
# configure NUT                #
#------------------------------#
unless(IKEv2setupNUT()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT setup failure</FONT>');
}



#------------------------------#
# prepare session handler      #
#------------------------------#
kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST PROCEDURE</B></U></FONT>');



$session = IKEv2create_session($remote);
unless(defined($session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 session creation failure</FONT>');
}



#---------------------------------------#
# send IKE_SA_INIT request to NUT (1st) #
#---------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


$ike_sa_init_req_param = devel_IKEv2send_IKE_SA_INIT_request($session, $remote);
unless(defined($ike_sa_init_req_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT request.</FONT>');
}



#-------------------------------------------#
# receive IKE_SA_INIT response by NUT (1st) #
#-------------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n"; 
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


$ike_sa_init_resp_param = devel_IKEv2receive_IKE_SA_INIT_response($session,
							$remote,
							$ike_sa_init_req_param);
unless(defined($ike_sa_init_resp_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT response.</FONT>');
	IKEv2exitFail();
}



#-------------------------------#
# generate keying material      #
#-------------------------------#
$material = devel_IKEv2gen_keymat(1, $ike_sa_init_req_param, $ike_sa_init_resp_param);
unless(defined($material)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t generate keying material.</FONT>');
}



#-------------------------------#
# send IKE_AUTH request to NUT  #
#-------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n"; 
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_AUTH request (HDR, SK {IDi, AUTH, SAi2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


my $common_ike_auth_req = $gen_ike_auth_req->{'SGW_R_IKE_AUTH_REQ'};
@local_ike_auth_req = @{$common_ike_auth_req};
# change ID payload
for (my $i = 0; $i < scalar(@local_ike_auth_req); $i++) {
        if ($local_ike_auth_req[$i]->{'self'} eq 'IDi') {
                $local_ike_auth_req[$i]->{'type'} = 'IPV4_ADDR';
                $local_ike_auth_req[$i]->{'value'} = '192.168.0.1';
                last;
        }
}
$gen_ike_auth_req->{'SGW-R-1-1-10-1.1'} = \@local_ike_auth_req;

$ike_auth_req_param = devel_IKEv2send_IKE_AUTH_request($session, 
							'SGW-R-1-1-10-1.1', 
							$ike_sa_init_req_param, 
							$ike_sa_init_resp_param, $material);
unless(defined($ike_auth_req_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_AUTH request.</FONT>');
}



#----------------------------------------#
# receive IKE_AUTH response by NUT (1st) #
#----------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n"; 
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_AUTH response (HDR, SK {IDr, AUTH, SAr2, TSi, TSr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


$ike_auth_resp_param = devel_IKEv2receive_IKE_AUTH_response($session,
							'SGW_R_IKE_AUTH_RESP',
							$ike_sa_init_req_param,
							$ike_sa_init_resp_param,
							$ike_auth_req_param,
							$material);
unless(defined($ike_auth_resp_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_AUTH response.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# exit with cleanup                    #
#--------------------------------------#
IKEv2exitPass();
# NOTREACHED



#
# perldoc
#
########################################################################
__END__

=head1 Title

  Test IKEv2.SGW.R.1.1.9.1: Receiving IDi Type
  Part A: ID_IPV4_ADDR (BASIC)

=head1 Purpose

  To verify an IKEv2 device receives IDi payload properly.

=head1 References

  * [RFC 4306] - Sections 3.5

=head1 Test Setup

  * Network Topology
      Connect the devices according to the Common Topology.
  * Configuration
      In each part, configure the devices according to the following configuration.

=begin html

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD rowspan="2"><br></TD>
<TD colspan="2">IDi payload which NUT receives from TN1</TD>
</TR>
<TR>
<TD>ID Type</TD>
<TD>Identification Data</TD>
</TR>
<TR>
<TD>Part A</TD>
<TD>ID_IPV4_ADDR (1)</TD>
<TD>192.0.2.1</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

  * Pre-Sequence and Cleanup Sequence
      IKEv2 on the NUT is disabled after each part.

=head1 Procedure

=begin html

<BLOCKQUOTE>
<PRE>
   NUT                  TN1
  (SGW)                (SGW)
    |                    |
    |<-------------------| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)
    |                    | (Packet #1)
    |------------------->| IKE_SA_INIT Response (HDR, SAr1, KEr, Nr)
    |                    | (Judgement #1)
    |                    |
    |<-------------------| IKE_AUTH request (HDR, SK {IDi, AUTH, SAi2, TSi, TSr})
    |                    | (Packet #2)
    |------------------->| IKE_AUTH Response (HDR, SK {IDr, AUTH, SAr2, TSi, TSr})
    |                    | (Judgement #2)
    |                    |
    V                    V
</PRE>
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD><TT>Packet #1</TT></TD>
<TD><TT>See Common Packet #1</TT></TD>
</TR>
<TR>
<TD><TT>Packet #2</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>
<br>

<BLOCKQUOTE>
Packet #2: IKE_AUTH request
<TABLE BORDER>
<TR>
<TD>IPv6 Header</TD>
<TD colspan="2">Same as Common Packet #5</TD>
</TR>
<TR>
<TD>UDP Header</TD>
<TD colspan="2">Same as Common Packet #5</TD>
</TR>
<TR>
<TD>IKEv2 Header</TD>
<TD colspan="2">Same as Common Packet #5</TD>
</TR>
<TR>
<TD>E Payloa</TD>
<TD colspan="2">Same as Common Packet #5</TD>
</TR>
<TR>
<TD rowspan="4">IDi Payload</TD>
<TD colspan="2">Other fields are same as the Common Packet #5</TD>
</TR>
<TR>
<TD>Payload Length</TD>
<TD>According to above configuration</TD>
</TR>
<TR>
<TD>ID Type</TD>
<TD>According to above configuration</TD>
</TR>
<TR>
<TD>Identification Data</TD>
<TD>According to above configuration</TD>
</TR>
<TR>
<TD>AUTH Payload</TD>
<TD colspan="2">Same as Common Packet #5</TD>
</TR>
<TR>
<TD>SA Payload</TD>
<TD colspan="2">Same as Common Packet #5</TD>
</TR>
<TR>
<TD>TSi Payload</TD>
<TD colspan="2">Same as Common Packet #5</TD>
</TR>
<TR>
<TD>TSr Payload</TD>
<TD colspan="2">Same as Common Packet #5</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

  Part A: ID_IPV4_ADDR (BASIC)
     1. TN1 starts to negotiate with NUT by sending IKE_SA_INIT request.
     2. Observe the messages transmitted on Link A..
     3. After reception of IKE_SA_INIT response from the NUT, TN1 transmits an IKE_AUTH
        request including an IDi payload contains value specified as the above table to the NUT.
     4. Observe the messages transmitted on Link A..

=head1 Observable Result

  Part A
       Step 2: Judgment #1
       The NUT transmits an IKE_SA_INIT response including "ENCR_3DES",
       "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as accepted
       algorithms.

       Step 4: Judgment #2
       The NUT transmits an IKE_AUTH response including "ENCR_3DES",
       "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" as accepted algorithms.

=head1 Possible Problems

  * None.

=cut


