#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: IKEv2-SGW-R-1-1-6-8-A.seq,v 1.5 2009/09/08 09:51:57 doo Exp $
#
################################################################

BEGIN
{
	push(@INC, '..');
}

END { }

use IKEv2;
use strict;


my $remote	= 'common_remote_index';


my $session = undef;
my $ret = undef;
my $str = undef;

my $ike_sa_init_req_param = undef;
my $ike_sa_init_resp_param = undef;

my @local_ike_sa_init_req = undef;
my @local_ike_sa_init_resp = undef;

my $tn = 'SGW';
my $nut = 'SGW';


kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST SETUP</B></U></FONT>');

#------------------------------#
# register IKEv2.pm            #
#------------------------------#
unless(IKEv2initialize($tn, $nut)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 module initializing failure</FONT>');
}


#------------------------------#
# configure TN                 #
#------------------------------#
unless (IKEv2setupTN()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">TN setup failure</FONT>');
}


#------------------------------#
# configure NUT                #
#------------------------------#
unless (IKEv2setupNUT()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT setup failure</FONT>');
}

kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST PROCEDURE</B></U></FONT>');


#------------------------------#
# prepare session handler      #
#------------------------------#
$session = IKEv2create_session('common_remote_index');
unless (defined($session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 session creation failure</FONT>');
}



{
	#--------------------------------------#
	# send IKE_SA_INIT request to NUT      #
	#--------------------------------------#
	$str  = '<PRE>';
	$str .= "    (R)             (I)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |<--------------| IKE_SA_INIT request (HDR, SAi1(DH#2, DH#14), KEi(DH#14), Ni)\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';

	kLogHTML($str);


	#-------------------------------------#
	# prepare IKE_SA_INIT Request         #
	#-------------------------------------#
	my $transform_dh = {
		'nexttype'		=> undef,		# 0 (last) or 3 (more)
		'reserved1'		=> undef,		# RESERVED
		'transformLen'		=> undef,		# Transform Length
		'type'			=> 'D-H',		# Transform Type
		'reserved2'		=> undef,		# RESERVED
		'id'			=> '2048 MODP Group',	# Transform ID
		'attributes' => [				# Transform Attributes
		],
	};

	my $common_ike_sa_init_req = IKEv2load_packet($gen_ike_sa_init_req , $remote);
	@local_ike_sa_init_req = @{$common_ike_sa_init_req};
	# change DH group # and add DH Transform
	for (my $i = 0; $i < scalar(@local_ike_sa_init_req); $i++) {
		my $payload = $local_ike_sa_init_req[$i];

		if ($payload->{'self'} eq 'SA') {
			for (my $j = 0; $j < scalar(@{$payload->{'proposals'}}); $j++) {
				my $proposal = @{$payload->{'proposals'}}[$j];

				if (defined($proposal->{'transforms'})) {
					push(@{$proposal->{'transforms'}}, $transform_dh);
				}
			}
		}
		elsif ($payload->{'self'} eq 'KE') {
			$payload->{'group'} = '2048 MODP Group';
			last;
		}
	}
	my $index = 'sending_ike_sa_init_invalid_ke_payload.1';
	$gen_ike_sa_init_req->{$index} = \@local_ike_sa_init_req;

	$ike_sa_init_req_param = devel_IKEv2send_IKE_SA_INIT_request($session, $index);
	unless(defined($ike_sa_init_req_param)) {
		kLogHTML(kDump_Common_Error());
		IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT request.</FONT>');
	}
}



{
	#----------------------------------------------------------------------#
	# receive IKE_SA_INIT response (w/ Notify(INVALID_KE_PAYLOAD)) by NUT  #
	#----------------------------------------------------------------------#
	$str  = '<PRE>';
	$str .= "    (R)             (I)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |-------------->| IKE_SA_INIT response (HDR, N(INVALID_KE_PAYLOAD(DH#2)))\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';

	kLogHTML($str);

	#------------------------------------------------------#
	# prepare IKE_SA_INIT response (w/ INVALID_KE_PAYLOAD) #
	#------------------------------------------------------#
	my $common_ike_sa_init_resp = IKEv2load_packet($exp_ike_sa_init_resp, $remote);
	my @local_ike_sa_init_resp = @{$common_ike_sa_init_resp};
	my $notify_payload =
	{       # Notify Payload
		'self'		=> 'N',		# *** MUST BE HERE ***
		'nexttype'	=> '0',	# Next Payload
		'critical'	=> undef,	# Critical
		'reserved'	=> undef,	# RESERVED
		'length'	=> '10',		# Payload Length
		'id'		=> undef,	# Protocol ID
		'spiSize'	=> undef,	# SPI Size
		'type'		=> 'INVALID_KE_PAYLOAD',    # Notify Type
		'data'		=> '0002',	# Notification Data 
	};
	# remove payloads except HDR
	@local_ike_sa_init_resp = grep {
		my $ret = 0;
		if ($_->{'self'} eq 'HDR') { $ret = 1; $_->{'nexttype'} = 'N'; $_->{'respSPI_comparator'} = 'eq'; }
		$ret;
	} @local_ike_sa_init_resp;
	push(@local_ike_sa_init_resp, $notify_payload);
	my $index = 'sending_ike_sa_init_invalid_ke_payload.2';
	$exp_ike_sa_init_resp->{$index} = \@local_ike_sa_init_resp;

	$ike_sa_init_resp_param = devel_IKEv2receive_IKE_SA_INIT_response($session,
									  $index,
									  $ike_sa_init_req_param);
	unless (defined($ike_sa_init_resp_param)) {
		kLogHTML(kDump_Common_Error());
		kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT response.</FONT>');
		IKEv2exitFail();
	}
}



{
	#--------------------------------------#
	# prepare IKE_SA_INIT request          #
	#--------------------------------------#
	my $transform_dh = {
		'nexttype'		=> undef,		# 0 (last) or 3 (more)
		'reserved1'		=> undef,		# RESERVED
		'transformLen'		=> undef,		# Transform Length
		'type'			=> 'D-H',		# Transform Type
		'reserved2'		=> undef,		# RESERVED
		'id'			=> '2048 MODP Group',	# Transform ID
		'attributes' => [				# Transform Attributes
		],
	};

	my $common_ike_sa_init_req = IKEv2load_packet($gen_ike_sa_init_req , $remote);
	@local_ike_sa_init_req = @{$common_ike_sa_init_req};
	for (my $i = 0; $i < scalar(@local_ike_sa_init_req); $i++) {
		my $payload = $local_ike_sa_init_req[$i];

		if ($payload->{'self'} eq 'SA') {
			for (my $j = 0; $j < scalar(@{$payload->{'proposals'}}); $j++) {
				my $proposal = @{$payload->{'proposals'}}[$j];

				if (defined($proposal->{'transforms'})) {
					push(@{$proposal->{'transforms'}}, $transform_dh);
				}
			}
		}
		elsif ($payload->{'self'} eq 'KE') {
			$local_ike_sa_init_req[$i]->{'group'} = '1024 MODP Group';
			$local_ike_sa_init_req[$i]->{'publicKey'} = 'generate';
			last;
		}
	}
	my $index = 'sending_ike_sa_init_invalid_ke_payload.3';
	$gen_ike_sa_init_req->{$index} = \@local_ike_sa_init_req;



	#--------------------------------------#
	# send IKE_SA_INIT request to NUT      #
	#--------------------------------------#
	$str  = '<PRE>';
	$str .= "    (R)             (I)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |<--------------| IKE_SA_INIT request (HDR, SAi1(DH#2, DH#14), KEi(DH#2), Ni)\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';

	kLogHTML($str);


	$ike_sa_init_req_param = devel_IKEv2send_IKE_SA_INIT_request($session, $index);
	unless(defined($ike_sa_init_req_param)) {
		kLogHTML(kDump_Common_Error());
		IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT request.</FONT>');
	}
}



{
	#--------------------------------------#
	# receive IKE_SA_INIT response by NUT  #
	#--------------------------------------#
	$str  = '<PRE>';
	$str .= "    (R)             (I)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |-------------->| IKE_SA_INIT response (HDR, SAr1(DH#2), KEr(DH#2), Nr)\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';

	kLogHTML($str);


	$ike_sa_init_resp_param = devel_IKEv2receive_IKE_SA_INIT_response($session,
									  $remote,
									  $ike_sa_init_req_param);
	unless (defined($ike_sa_init_resp_param)) {
		kLogHTML(kDump_Common_Error());
		kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT response.</FONT>');
		IKEv2exitFail();
	}
}



#--------------------------------------#
# exit with cleanup                    #
#--------------------------------------#
IKEv2exitPass();

#
# perldoc
#
########################################################################
__END__

=head1 Title
    
  Test IKEv2.SGW.R.1.1.6.8: Sending INVALID_KE_PAYLOAD in Initial Exchange
  Part A: (BASIC)

=head1 Purpose

  To verify an IKEv2 device properly handles an invalid KE payload which has different D-H
  Group # from proposed D-H Group #.

=head1 References

  * [RFC 4306] - Sections 2.7, 3.4 and 3.10.1
  * [RFC 4718] - Sections 2.1 and 2.2

=head1 Test Setup
    
  * Network Topology
      Connect the devices according to the Common Topology.
  * Configuration
      In each part, configure the devices according to the Common Configuration.
  * Pre-Sequence and Cleanup Sequence
      IKEv2 on the NUT is disabled after each part.

=head1 Procedure

=begin html

<BLOCKQUOTE>
<PRE>

   NUT                  TN1
  (SGW)                (SGW)
    |                    |
    |<-------------------| IKE_SA_INIT request (HDR, SAi1(DH#2, DH#14), KEi(DH#14), Ni)
    |                    | (Packet #1)
    |------------------->| IKE_SA_INIT response (HDR, N(INVALID_KE_PAYLOAD(DH#2)))
    |                    | (Judgement #1)
    |                    |
    |<-------------------| IKE_SA_INIT request (HDR, SAi1(DH#2, DH#14), KEi(DH#14), Ni)
    |                    | (Packet #2)
    |------------------->| IKE_SA_INIT response (HDR, SAr1(DH#2), KEr(DH#2), Nr)
    |                    | (Judgement #2)
    |                    |
    V                    V
</PRE>
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD><TT>Packet #1</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
<TR>
<TD><TT>Packet #2</TT></TD>
<TD><TT>See Common Packet #1</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>
<br>

<BLOCKQUOTE>
Packet #1: IKE_SA_INIT request
<TABLE BORDER>
<TR>
<TD>IPv6 Header</TD>
<TD colspan="2">Same as the common packet #1</TD>
</TR>
<TR>
<TD>UDP Header</TD>
<TD colspan="2">Same as the common packet #1</TD>
</TR>
<TR>
<TD>IKEv2 Header</TD>
<TD colspan="2">Same as the common packet #1</TD>
</TR>
<TR>
<TD>SA Payload</TD>
<TD colspan="2">Same as the common packet #1</TD>
</TR>
<TR>
<TD rowspan="7">KEi Payload</TD>
<TD>Next Payload</TD>
<TD>40 (Ni, Nr)</TD>
</TR>
<TR>
<TD>Critical</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Reserved</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Payload Length</TD>
<TD>264</TD>
</TR>
<TR>
<TD>DH Group #</TD>
<TD>14</TD>
</TR>
<TR>
<TD>Reserved</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Key Exchange Data</TD>
<TD>any</TD>
</TR>
<TR>
<TD>Ni, Nr Payload</TD>
<TD colspan="2">Same as the common packet #1</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html 

  Part A: (BASIC)
     1. TN1 starts to negotiate with NUT by sending IKE_SA_INIT request including a SA payload
        which contains a D-H Group transform proposes using D-H Group 2 and D-H Group 14, and
        a Key Exchange payload which contains 14 (D-H Group 14) as DH Group # field and the
        Key Exchange Data.
     2. Observe the messages transmitted on Link A.
     3. TN1 transmits an IKE_SA_INIT request including KE payload with D-H Group 2 public
        key value to the NUT.
     4. Observe the messages transmitted on Link A.

=head1 Observable Result

  Part A
       Step 2: Judgment #1
       The NUT transmits an IKE_SA_INIT response including a Notify payload of type
       INVALID_KE_PAYLOAD which contains 2 (D-H Group 2) as Notification Data. The
       message's IKE_SA Responder's SPI value is set to zero.

       Step 4: Judgment #2
       The NUT transmits an IKE_SA_INIT response including "ENCR_3DES",
       "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as accepted
       algorithms.

=head1 Possible Problems

  * None.

=cut


