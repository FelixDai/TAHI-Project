#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: IKEv2-SGW-R-1-1-7-1-A.seq,v 1.5 2010/10/27 08:21:55 doo Exp $
#
################################################################



BEGIN
{
	push(@INC, '..');
}

END { }



use IKEv2;
use strict;



my $remote	= 'common_remote_index';
my $ike_sa_init_req_param	= undef;
my $ike_sa_init_resp_param	= undef;
my $ike_auth_req_param	= undef;
my $ike_auth_resp_param	= undef;
my $create_child_sa_req_param = undef;
my $create_child_sa_resp_param = undef;

my $session	= undef;
my $material	= undef;
my $child_sa_material_1	= undef;
my $str	= undef;
my $ret	= undef;

my @local_create_child_sa_req = undef;
my @local_create_child_sa_resp = undef;



#------------------------------#
# register IKEv2.pm            #
#------------------------------#
kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST SETUP</B></U></FONT>');



unless(IKEv2initialize('SGW', 'SGW')) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 module initializing failure</FONT>');
}



#------------------------------#
# change configuration         #
#------------------------------#
my $conf = {
	'selector.0.dst' => {
		'address'	=> $config_pl->{'ikev2_prefixY'} . '::/64',
	},
	'selector.1.src' => {
		'address'	=> $config_pl->{'ikev2_prefixY'} . '::/64',
	},
};
unless (IKEv2customize($conf)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 configuration failure</FONT>');
}



#------------------------------#
# configure TN                 #
#------------------------------#
unless(IKEv2setupTN()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">TN setup failure</FONT>');
}



#------------------------------#
# change configuration         #
#------------------------------#
my $conf = {
	'selector.0.dst' => {
		'address'	=> $config_pl->{'ikev2_prefixY'} . '::f',
	},
	'selector.1.src' => {
		'address'	=> $config_pl->{'ikev2_prefixY'} . '::f',
	},
};
unless (IKEv2customize($conf)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 configuration failure</FONT>');
}



#------------------------------#
# load ICMP                    #
#------------------------------#
loadICMP();



#------------------------------#
# configure NUT                #
#------------------------------#
unless(IKEv2setupNUT()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT setup failure</FONT>');
}



#------------------------------#
# prepare session handler      #
#------------------------------#
kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST PROCEDURE</B></U></FONT>');



$session = IKEv2create_session($remote);
unless(defined($session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 session creation failure</FONT>');
}



#--------------------------------------#
# send IKE_SA_INIT request to NUT      #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_sa_init_req_param = devel_IKEv2send_IKE_SA_INIT_request($session, $remote);
unless(defined($ike_sa_init_req_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT request.</FONT>');
}



#--------------------------------------#
# receive IKE_SA_INIT response by NUT  #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_sa_init_resp_param = devel_IKEv2receive_IKE_SA_INIT_response($session,
							$remote,
							$ike_sa_init_req_param);
unless(defined($ike_sa_init_resp_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT response.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# generate keying material             #
#--------------------------------------#
$material = devel_IKEv2gen_keymat(1, $ike_sa_init_req_param, $ike_sa_init_resp_param);
unless(defined($material)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t generate keying material.</FONT>');
}



#--------------------------------------#
# send IKE_AUTH request to NUT         #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_AUTH request (HDR, SK {IDi, AUTH, SAi2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_auth_req_param = devel_IKEv2send_IKE_AUTH_request($session,
						       $remote,
						       $ike_sa_init_req_param,
						       $ike_sa_init_resp_param,
						       $material);
unless(defined($ike_auth_req_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_AUTH request.</FONT>');
}



my $index = 'SGW-R-1-1-7-1-A.1';
{
	my $ike_auth_resp = IKEv2load_packet($exp_ike_auth_resp, $remote);
	my @msg = @{$ike_auth_resp};
	foreach my $payload0 (@msg) {
		if ($payload0->{'self'} eq 'E') {
			foreach my $payload1 (@{$payload0->{'innerPayloads'}}) {
				if ($payload1->{'self'} eq 'TSi') {
					foreach my $selector (@{$payload1->{'selectors'}}) {
						$selector->{'saddr'} = kIKE::kHelpers::ipaddr_tobin($config_pl->{'ikev2_prefixY'} . '::F');
						$selector->{'eaddr'} = kIKE::kHelpers::ipaddr_tobin($config_pl->{'ikev2_prefixY'} . '::F');
					}
				}
			}
		}
	}
	$exp_ike_auth_resp->{$index} = \@msg;
}



#--------------------------------------#
# receive IKE_AUTH response by NUT     #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_AUTH response (HDR, SK {IDr, AUTH, SAr2, TSi, TSr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_auth_resp_param = devel_IKEv2receive_IKE_AUTH_response($session,
							    $index,
							    $ike_sa_init_req_param,
							    $ike_sa_init_resp_param,
							    $ike_auth_req_param,
							    $material);
unless(defined($ike_auth_resp_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_AUTH response.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# set keying material                  #
#--------------------------------------#
my $keymat = undef;
{
	#--------------------------------------#
	# generate keying material (CHILD_SA)  #
	#--------------------------------------#
	$keymat = IKEv2_v6eval_generate_IPsecSA(1,	# Initial Exchanges
						$material,
						$ike_sa_init_req_param,
						$ike_sa_init_resp_param,
						$ike_auth_req_param,
						$ike_auth_resp_param);

	my $ret = IKEv2_v6eval_set_IPsecSA(1, $keymat, $ike_auth_req_param, $ike_auth_resp_param);
	unless($ret) {
		IKEv2log(kDump_Common_Error());
		IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t set keying material.</FONT>');
	}
}



#------------------------------#
# send Echo Request            #
#------------------------------#
{
	$str  = '<PRE>';
	$str .= "                    (I)             (R)\n";
	$str .= "    TH1             NUT             TN1             TH2\n";
	$str .= "     |               |               |               |\n";
	$str .= "     |<--------------+===============+---------------| IPsec {Echo Request}\n";
	$str .= "     |               |               |               |\n";
	$str .= "     V               V               V               V";
	$str .= '</PRE>';
	IKEv2log($str);

	my $slink = 'Link0';
	my $rlink = 'Link1';
	my $spkt = 'ipsec_ereq';
	my @rpkts = ('ereq');
	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	unless ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}
}



#------------------------------#
# send Echo Reply              #
#------------------------------#
{
	$str  = '<PRE>';
	$str .= "                    (I)             (R)\n";
	$str .= "    TH1             NUT             TN1             TH2\n";
	$str .= "     |               |               |               |\n";
	$str .= "     |---------------+===============+-------------->| IPsec {Echo Reply}\n";
	$str .= "     |               |               |               |\n";
	$str .= "     V               V               V               V";
	$str .= '</PRE>';
	IKEv2log($str);

	my $slink = 'Link1';
	my $rlink = 'Link0';
	my $spkt = 'erep';
	my @rpkts = ('ipsec_erep');
	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	unless ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}
}



#------------------------------#
# send Echo Request            #
#------------------------------#
{
	$str  = '<PRE>';
	$str .= "                    (I)             (R)\n";
	$str .= "    TH1             NUT             TN1             TH3\n";
	$str .= "     |               |               |               |\n";
	$str .= "     |      X--------+===============+---------------| IPsec {Echo Request}\n";
	$str .= "     |               |               |               |\n";
	$str .= "     V               V               V               V";
	$str .= '</PRE>';
	IKEv2log($str);

	my $slink = 'Link0';
	my $rlink = 'Link1';
	my $spkt = 'ipsec_ereq_th3';
	my @rpkts = ('ereq_th3');
	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	if ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}
}



#--------------------------------------#
# exit with cleanup                    #
#--------------------------------------#
IKEv2exitPass();
# NOTREACHED



#
# perldoc
#
########################################################################
__END__

=head1 Title

  Test IKEv2.SGW.R.1.1.7.1: Narrowing Traffic Selectors
  Part A: (BASIC)

=head1 Purpose

  To verify an IKEv2 device allows the responder to choose a subset of the traffic proposed by
  the initiator.

=head1 References

  * [RFC 4306] - Sections 2.8

=head1 Test Setup

  * Network Topology
     Connect the devices according to the Common Topology.
  * Configuration
     In each part, configure the devices according to the Common Configuration except
     Traffic Selector. Traffic Selector should be configured as following.

=begin html

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD rowspan="3"></TD>
<TD colspan="6">Traffic Selector</TD>
</TR>
<TR>
<TD colspan="3">Source</TD>
<TD colspan="3">Destination</TD>
</TR>
<TR>
<TD>Address<br>Range</TD>
<TD>Next Layer<br>Protocol</TD>
<TD>Port<br>Range</TD>
<TD>Address<br>Range</TD>
<TD>Next Layer<br>Protocol</TD>
<TD>Port<br>Range</TD>
</TR>
<TR>
<TD>Inbound</TD>
<TD>TH2</TD>
<TD>ANY</TD>
<TD>ANY</TD>
<TD>ANY</TD>
<TD>ANY</TD>
<TD>ANY</TD>
</TR>
<TR>
<TD>Outbound</TD>
<TD>ANY</TD>
<TD>ANY</TD>
<TD>ANY</TD>
<TD>TH2</TD>
<TD>ANY</TD>
<TD>ANY</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

     The other packets are allowed to BYPASS IPsec protection.

  * Pre-Sequence and Cleanup Sequence
     IKEv2 on the NUT is disabled after each part.

=head1 Procedure

=begin html

<BLOCKQUOTE>
<PRE>

   TH1            NUT           TN1           TH2           TH3
 (HOST)          (SGW)         (SGW)         (Host)        (Host)
    |              |             |             |             |
    |              |<------------|             |             | IKE_SA_INIT request (HDR, SAi1, KEi, Ni)
    |              |             |             |             | (Judgement #1)
    |              |------------>|             |             | IKE_SA_INIT Response (HDR, SAr1, KEr, Nr)
    |              |             |             |             | (Packet #1)
    |              |             |             |             |
    |              |<------------|             |             | IKE_AUTH request (HDR, SK {IDi, AUTH, SAi2, TSi, TSr})
    |              |             |             |             | (Judgement #2)
    |              |------------>|             |             | IKE_AUTH Response (HDR, SK {IDr, AUTH, SAr2, TSi, TSr})
    |              |             |             |             | (Packet #2)
    |              |             |             |             |
    |<-------------+=============+-------------|             | IPSec {Echo Request}
    |              |             |             |             | (Packet #3) (Judgement #3)
    |--------------+=============+------------>|             | IPSec {Echo Reply}
    |              |             |             |             | (Packet #4) (Judgement #4)
    |              |             |             |             |
    |       X------+=============+-------------+-------------| IPSec {Echo Request}
    |              |             |             |             | (Packet #5) (Judgement #5)
    |--------------+-------------+-------------+------------>| IPSec {Echo Reply}
    |              |             |             |             | (Packet #6) (Judgement #6)
    |              |             |             |             |
    V              V             V             V             V
</PRE>
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD><TT>Packet #1</TT></TD>
<TD><TT>See Common Packet #1</TT></TD>
</TR>
<TR>
<TD><TT>Packet #2</TT></TD>
<TD><TT>See Common Packet #5</TT></TD>
</TR>
<TR>
<TD><TT>Packet #3</TT></TD>
<TD><TT>See Common Packet #21</TT></TD>
</TR>
<TR>
<TD><TT>Packet #4</TT></TD>
<TD><TT>See Common Packet #25</TT></TD>
</TR>
<TR>
<TD><TT>Packet #5</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
<TR>
<TD><TT>Packet #6</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>
<br>

<BLOCKQUOTE>
Packet #5: ICMPv6 Echo Request
<TABLE BORDER>
<TR>
<TD>IPv6 Header</TD>
<TD colspan="2">Same as Common Packet #21</TD>
</TR>
<TR>
<TD>ESP</TD>
<TD colspan="2">Same as Common Packet #21</TD>
</TR>
<TR>
<TD rowspan="2">IPv6 Header</TD>
<TD>Source Address</TD>
<TD>TH3's Global Address</TD>
</TR>
<TR>
<TD>Destination Address</TD>
<TD>TH1's Global Address</TD>
</TR>
<TR>
<TD>ICMPv6 Header</TD>
<TD colspan="2">Same as Common Packet #21</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
Packet #6: ICMPv6 Echo Re
<TABLE BORDER>
<TR>
<TD rowspan="2">IPv6 Header</TD>
<TD>Source Address</TD>
<TD>TH1's Global Address</TD>
</TR>
<TR>
<TD>Destination Address</TD>
<TD>TH3's Global Address</TD>
</TR>
<TR>
<TD>ICMPv6 Header</TD>
<TD colspan="2">Same as Common Packet #25</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

  Part A (BASIC)
     1. TN1 sends an IKE_SA_INIT request.
     2. Observe the messages transmitted on Link A..
     3. TN1 sends an IKE_SA_INIT request to the NUT.
     4. Observe the messages transmitted on Link A..
     5. TH2 transmits an Echo Request packet to TH1.
     6. Observe the messages transmitted on Link B...
     7. TH1 transmits an Echo Reply packet to TH2.
     8. Observe the messages transmitted on Link A..
     9. TH3 transmits an Echo Request to TH1.
    10. Observe the messages transmitted on Link B...
    11. TH1 transmits an Echo Request to TH3.
    12. Observe the messages transmitted on Link A..

=head1 Observable Result

  Part A
       Step 2: Judgment #1
       The NUT transmits an IKE_SA_INIT response including "ENCR_3DES",
       "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as proposed
       algorithms.

       Step 4: Judgment #2
       The NUT transmits an IKE_AUTH response including "ENCR_3DES",
       "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" as proposed algorithms.
       The Traffic Selector is narrowed to allow only address range of TH2.

       Step 6: Judgment #3
       The NUT forwards an Echo Request.

       Step 8: Judgment #4
       The NUT forwards an Echo Request with IPsec ESP using corresponding algorithms.

       Step 10: Judgment #5
       The NUT never forwards an Echo Request.

       Step 12: Judgment #6
       The NUT forwards an Echo Request without IPsec ESP.

=head1 Possible Problems

  *  Because the destination address of Echo Request is the TN itself, TN may respond to
     Echo Request automatically. In that case, TH2 can send Echo Reply to TH1 instead of
     sending Echo Request.

=cut


