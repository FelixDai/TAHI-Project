//
// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
// Yokogawa Electric Corporation.
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $TAHI: ct-ikev2/packets/IPsec.def,v 1.1 2010/03/08 05:10:58 doo Exp $
//
////////////////////////////////////////////////////////////////////////

#ifndef __PACKET_IPSEC_DEF__
#define __PACKET_IPSEC_DEF__

#include "./CPP.def"



//
// IPsec { ICMPv6 Echo Request }
//

Hdr_ESP esp_outbound {
	SPI	= CPP_ESP_SPI_OUT;
	SequenceNumber	= CPP_ESP_SEQ_OUT;
	algorithm	= CPP_ALGO_OUT;
}



//
// IPsec { ICMPv6 Echo Reply }
//

Hdr_ESP esp_inbound {
	SPI	= CPP_ESP_SPI_IN;
	SequenceNumber	= CPP_ESP_SEQ_IN;
	algorithm	= CPP_ALGO_IN;
}



//
// algo (TripleDES in CBC mode + HMAC-SHA1-96)
//

ESPAlgorithm des3cbc_hmacsha1_out {
	crypt	= des3cbc_2(hexstr(CPP_DES3CBC_KEY_OUT, 24));
	auth	= hmacsha1_2(hexstr(CPP_HMACSHA1_KEY_OUT, 20));
}

ESPAlgorithm des3cbc_hmacsha1_in {
	crypt	= des3cbc_2(hexstr(CPP_DES3CBC_KEY_IN, 24));
	auth	= hmacsha1_2(hexstr(CPP_HMACSHA1_KEY_IN, 20));
}



//
// algo (NULL + HMAC-SHA1-96)
//

ESPAlgorithm null_crypt_hmacsha1_out {
	crypt	= null_crypt();
	auth	= hmacsha1_2(hexstr(CPP_HMACSHA1_KEY_OUT, 20));
}

ESPAlgorithm null_crypt_hmacsha1_in {
	crypt	= null_crypt();
	auth	= hmacsha1_2(hexstr(CPP_HMACSHA1_KEY_IN, 20));
}



//
// algo (AES with 128-bit keys in CBC mode + HMAC-SHA1-96)
//

ESPAlgorithm aescbc_hmacsha1_out {
	crypt	= rijndael_128_2(hexstr(CPP_AESCBC_KEY_OUT, 16));
	auth	= hmacsha1_2(hexstr(CPP_HMACSHA1_KEY_OUT, 20));
}

ESPAlgorithm aescbc_hmacsha1_in {
	crypt	= rijndael_128_2(hexstr(CPP_AESCBC_KEY_IN, 16));
	auth	= hmacsha1_2(hexstr(CPP_HMACSHA1_KEY_IN, 20));
}



//
// algo (AES-CTR + HMAC-SHA1-96)
//

ESPAlgorithm aesctr_hmacsha1_out {
	crypt	= aesctr_160_2(hexstr(CPP_AESCTR_KEY_OUT, 20));
	auth	= hmacsha1_2(hexstr(CPP_HMACSHA1_KEY_OUT, 20));
}

ESPAlgorithm aesctr_hmacsha1_in {
	crypt	= aesctr_160_2(hexstr(CPP_AESCTR_KEY_IN, 20));
	auth	= hmacsha1_2(hexstr(CPP_HMACSHA1_KEY_IN, 20));
}



//
// algo (TripleDES in CBC mode + NULL)
//

ESPAlgorithm des3cbc_null_auth_out {
	crypt	= des3cbc_2(hexstr(CPP_DES3CBC_KEY_OUT, 24));
	auth	= null_auth();
}

ESPAlgorithm des3cbc_null_auth_in {
	crypt	= des3cbc_2(hexstr(CPP_DES3CBC_KEY_IN, 24));
	auth	= null_auth();
}



//
// algo (TripleDES in CBC mode + AES-XCBC-MAC-96)
//

ESPAlgorithm des3cbc_aesxcbc_out {
	crypt	= des3cbc_2(hexstr(CPP_DES3CBC_KEY_OUT, 24));
	auth	= aesxcbc_2(hexstr(CPP_AESXCBC_KEY_OUT, 16));
}

ESPAlgorithm des3cbc_aesxcbc_in {
	crypt	= des3cbc_2(hexstr(CPP_DES3CBC_KEY_IN, 24));
	auth	= aesxcbc_2(hexstr(CPP_AESXCBC_KEY_IN, 16));
}



//
// algo (TripleDES in CBC mode + HMAC-SHA1-96 + ESN)
//

ESPAlgorithm des3cbc_hmacsha1_out_esn {
	crypt	= des3cbc_2(hexstr(CPP_DES3CBC_KEY_OUT, 24));
	auth	= hmacsha1_2(hexstr(CPP_HMACSHA1_KEY_OUT, 20), 0x0000);
}

ESPAlgorithm des3cbc_hmacsha1_in_esn {
	crypt	= des3cbc_2(hexstr(CPP_DES3CBC_KEY_IN, 24));
	auth	= hmacsha1_2(hexstr(CPP_HMACSHA1_KEY_IN, 20), 0x0000);
}



#endif	// __PACKET_IPSEC_DEF__
