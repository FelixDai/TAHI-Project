#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: IKEv2-EN-R-1-2-7-1-A.seq,v 1.6 2010/07/22 13:32:59 doo Exp $
#
################################################################



BEGIN
{
	push(@INC, '..');
}

END { }



use IKEv2;
use strict;



my $remote	= 'common_remote_index';
my $ike_sa_init_req_param	= undef;
my $ike_sa_init_resp_param	= undef;
my $ike_auth_req_param	= undef;
my $ike_auth_resp_param	= undef;
my $create_child_sa_req_param = undef;
my $create_child_sa_resp_param = undef;

my $session	= undef;
my $material	= undef;
my $child_sa_material_1	= undef;
my $child_sa_material_2	= undef;
my $str	= undef;
my $ret	= undef;



#------------------------------#
# register IKEv2.pm            #
#------------------------------#
kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST SETUP</B></U></FONT>');



unless(IKEv2initialize('EN', 'EN')) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 module initializing failure</FONT>');
}



#---------------------------------#
# switch Support or Not Support   #
#---------------------------------#
unless ($config_pl->{'advanced_support_creating_new_child_sa'}) {
	IKEv2exitNS('Not support ' . "'advanced_support_creating_new_child_sa'");
}



#------------------------------#
# configure TN                 #
#------------------------------#
unless(IKEv2setupTN()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">TN setup failure</FONT>');
}



#------------------------------#
# configure NUT                #
#------------------------------#
unless(IKEv2setupNUT()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT setup failure</FONT>');
}



#------------------------------#
# prepare session handler      #
#------------------------------#
kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST PROCEDURE</B></U></FONT>');



$session = IKEv2create_session($remote);
unless(defined($session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 session creation failure</FONT>');
}



#--------------------------------------#
# send IKE_SA_INIT request to NUT      #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_sa_init_req_param = devel_IKEv2send_IKE_SA_INIT_request($session, $remote);
unless(defined($ike_sa_init_req_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT request.</FONT>');
}



#--------------------------------------#
# receive IKE_SA_INIT response by NUT  #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_sa_init_resp_param = devel_IKEv2receive_IKE_SA_INIT_response($session,
							$remote,
							$ike_sa_init_req_param);
unless(defined($ike_sa_init_resp_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT response.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# generate keying material             #
#--------------------------------------#
$material = devel_IKEv2gen_keymat(1, $ike_sa_init_req_param, $ike_sa_init_resp_param);
unless(defined($material)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t generate keying material.</FONT>');
}



#--------------------------------------#
# preapre IKE_AUTH request to NUT      #
#--------------------------------------#
my $common_gen_ike_auth_req = $gen_ike_auth_req->{'common_remote_index'};
my @my_gen_ike_auth_req = @{$common_gen_ike_auth_req};
# remove N(USE_TRANSPORT_MODE)
foreach my $payload (@my_gen_ike_auth_req) {
	if ($payload->{'self'} eq 'TSi' || $payload->{'self'} eq 'TSr') {
		foreach my $s (@{$payload->{'selectors'}}) {
			$s->{'protocol'} = '6'; # TCP
		}
	}
}



#--------------------------------------#
# send IKE_AUTH request to NUT         #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_AUTH request (HDR, SK {IDi, AUTH, N(USE_TRANSPORT_MODE), SAi2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_auth_req_param = devel_IKEv2send_IKE_AUTH_request($session, $remote, $ike_sa_init_req_param, $ike_sa_init_resp_param, $material);
unless(defined($ike_auth_req_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_AUTH request.</FONT>');
}



#--------------------------------------#
# prepare receive IKE_AUTH response    #
#--------------------------------------#
my $common_exp_ike_auth_resp = $exp_ike_auth_resp->{'common_remote_index'};
my @my_exp_ike_auth_resp = @{$common_exp_ike_auth_resp};
# remove N(USE_TRANSPORT_MODE)
foreach my $payload (@my_exp_ike_auth_resp) {
	if ($payload->{'self'} eq 'E') {
		foreach my $p (@{$payload->{'innerPayloads'}}) {
			if ($p->{'self'} eq 'TSi' || $p->{'self'} eq 'TSr') {
				foreach my $s (@{$p->{'selectors'}}) {
					$s->{'protocol'} = '6'; # TCP
				}
			}
		}
	}
}



#--------------------------------------#
# receive IKE_AUTH response by NUT     #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_AUTH response (HDR, SK {IDr, AUTH, N(USE_TRANSPORT_MODE), SAr2, TSi, TSr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_auth_resp_param = devel_IKEv2receive_IKE_AUTH_response($session,
							$remote,
							$ike_sa_init_req_param,
							$ike_sa_init_resp_param,
							$ike_auth_req_param,
							$material);
unless(defined($ike_auth_resp_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_AUTH response.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# set keying material                  #
#--------------------------------------#
my $keymat = undef;
{
	#--------------------------------------#
	# generate keying material (CHILD_SA)  #
	#--------------------------------------#
	$keymat = IKEv2_v6eval_generate_IPsecSA(1,	# Initial Exchanges
						$material,
						$ike_sa_init_req_param,
						$ike_sa_init_resp_param,
						$ike_auth_req_param,
						$ike_auth_resp_param);

	my $ret = IKEv2_v6eval_set_IPsecSA(1, $keymat, $ike_auth_req_param, $ike_auth_resp_param);
	unless($ret) {
		IKEv2log(kDump_Common_Error());
		IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t set keying material.</FONT>');
	}
}



#--------------------------------------#
# send TCP SYN & receive TCP RST       #
#--------------------------------------#
my $esp_seq_out_1 = 1;
my $esp_seq_in_1 = undef;
{
	$str  = '<PRE>';
	$str .= "    (R)             (I)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |<--------------| IPsec (TCP SYN)\n";
	$str .= "     |               |\n";
	$str .= "     |-------------->| IPsec (TCP RST)\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';

	kLogHTML($str);

	my $slink = 'Link0';
	my $rlink = 'Link0';
	my $spkt = 'ipsec_tcp_syn';
	my @rpkts = ('ipsec_tcp_rst_ack');

	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	unless ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe TCP packet.</FONT>');
		IKEv2exitFail();
	}

	unless(($vrecv{'recvFrame'} eq 'ipsec_erep') &&
		   (defined($vrecv{'recvHexDump'}))) {
		# NOTREACHED
		IKEv2og('<FONT COLOR="#ff0000">should not be reached to here</FONT>');
		IKEv2exitFatal();
	}

	#------------------------------#
	# update IPsec SA              #
	#------------------------------#
	{
		my $esp_seq_in_1 = $vrecv{'Frame_Ether.Packet_IPv6.Hdr_ESP.SequenceNumber'};
	}
}



{
	$esp_seq_out_1++;
	$esp_seq_in_1++;
	my $cpp = '';
	$cpp .= '-DCPP_ECHO_ID=1 ';
	$cpp .= "-DCPP_ESP_SEQ_OUT=$esp_seq_out_1 ";
	$cpp .= "-DCPP_ESP_SEQ_IN=$esp_seq_in_1 ";

	my $conf = { 'cpp' => $cpp };
	my $ret = IKEv2_v6eval_set_IPsecSA(1, $keymat, $ike_auth_req_param, $ike_auth_resp_param, $conf);
}



#--------------------------------------#
# send Echo Request                    #
#--------------------------------------#
{
	$str  = '<PRE>';
	$str .= "    (I)             (R)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |<--------------| IPsec {Echo Request}\n";
	$str .= "     |               |\n";
	$str .= "     |-------X       | IPsec {Echo Reply}\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';
	IKEv2log($str);

	my $slink = 'Link0';
	my $rlink = 'Link0';
	my $spkt = 'ipsec_ereq';
	my @rpkts = ('ipsec_erep');

	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	if ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}
}



#--------------------------------------#
# prepare CREATE_CHILD_SA request      #
#--------------------------------------#
my $common_gen_create_child_sa_req = $gen_create_child_sa_req->{'common_remote_index'};
my @my_gen_create_child_sa_req = @{$common_gen_create_child_sa_req};
foreach my $payload (@my_gen_create_child_sa_req) {
	if ($payload->{'self'} eq 'TSi' || $payload->{'self'} eq 'TSr') {
		foreach my $s (@{$payload->{'selectors'}}) {
			$s->{'protocol'} = '58'; # ICMPv6
		}
	}
}



#--------------------------------------#
# send CREATE_CHILD_SA request to NUT  #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| CREATE_CHILD_SA request (HDR, SK {IDi, AUTH, N(USE_TRANSPORT_MODE), SAi2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$create_child_sa_req_param = devel_IKEv2send_CREATE_CHILD_SA_request($session,
								     $remote,
								     $ike_sa_init_req_param,
								     $ike_sa_init_resp_param,
								     $ike_auth_req_param,
								     $material);
unless(defined($create_child_sa_req_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send CREATE_CHILD_SA request.</FONT>');
}



#------------------------------------------#
# prepare receive CREATE_CHILD_SA response #
#------------------------------------------#
my $common_exp_create_child_sa_resp = $exp_create_child_sa_resp->{'common_remote_index'};
my @my_exp_create_child_sa_resp = @{$common_exp_create_child_sa_resp};
# remove N(USE_TRANSPORT_MODE)
foreach my $payload (@my_exp_create_child_sa_resp) {
	if ($payload->{'self'} eq 'E') {
		foreach my $p (@{$payload->{'innerPayloads'}}) {
			if ($p->{'self'} eq 'TSi' || $p->{'self'} eq 'TSr') {
				foreach my $s (@{$p->{'selectors'}}) {
					$s->{'protocol'} = '6'; # TCP
				}
			}
		}
	}
}



#-----------------------------------------#
# receive CREATE_CHILD_SA response by NUT #
#-----------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| CREATE_CHILD_SA response (HDR, SK {IDr, AUTH, N(USE_TRANSPORT_MODE), SAr2, TSi, TSr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$create_child_sa_resp_param = devel_IKEv2receive_CREATE_CHILD_SA_response($session,
							$remote,
							$ike_sa_init_req_param,
							$ike_sa_init_resp_param,
							$ike_auth_req_param,
							$material);
unless(defined($create_child_sa_resp_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe CREATE_CHILD_SA response.</FONT>');
	IKEv2exitFail();
}



{
	$esp_seq_out_1++;
	my $cpp = '';
	$cpp .= '-DCPP_ECHO_ID=1 ';
	$cpp .= "-DCPP_ESP_SEQ_OUT=$esp_seq_out_1 ";
	$cpp .= "-DCPP_ESP_SEQ_IN=$esp_seq_in_1 ";

	my $conf = { 'cpp' => $cpp };
	my $ret = IKEv2_v6eval_set_IPsecSA(1, $keymat, $ike_auth_req_param, $ike_auth_resp_param, $conf);
}


#--------------------------------------#
# send TCP SYN & receive TCP RST       #
#--------------------------------------#
{
	$str  = '<PRE>';
	$str .= "    (R)             (I)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |<--------------| IPsec (TCP SYN)\n";
	$str .= "     |               |\n";
	$str .= "     |-------------->| IPsec (TCP RST)\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';

	kLogHTML($str);

	my $slink = 'Link0';
	my $rlink = 'Link0';
	my $spkt = 'ipsec_tcp_syn';
	my @rpkts = ('ipsec_tcp_rst_ack');

	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	unless ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe TCP packet.</FONT>');
		IKEv2exitFail();
	}

	unless(($vrecv{'recvFrame'} eq 'ipsec_erep') &&
		   (defined($vrecv{'recvHexDump'}))) {
		# NOTREACHED
		IKEv2og('<FONT COLOR="#ff0000">should not be reached to here</FONT>');
		IKEv2exitFatal();
	}
}



{
	#------------------------------------------#
	# generate keying material (2nd CHILD_SA)  #
	#------------------------------------------#
	my $keymat = IKEv2_v6eval_generate_IPsecSA(0,    # CREATE_CHILD_SA exchange
						   $material,
						   $ike_sa_init_req_param,
						   $ike_sa_init_resp_param,
						   $ike_auth_req_param,
						   $ike_auth_resp_param,
						   $create_child_sa_req_param,
						   $create_child_sa_resp_param);

	my $ret = IKEv2_v6eval_set_IPsecSA(1,	# TN sends Request
					   $keymat,
					   $create_child_sa_req_param,
					   $create_child_sa_resp_param);
	unless($ret) {
		IKEv2log(kDump_Common_Error());
		IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t set keying material.</FONT>');
	}

	$str  = '<PRE>';
	$str .= "    (I)             (R)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |<--------------| IPsec {Echo Request}\n";
	$str .= "     |               |\n";
	$str .= "     |-------------->| IPsec {Echo Reply}\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';
	IKEv2log($str);

	my $slink = 'Link0';
	my $rlink = 'Link0';
	my $spkt = 'ipsec_ereq';
	my @rpkts = ('ipsec_erep');

	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	unless ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}
}



#--------------------------------------#
# exit with cleanup                    #
#--------------------------------------#
IKEv2exitPass();
# NOTREACHED



#
# perldoc
#
########################################################################
__END__

=head1 Title

  Test IKEv2.EN.R.1.2.7.1: Receipt of cryptographically valid message on the new SA
  Part A: (ADVANCED)

=head1 Purpose

  To verify an IKEv2 device properly handles CREATE_CHILD_SA to create a new
  CHILD_SA.

=head1 References

  * [RFC 4306] - Sections 2.8 and 2.18

=head1 Test Setup

  * Network Topology
      Connect the devices according to the Common Topology.
  * Configuration
      In each part, configure the devices according to the Common Configuration.
  * Pre-Sequence and Cleanup Sequence
      IKEv2 on the NUT is disabled after each part.

=head1 Procedure

=begin html

<BLOCKQUOTE>
<PRE>


   NUT                  TN1
(End-Node)           (End-Node)
    |                    |
    |<-------------------| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)
    |                    | (Packet #1)
    |------------------->| IKE_SA_INIT Response (HDR, SAr1, KEr, Nr)
    |                    | (Judgement #1)
    |                    |
    |<-------------------| IKE_AUTH request (HDR, SK {IDi, AUTH, N, SAi2, TSi, TSr})
    |                    | (Packet #2)
    |------------------->| IKE_AUTH Response (HDR, SK {IDr, AUTH, N, SAr2, TSi, TSr})
    |                    | (Judgement #2)
    |                    |
    |<-------------------| IPsec {TCP-SYN}
    |                    | (Packet #3)          
    |------------------->| IPsec {TCP-RST}    
    |                    | (Judgement #3)         
    |                    |
    |<-------------------| IPsec {Echo Request}
    |                    | (Packet #4)          
    |----------X         | IPsec {Echo Reply}    
    |                    | (Judgement #4)         
    |                    |   
    |<-------------------| CREATE_CHILD_SA request (HDR, SK {N, SA, Ni, TSi, TSr})
    |                    | (Packet #5)
    |------------------->| CREATE_CHILD_SA response (HDR, SK {N, SA, Nr, TSi, TSr})
    |                    | (Judgement #5)
    |                    |
    |<-------------------| IPsec {TCP-SYN}
    |                    | (Packet #6)          
    |------------------->| IPsec {TCP-RST}    
    |                    | (Judgement #6)         
    |                    |
    |<-------------------| IPsec {Echo Request}
    |                    | (Packet #7)          
    |------------------->| IPsec {Echo Reply}    
    |                    | (Judgement #7)         
    |                    |
    V                    V
<br>
 N: USE_TRANSPORT_MODE
    
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD><TT>Packet #1</TT></TD>
<TD><TT>See Common Packet #1</TT></TD>
</TR>
<TR>
<TD><TT>Packet #2</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
<TR>
<TD><TT>Packet #3</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
<TR>
<TD><TT>Packet #4</TT></TD>
<TD><TT>See Common Packet #19</TT></TD>
</TR>
<TR>
<TD><TT>Packet #5</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
<TR>
<TD><TT>Packet #6</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
<TR>
<TD><TT>Packet #7</TT></TD>
<TD><TT>See Common Packet #19</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
Packet #2: IKE_AUTH response<br>
<TABLE BORDER>
<TR>
<TD>IPv6 Header</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>UDP Header</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>IKEv2 Header</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>E Payload</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>IDi Payload</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>AUTH Payload</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>N Payload</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>SA Payload</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD rowspan="2">TSi Payload</TD>
<TD colspan="2">Other fields are same as the Common Packet #3</TD>
</TR>
<TR>
<TD>Traffic Selectors</TD>
<TD>See below</TD>
</TR>
<TR>
<TD rowspan="2">TSr Payload</TD>
<TD colspan="2">Other fields are same as the Common Packet #3</TD>
</TR>
<TR>
<TD>Traffic Selectors</TD>
<TD>See below</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD rowspan="7">TSi Payload</TD>
<TD rowspan="7">Traffic Selector</TD>
<TD>TS Type</TD>
<TD>8 (IPV6_ADDR_RANGE)</TD>
</TR>
<TR>
<TD>IP Protocol ID</TD>
<TD>6 (TCP)</TD>
</TR>
<TR>
<TD>Selector Length</TD>
<TD>40</TD>
</TR>
<TR>
<TD>Start Port</TD>
<TD>0</TD>
</TR>
<TR>
<TD>End Port</TD>
<TD>65535</TD>
</TR>
<TR>
<TD>Starting Address</TD>
<TD>TN1's Global Address on Link A</TD>
</TR>
<TR>
<TD>Ending Address</TD>
<TD>TN1's Global Address on Link A</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD rowspan="7">TSr Payload</TD>
<TD rowspan="7">Traffic Selector</TD>
<TD>TS Type</TD>
<TD>8 (IPV6_ADDR_RANGE)</TD>
</TR>
<TR>
<TD>IP Protocol ID</TD>
<TD>6 (TCP)</TD>
</TR>
<TR>
<TD>Selector Length</TD>
<TD>40</TD>
</TR>
<TR>
<TD>Start Port</TD>
<TD>0</TD>
</TR>
<TR>
<TD>End Port</TD>
<TD>65535</TD>
</TR>
<TR>
<TD>Starting Address</TD>
<TD>NUT's Global Address on Link X</TD>
</TR>
<TR>
<TD>Ending Address</TD>
<TD>NUt's Global Address on Link X</TD>
</TR>
</TABLE>
</BLOCKQUOTE>
<br>

<BLOCKQUOTE>
Packet #3: TCP SYN packet<br>
<TABLE BORDER>
<TR>
<TD rowspan="2">IPv6 Header</TD>
<TD>Source Address</TD>
<TD>TN1's Global Address on Link X</TD>
</TR>
<TR>
<TD>Destination Address</TD>
<TD>NUT's Global Address on Link A</TD>
</TR>
<TR>
<TD rowspan="7">ESP</TD>
<TD>Security Parameter Index</TD>
<TD>CHILD_SA's SPI value used by this message</TD>
</TR>
<TR>
<TD>Sequence Number</TD>
<TD>The value incremented the previous encrypted packet's Sequence Number by one.</TD>
</TR>
<TR>
<TD>Payload Data</TD>
<TD>Subsequent data encrypted by underlying encryption algorithm</TD>
</TR>
<TR>
<TD>Padding</TD>
<TD>Any value which to be a multiple of the encryption block size</TD>
</TR>
<TR>
<TD>Pad Length</TD>
<TD>The length of the Padding field</TD>
</TR>
<TR>
<TD>Next Header</TD>
<TD>6 (TCP)</TD>
</TR>
<TR>
<TD>Integrity Check Value</TD>
<TD>The checksum must be valid by calculation according to the manner described in RFC.</TD>
</TR>
<TR>
<TD rowspan="3">TCP Header</TD>
<TD>Source Port</TD>
<TD>30000</TD>
</TR>
<TR>
<TD>Destination Port</TD>
<TD>30000</TD>
</TR>
<TR>
<TD>Flags</TD>
<TD>SYN (0x02)</TD>
</TR>
</TABLE>
</BLOCKQUOTE>
<br>

<BLOCKQUOTE>
Packet #5: CREATE_CHILD_SA response
<TABLE BORDER>
<TR>
<TD>IPv6 Header</TD>
<TD colspan="2">Same as the Common Packet #7</TD>
</TR>
<TR>
<TD>UDP Header</TD>
<TD colspan="2">Same as the Common Packet #7</TD>
</TR>
<TR>
<TD>IKEv2 Header</TD>
<TD colspan="2">Same as the Common Packet #7</TD>
</TR>
<TR>
<TD>E Payload</TD>
<TD colspan="2">Same as the Common Packet #7</TD>
</TR>
<TR>
<TD>IDi Payload</TD>
<TD colspan="2">Same as the Common Packet #7</TD>
</TR>
<TR>
<TD>AUTH Payload</TD>
<TD colspan="2">Same as the Common Packet #7</TD>
</TR>
<TR>
<TD>N Payload</TD>
<TD colspan="2">Same as the Common Packet #7</TD>
</TR>
<TR>
<TD>SA Payload</TD>
<TD colspan="2">Same as the Common Packet #7</TD>
</TR>
<TR>
<TD rowspan="2">TSi Payload</TD>
<TD colspan="2">Other fields are same as the Common Packet #7</TD>
</TR>
<TR>
<TD>Traffic Selectors</TD>
<TD>See below</TD>
</TR>
<TR>
<TD rowspan="2">TSr Payload</TD>
<TD colspan="2">Other fields are same as the Common Packet #7</TD>
</TR>
<TR>
<TD>Traffic Selectors</TD>
<TD>See below</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD rowspan="7">TSi Payload</TD>
<TD rowspan="7">Traffic Selector</TD>
<TD>TS Type</TD>
<TD>8 (IPV6_ADDR_RANGE)</TD>
</TR>
<TR>
<TD>IP Protocol ID</TD>
<TD>58 (IPV6-ICMP)</TD>
</TR>
<TR>
<TD>Selector Length</TD>
<TD>40</TD>
</TR>
<TR>
<TD>Start Port</TD>
<TD>0</TD>
</TR>
<TR>
<TD>End Port</TD>
<TD>65535</TD>
</TR>
<TR>
<TD>Starting Address</TD>
<TD>TN1's Global Address on Link X</TD>
</TR>
<TR>
<TD>Ending Address</TD>
<TD>TN1's Global Address on Link X</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD rowspan="7">TSr Payload</TD>
<TD rowspan="7">Traffic Selector</TD>
<TD>TS Type</TD>
<TD>8 (IPV6_ADDR_RANGE)</TD>
</TR>
<TR>
<TD>IP Protocol ID</TD>
<TD>58 (IPV6-ICMP)</TD>
</TR>
<TR>
<TD>Selector Length</TD>
<TD>40</TD>
</TR>
<TR>
<TD>Start Port</TD>
<TD>0</TD>
</TR>
<TR>
<TD>End Port</TD>
<TD>65535</TD>
</TR>
<TR>
<TD>Starting Address</TD>
<TD>NUT's Global Address on Link A</TD>
</TR>
<TR>
<TD>Ending Address</TD>
<TD>NUT's Global Address on Link A</TD>
</TR>
</TABLE>
</BLOCKQUOTE>
<br>

<BLOCKQUOTE>
Packet #6: TCP SYN packet<br>
<TABLE BORDER>
<TR>
<TD rowspan="2">IPv6 Header</TD>
<TD>Source Address</TD>
<TD>TN1's Global Address on Link X</TD>
</TR>
<TR>
<TD>Destination Address</TD>
<TD>NUT's Global Address on Link A</TD>
</TR>
<TR>
<TD rowspan="7">ESP</TD>
<TD>Security Parameter Index</TD>
<TD>CHILD_SA's SPI value used by this message</TD>
</TR>
<TR>
<TD>Sequence Number</TD>
<TD>The value incremented the previous encrypted packet's Sequence Number by one.</TD>
</TR>
<TR>
<TD>Payload Data</TD>
<TD>Subsequent data encrypted by underlying encryption algorithm</TD>
</TR>
<TR>
<TD>Padding</TD>
<TD>Any value which to be a multiple of the encryption block size</TD>
</TR>
<TR>
<TD>Pad Length</TD>
<TD>The length of the Padding field</TD>
</TR>
<TR>
<TD>Next Header</TD>
<TD>6 (TCP)</TD>
</TR>
<TR>
<TD>Integrity Check Value</TD>
<TD>The checksum must be valid by calculation according to the manner described in RFC.</TD>
</TR>
<TR>
<TD rowspan="3">TCP Header</TD>
<TD>Source Port</TD>
<TD>30000</TD>
</TR>
<TR>
<TD>Destination Port</TD>
<TD>30000</TD>
</TR>
<TR>
<TD>Flags</TD>
<TD>SYN (0x02)</TD>
</TR>
</TABLE>
</BLOCKQUOTE>
<br>

=end html

  Part A: (ADVANCED)
     1. TN1 starts to negotiate with NUT by sending IKE_SA_INIT request.
     2. Observe the messages transmitted on Link A.
     3. After reception of IKE_SA_INIT response from the NUT, TN1 transmits an IKE_AUTH
         request to the NUT.
     4. Observe the messages transmitted on Link A.
     5. TN1 transmits a TCP-SYN packet with IPsec ESP using corresponding algorithms to closed
         port 30000 on NUT.
     6. Observe the messages transmitted on Link A.
     7. TN1 transmits an Echo Request with IPsec ESP using corresponding algorithms to NUT.
     8. Observe the messages transmitted on Link A.
     9. TN1 transmits a CREATE_CHILD_SA request to the NUT.
     10. Observe the messages transmitted on Link A.
     11. TN1 transmits a TCP-SYN packet with IPsec ESP using corresponding algorithms to closed
         port 30000 on NUT.
     12. Observe the messages transmitted on Link A.
     13. TN1 transmits an Echo Request with IPsec ESP using corresponding algorithms to NUT.
     14. Observe the messages transmitted on Link A.


=head1 Observable Result

  Part A
       Step 2: Judgment #1
       The NUT transmits an IKE_SA_INIT response including "ENCR_3DES",
       "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as accepted
       algorithms.

       Step 4: Judgment #2
       The NUT transmits an IKE_AUTH response including "ENCR_3DES",
       "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" as accepted algorithms.

       Step 6: Judgment #3
       The NUT transmits a TCP-RST packet with IPsec ESP using corresponding algorithms.

       Step 8: Judgment #4
       The NUT never transmits an Echo Reply with IPsec ESP using corresponding algorithms.

       Step 10: Judgment #5
       The NUT transmits a CREATE_CHILD_SA response including "ENCR_3DES",
       "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" as proposed algorithms.

       Step 12: Judgment #6
       The NUT transmits a TCP-RST packet with IPsec ESP using corresponding algorithms.

       Step 14: Judgment #7
       The NUT transmits an Echo Reply with IPsec ESP using corresponding algorithms.

=head1 Possible Problems

  * If the NUT uses TCP port 30000 for other applications, the TN1 transmits TCP-SYN
    packets to other closed TCP port on the NUT.

=cut


