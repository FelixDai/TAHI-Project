#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: IKEv2-EN-R-1-2-8-1-A.seq,v 1.4 2010/03/08 10:14:38 doo Exp $
#
################################################################



BEGIN
{
	push(@INC, '..');
}

END { }



use IKEv2;
use strict;



my $remote	= 'common_remote_index';
my $ike_sa_init_req_param	= undef;
my $ike_sa_init_resp_param	= undef;

my $session	= undef;
my $material	= undef;
my $str	= undef;

#------------------------------#
# register IKEv2.pm            #
#------------------------------#
kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST SETUP</B></U></FONT>');



unless(IKEv2initialize('EN', 'EN')) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 module initializing failure</FONT>');
}



#---------------------------------#
# switch Support or Not Support   #
#---------------------------------#
unless ($config_pl->{'advanced_support_authentication_failed'}) {
	IKEv2exitNS('Not support ' . "'advanced_support_authentication_failed'");
}



#------------------------------#
# configure TN                 #
#------------------------------#
unless(IKEv2setupTN()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">TN setup failure</FONT>');
}



#------------------------------#
# configure NUT                #
#------------------------------#
unless(IKEv2setupNUT()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT setup failure</FONT>');
}



#------------------------------#
# prepare session handler      #
#------------------------------#
kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST PROCEDURE</B></U></FONT>');



$session = IKEv2create_session($remote);
unless(defined($session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 session creation failure</FONT>');
}



#--------------------------------------#
# send IKE_SA_INIT request to NUT      #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_sa_init_req_param = devel_IKEv2send_IKE_SA_INIT_request($session, $remote);
unless(defined($ike_sa_init_req_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT request.</FONT>');
}



#--------------------------------------#
# receive IKE_SA_INIT response by NUT  #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_sa_init_resp_param = devel_IKEv2receive_IKE_SA_INIT_response($session,
							$remote,
							$ike_sa_init_req_param);
unless(defined($ike_sa_init_resp_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT response.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# generate keying material             #
#--------------------------------------#
$material = devel_IKEv2gen_keymat(1, $ike_sa_init_req_param, $ike_sa_init_resp_param);
unless(defined($material)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t generate keying material.</FONT>');
}



#--------------------------------------#
# send IKE_AUTH request to NUT         #
#--------------------------------------#
my $ike_auth_req_param	= undef;
{
	$str  = '<PRE>';
	$str .= "    (R)             (I)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |<--------------| IKE_AUTH request (HDR, SK {IDi, AUTH, N(USE_TRANSPORT_MODE), SAi2, TSi, TSr})\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';

	kLogHTML($str);

	my $ike_auth_req = IKEv2load_packet($gen_ike_auth_req, 'common_remote_index');
	my $index = 'EN-R-1-2-8-1.1';
	$gen_ike_auth_req->{$index} = $ike_auth_req;
	$ike_auth_req = IKEv2fill_IKE_AUTH_request($session,
						   $index,
						   $ike_sa_init_req_param,
						   $ike_sa_init_resp_param,
						   $material);
	foreach my $payload (@{$ike_auth_req}) {
		if ($payload->{'self'} eq 'AUTH') {
			my $auth_data = unpack('H*', $payload->{'data'});
			my $d = substr($auth_data, length($auth_data) -1);
			$d = ($d eq 0) ? 1 : 0;
			$auth_data = substr($auth_data, 0, length($auth_data) - 1) . $d;
			$payload->{'data'} = pack('H*', $auth_data);
			last;
		}
	}

	my $data = IKEv2build($ike_auth_req, $material, 1); # 1: initiator
	unless (defined($data)) {
		IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t build IKEv2 packet.</FONT>');
	}

	$ike_auth_req_param = IKEv2send($session, $data, $material);
	unless(defined($ike_auth_req_param)) {
		kLogHTML(kDump_Common_Error());
		IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_AUTH request.</FONT>');
	}
}



#-------------------------------#
# receive IKE_AUTH Response     #
#-------------------------------#
{
	$str  = '<PRE>';
	$str .= "    (R)             (I)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |-------------->| IKE_AUTH response (HDR, N(AUTHENTICATION_FAILED))\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';

	kLogHTML($str);

	my $notify_auth_failed = {	# Notify Payload
		'self'		=> 'N',		# *** MUST BE HERE ***
		'nexttype'	=> '0',		# Next Payload
		'critical'	=> '0',		# Critical
		'reserved'	=> '0',		# RESERVED
		'length'	=> '8',		# Payload Length
		'id'		=> '0',		# Protocol ID
		'spiSize'	=> '0',		# SPI Size
		'type'		=> 'AUTHENTICATION_FAILED',	# Notify Type
	};
	my $common_ike_auth_resp = IKEv2load_packet($exp_ike_auth_resp, $remote);
	my @local_ike_auth_resp = @{$common_ike_auth_resp};
	splice(@local_ike_auth_resp, 1);
	$local_ike_auth_resp[0]->{'nexttype'} = 'N';
	push(@local_ike_auth_resp, $notify_auth_failed);
	my $index = 'EN-R-1-2-8-1.2';
	$exp_ike_auth_resp->{$index} = \@local_ike_auth_resp;

	my $ike_auth_resp_param	= undef;
	$ike_auth_resp_param = devel_IKEv2receive_IKE_AUTH_response($session,
								    $index,
								    $ike_sa_init_req_param,
								    $ike_sa_init_resp_param,
								    $ike_auth_req_param,
								    $material);
	unless(defined($ike_auth_resp_param)) {
		kLogHTML(kDump_Common_Error());
		kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_AUTH response.</FONT>');
		IKEv2exitFail();
	}
}



#--------------------------------------#
# exit with cleanup                    #
#--------------------------------------#
IKEv2exitPass();
# NOTREACHED



#
# perldoc
#
########################################################################
__END__

=head1 Title

  Test IKEv2.EN.R.1.2.8.1: AUTHENTICATION_FAILED
  Part A Invalid Authentication Data (ADVANCED)

=head1 Purpose

  To verify an IKEv2 device properly handles AUTHENTICATION_FAILED message.

=head1 References

  * [RFC 4306] - Sections 3.10.1

=head1 Test Setup

  * Network Topology
      Connect the devices according to the Common Topology.
  * Configuration
      In each part, configure the devices according to the Common Configuration.
  * Pre-Sequence and Cleanup Sequence
      IKEv2 on the NUT is disabled after each part.

=head1 Procedure

=begin html

<BLOCKQUOTE>
<PRE>


   NUT                  TN1
(End-Node)           (End-Node)
    |                    |
    |<-------------------| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)
    |                    | (Packet #1)
    |------------------->| IKE_SA_INIT Response (HDR, SAr1, KEr, Nr)
    |                    | (Judgement #1)
    |                    |
    |<-------------------| IKE_AUTH request (HDR, SK {IDi, AUTH, N, SAi2, TSi, TSr})
    |                    | (Packet #2)
    |---------X          | IKE_AUTH Response (HDR, SK {IDr, AUTH, N, SAr2, TSi, TSr})
    |                    |   or
    |------------------->| IKE_AUTH Response (HDR, N(AUTHENTICATION_FAILED))
    |                    | (Judgement #2)
    |                    |
    V                    V
<br>
 N: USE_TRANSPORT_MODE
    
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD><TT>Packet #1</TT></TD>
<TD><TT>See Common Packet #1</TT></TD>
</TR>
<TR>
<TD><TT>Packet #2</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>

<BLOCKQUOTE>
Packet #2 (Part A): IKE_AUTH request
<TABLE BORDER>
<TR>
<TD>IPv6 Header</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>UDP Header</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>IKEv2 Header</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>E Payload</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>IDi Payload</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD rowspan="4">AUTH Payload</TD>
<TD colspan="2">Other fields are same as the Common Packet #3</TD>
</TR>
<TR>
<TD>Payload Length</TD>
<TD>8</TD>
</TR>
<TR>
<TD>Auth Method</TD>
<TD>2 (SK_MIC)</TD>
</TR>
<TR>
<TD>Authentication Data</TD>
<TD>empty</TD>
</TR>
<TR>
<TD>N Payload</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>SA Payload</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>TSi Payload</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>TSr Payload</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

  Part A Invalid Authentication Data (ADVANCED)
     1. TN1 starts to negotiate with NUT by sending IKE_SA_INIT request.
     2. Observe the messages transmitted on Link A.
     3. After reception of IKE_SA_INIT response from the NUT, TN1 transmits an IKE_AUTH
         request which has an invalid Authentication Data in AUTH payload to the NUT.
     4. Observe the messages transmitted on Link A.

=head1 Observable Result

  Part A
       Step 2: Judgment #1
       The NUT transmits an IKE_SA_INIT response including "ENCR_3DES",
       "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as accepted
       algorithms.

       Step 4: Judgment #2
       The NUT does not transmit an IKE_AUTH response or transmits an IKE_AUTH response
       with Notify payload of type AUTHENTICATION_FAILED without encryption to the TN1.

=head1 Possible Problems

  * None.

=cut


