#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: IKEv2-EN-R-1-1-3-3-A.seq,v 1.3 2008/11/28 10:16:21 doo Exp $
#
################################################################



BEGIN
{
	push(@INC, '..');
}

END { }



use IKEv2;
use strict;



my $remote	= 'common_remote_index';
my $ike_sa_init_req_param	= undef;
my $ike_sa_init_resp_param	= undef;
my $ike_auth_req_param_1	= undef;
my $ike_auth_resp_param_1	= undef;
my $ike_auth_req_param_2	= undef;
my $ike_auth_resp_param_2	= undef;

my $session	= undef;
my $material	= undef;
my $child_sa_material_1st	= undef;
my $child_sa_material_2nd	= undef;
my $str	= undef;
my $ret	= undef;

my @local_ike_auth_req = undef;


#------------------------------#
# register IKEv2.pm            #
#------------------------------#
kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST SETUP</B></U></FONT>');



unless(IKEv2initialize('EN', 'EN')) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 module initializing failure</FONT>');
}



#---------------------------------#
# switch Support or Not Support   #
#---------------------------------#
unless ($config_pl->{'advanced_support_initial_contact'}) {
	IKEv2exitNS('Not support ' . "'advanced_support_initial_contact'");
}



#------------------------------#
# configure TN                 #
#------------------------------#
unless(IKEv2setupTN()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">TN setup failure</FONT>');
}



#------------------------------#
# configure NUT                #
#------------------------------#
unless(IKEv2setupNUT()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT setup failure</FONT>');
}



#------------------------------#
# prepare session handler      #
#------------------------------#
kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST PROCEDURE</B></U></FONT>');



$session = IKEv2create_session($remote);
unless(defined($session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 session creation failure</FONT>');
}



#---------------------------------------#
# send IKE_SA_INIT request to NUT (1st) #
#---------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


$ike_sa_init_req_param = devel_IKEv2send_IKE_SA_INIT_request($session, $remote);
unless(defined($ike_sa_init_req_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT request.</FONT>');
}



#-------------------------------------------#
# receive IKE_SA_INIT response by NUT (1st) #
#-------------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n"; 
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


$ike_sa_init_resp_param = devel_IKEv2receive_IKE_SA_INIT_response($session,
							$remote,
							$ike_sa_init_req_param);
unless(defined($ike_sa_init_resp_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT response.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# generate keying material (1st)       #
#--------------------------------------#
$material = devel_IKEv2gen_keymat(1, $ike_sa_init_req_param, $ike_sa_init_resp_param);
unless(defined($material)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t generate keying material.</FONT>');
}



#--------------------------------------#
# send IKE_AUTH request to NUT (1st)   #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n"; 
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_AUTH request (HDR, SK {IDi, AUTH, N(USE_TRANSPORT_MODE), SAi2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


$ike_auth_req_param_1 = devel_IKEv2send_IKE_AUTH_request($session, $remote, $ike_sa_init_req_param, $ike_sa_init_resp_param, $material);
unless(defined($ike_auth_req_param_1)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_AUTH request.</FONT>');
}



#----------------------------------------#
# receive IKE_AUTH response by NUT (1st) #
#----------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n"; 
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_AUTH response (HDR, SK {IDr, AUTH, N(USE_TRANSPORT_MODE), SAr2, TSi, TSr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


$ike_auth_resp_param_1 = devel_IKEv2receive_IKE_AUTH_response($session,
							$remote,
							$ike_sa_init_req_param,
							$ike_sa_init_resp_param,
							$ike_auth_req_param_1,
							$material);
unless(defined($ike_auth_resp_param_1)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_AUTH response.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# generate keying material (CHILD_SA)  #
#--------------------------------------#
$child_sa_material_1st = devel_IKEv2gen_child_sa_keymat(1,    # IKE_AUTH exchange
							$material,
							$ike_sa_init_req_param,
							$ike_sa_init_resp_param,
							$ike_auth_req_param_1,
							$ike_auth_resp_param_1);



#--------------------------------------#
# set Upper Protocol for TN's SPD      #
#--------------------------------------#
IKEv2set_SPD('upperspec', 'icmp6');



#--------------------------------------#
# set keying material                  #
#--------------------------------------#
$ret = IKEv2set_child_sa_keymat(1, $child_sa_material_1st, $ike_auth_req_param_1, $ike_auth_resp_param_1,);
unless($ret) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t set keying material.</FONT>');
}



#--------------------------------------#
# prepare ICMP session handler         #
#--------------------------------------#
my $icmp_session = ICMPcreate_session('TN1sendtoNUT');
unless(defined($icmp_session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">ICMP session creation failure</FONT>');
}



#--------------------------------------#
# send Echo Request (1st CHILD_SA)     #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n"; 
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IPsec {Echo Request}\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);

$ret = ICMPsend($icmp_session, 'echo_request');
unless(defined($ret)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send ICMP packet.</FONT>');
}



#--------------------------------------#
# receive Echo Reply (1st CHILD_SA)    #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n"; 
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IPsec {Echo Reply}\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);

$ret = ICMPreceive($icmp_session);
unless(defined($ret)) {
	my $strerror = kDump_Common_Error();
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
	IKEv2exitFail();
}



#---------------------------------------#
# send IKE_SA_INIT request to NUT (2nd) #
#---------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


$ike_sa_init_req_param = devel_IKEv2send_IKE_SA_INIT_request($session, $remote);
unless(defined($ike_sa_init_req_param)) {
        kLogHTML(kDump_Common_Error());
        IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT request.</FONT>');
}



#-------------------------------------------#
# receive IKE_SA_INIT response by NUT (2nd) #
#-------------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n"; 
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


$ike_sa_init_resp_param = devel_IKEv2receive_IKE_SA_INIT_response($session,
                                                        $remote,
                                                        $ike_sa_init_req_param);
unless(defined($ike_sa_init_resp_param)) {
        kLogHTML(kDump_Common_Error());
        kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT response.</FONT>');
        IKEv2exitFail();
}



#--------------------------------------#
# generate keying material (2nd)       #
#--------------------------------------#
$material = devel_IKEv2gen_keymat(1, $ike_sa_init_req_param, $ike_sa_init_resp_param);
unless(defined($material)) {
        kLogHTML(kDump_Common_Error());
        IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t generate keying material.</FONT>');
}



#--------------------------------------#
# send IKE_AUTH request to NUT (2nd)   #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n"; 
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_AUTH request (HDR, SK {IDi, N(INITIAL_CONTACT), AUTH, N(USE_TRANSPORT_MODE), SAi2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


my $notify_initial_contact =
{       # Notify Payload
        'self'          => 'N',      # *** MUST BE HERE ***
        'nexttype'      => undef,    # Next Payload
        'critical'      => undef,    # Critical
        'reserved'      => undef,    # RESERVED
        'length'        => undef,    # Payload Length
        'id'            => undef,    # Protocol ID
        'spiSize'       => undef,    # SPI Size
        'type'          => 'INITIAL_CONTACT',        # Notify Message Type
        'spi'           => undef,    # SPI
        'data'          => undef     # Notification Data
};
my $common_ike_auth_req = $gen_ike_auth_req->{'common_remote_index'};
@local_ike_auth_req = @{$common_ike_auth_req};
# add Notify payload
for (my $i = 0; $i < scalar(@local_ike_auth_req); $i++) {
        if ($local_ike_auth_req[$i]->{'self'} eq 'AUTH') {    # push before AUTH payload
                splice(@local_ike_auth_req, $i, 0, $notify_initial_contact);
                last;
        }
}
$gen_ike_auth_req->{'EN-R-1-1-4-3.1'} = \@local_ike_auth_req;

$ike_auth_req_param_2 = devel_IKEv2send_IKE_AUTH_request($session,
                                                         'EN-R-1-1-4-3.1',
                                                         $ike_sa_init_req_param,
                                                         $ike_sa_init_resp_param,
                                                         $material);
unless(defined($ike_auth_req_param_2)) {
        kLogHTML(kDump_Common_Error());
        IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_AUTH request.</FONT>');
}



#----------------------------------------#
# receive IKE_AUTH response by NUT (2nd) #
#----------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n"; 
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_AUTH response (HDR, SK {IDr, AUTH, N(USE_TRANSPORT_MODE), SAr2, TSi, TSr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


$ike_auth_resp_param_2 = devel_IKEv2receive_IKE_AUTH_response($session,
                                                        $remote,
                                                        $ike_sa_init_req_param,
                                                        $ike_sa_init_resp_param,
                                                        $ike_auth_req_param_2,
                                                        $material);
unless(defined($ike_auth_resp_param_2)) {
        kLogHTML(kDump_Common_Error());
        kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_AUTH response.</FONT>');
        IKEv2exitFail();
}



#-----------------------------------------#
# generate keying material (2nd CHILD_SA) #
#-----------------------------------------#
$child_sa_material_2nd = devel_IKEv2gen_child_sa_keymat(1,    # IKE_AUTH exchange
							$material,
							$ike_sa_init_req_param,
							$ike_sa_init_resp_param,
							$ike_auth_req_param_2,
							$ike_auth_resp_param_2);



#--------------------------------------#
# set CHILD_SA (in: 2nd SA , out: non) #
#--------------------------------------#
$ret = IKEv2set_child_sa_keymat(1,
				$child_sa_material_2nd,
				$ike_auth_req_param_2,
				$ike_auth_resp_param_2,
                                1, 0, 1, 0);
unless($ret) {
        kLogHTML(kDump_Common_Error());
        IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t set 2nd keying material(inbound only).</FONT>');
}


#--------------------------------------#
# send Echo Request (use 1st CHILD_SA) #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n"; 
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IPsec {Echo Request} (USE 1st CHILD_SA)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);

$ret = ICMPsend($icmp_session, 'echo_request');
unless(defined($ret)) {
        kLogHTML(kDump_Common_Error());
        IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send ICMP packet.</FONT>');
}


#------------------------------------------#
# receive Echo Reply (use 1st/2nd CHILD_SA)#
#------------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n"; 
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |--------X      | IPsec {Echo Reply}\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);

$ret = ICMPreceive($icmp_session);
if (defined($ret)) {
        my $strerror = kDump_Common_Error();
        kLogHTML('<FONT COLOR="#ff0000">Observe ICMP packet.</FONT>');
        IKEv2exitFail();
}



#--------------------------------------#
# set CHILD_SA (in: non , out: 2nd SA) #
#--------------------------------------#
$ret = IKEv2set_child_sa_keymat(1,
				$child_sa_material_2nd,
				$ike_auth_req_param_2,
				$ike_auth_resp_param_2,
                                0, 1, 0, 1);
unless($ret) {
        kLogHTML(kDump_Common_Error());
        IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t set 2nd keying material(outbound only).</FONT>');
}


#--------------------------------------#
# send Echo Request (use 2nd CHILD_SA) #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n"; 
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IPsec {Echo Request} (USE 2nd CHILD_SA)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);

$ret = ICMPsend($icmp_session, 'echo_request');
unless(defined($ret)) {
        kLogHTML(kDump_Common_Error());
        IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send ICMP packet.</FONT>');
}


#------------------------------------------#
# receive Echo Reply (use 1st/2nd CHILD_SA)#
#------------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n"; 
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IPsec {Echo Reply}\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);

$ret = ICMPreceive($icmp_session);
unless(defined($ret)) {
        my $strerror = kDump_Common_Error();
        kLogHTML('<FONT COLOR="#ff0000">Observe ICMP packet.</FONT>');
        IKEv2exitFail();
}



#--------------------------------------#
# exit with cleanup                    #
#--------------------------------------#
IKEv2exitPass();
# NOTREACHED



#
# perldoc
#
########################################################################
__END__

=head1 Title

  Test IKEv2.EN.R.1.1.3.3: Close connections when receiving INITIAL_CONTACT
  Part A: (ADVANCED)

=head1 Purpose

  To verify an IKEv2 device closes connections when receiving INITIAL_CONTACT.

=head1 References

  * [RFC 4306] - Sections 2.1, 2.2 and 2.4
  * [RFC 4718] - Sections 7.9

=head1 Test Setup

  * Network Topology
      Connect the devices according to the Common Topology.
  * Configuration
      In each part, configure the devices according to the Common Configuration.
  * Pre-Sequence and Cleanup Sequence
      IKEv2 on the NUT is disabled after each part.

=head1 Procedure

=begin html

<BLOCKQUOTE>
<PRE>

   NUT                  TN1
(End-Node)           (End-Node)
    |                    |
    |<-------------------| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)
    |                    | (Packet #1)
    |------------------->| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)
    |                    | (Judgement #1)
    |                    |
    |<-------------------| IKE_AUTH request (HDR, SK {IDi, AUTH, N, SAi2, TSi, TSr})
    |                    | (Packet #2)
    |------------------->| IKE_AUTH response (HDR, SK {IDr, AUTH, N, SAr2, TSi, TSr})
    |                    | (Judgement #2)
    |                    |
    |<-------------------| IPsec {Echo Request}
    |                    | (Packet #3)
    |------------------->| IPsec {Echo Reply}
    |                    | (Judgement #3)
    |                    |
    |<-------------------| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)
    |                    | (Packet #4)
    |------------------->| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)
    |                    | (Judgement #4)
    |                    |
    |<-------------------| IKE_AUTH request (HDR, SK {IDi, N(INITIAL_CONTACT), AUTH, N, SAi2, TSi, TSr})
    |                    | (Packet #5)
    |------------------->| IKE_AUTH response (HDR, SK {IDr, AUTH, N, SAr2, TSi, TSr})
    |                    | (Judgement #5)
    |                    |
    |<-------------------| IPsec {Echo Request} (old CHILD_SA)
    |                    | (Packet #6)
    |------------------->| IPsec {Echo Reply}
    |                    | (Judgement #6)
    |                    |
    |<-------------------| IKE_SA_INIT request (HDR, SAi1, KEi, Ni) (new CHILD_SA)
    |                    | (Packet #7)
    |------------------->| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)
    |                    | (Judgement #7)
    |                    |
    V                    V<br>
 N: USE_TRANSPORT_MODE
<br>
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD><TT>Packet #1</TT></TD>
<TD><TT>See Common Packet #1</TT></TD>
</TR>
<TR>
<TD><TT>Packet #2</TT></TD>
<TD><TT>See Common Packet #3</TT></TD>
</TR>
<TR>
<TD><TT>Packet #3</TT></TD>
<TD><TT>See Common Packet #19</TT></TD>
</TR>
<TR>
<TD><TT>Packet #4</TT></TD>
<TD><TT>See Common Packet #1</TT></TD>
</TR>
<TR>
<TD><TT>Packet #5</TT></TD>
<TD><TT>See Common Packet #3</TT></TD>
</TR>
<TR>
<TD><TT>Packet #6</TT></TD>
<TD><TT>See Common Packet #19<br>This packet is cryptographically<br>protected by the CHILD_SA<br>negotia
ted at Step 1 to Step 4.</TT></TD>
</TR>
<TR>
<TD><TT>Packet #7</TT></TD>
<TD><TT>See Common Packet #19<br>This packet is cryptographically<br>protected by the CHILD_SA<br>negotiated at Step 7 to Step 10.</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

  Part A: (ADVANCED)
       1. TN1 starts to negotiate with NUT by sending IKE_SA_INIT request.
       2. Observe the messages transmitted on Link A.
       3. After reception of IKE_AUTH response from the NUT, TN1 transmits an IKE_AUTH
          request to the NUT.
       4. Observe the messages transmitted on Link A.
       5. After reception of IKE_AUTH response from the NUT, TN1 transmits an Echo Request
          with IPsec ESP using corresponding algorithms to NUT.
       6. Observe the messages transmitted on Link A.
       7. After reception of an Echo Reply from NUT, TN1 transmits IKE_SA_INIT request to the
          NUT.
       8. Observe the messages transmitted on Link A.
       9. After reception of IKE_SA_INIT response from the NUT, TN1 transmits IKE_AUTH
          response with a Notify payload of type INITIAL_CONTACT to the NUT.
      10. Observe the messages transmitted on Link A.
      11. After reception of IKE_AUTH response from the NUT, TN1 transmits an Echo Request
          with IPsec ESP using the first negotiated algorithm.
      12. Observe the messages transmitted on Link A.
      13. After reception of IKE_AUTH response from the NUT, TN1 transmits an Echo Request
          with IPsec ESP using the second negotiated algorithm.
      14. Observe the messages transmitted on Link A.

=head1 Observable Result

  Part A
    Step 2: Judgment #1
      The NUT transmits an IKE_SA_INIT response including "ENCR_3DES",
      "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as accepted
      algorithms.
  
    Step 4: Judgment #2
      The NUT transmits an IKE_AUTH response including "ENCR_3DES",
      "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" as accepted algorithms.
  
    Step 6: Judgment #3
      The NUT transmits an Echo Reply with IPsec ESP using corresponding algorithms.
  
    Step 8: Judgment #4
      The NUT transmits an IKE_SA_INIT response including "ENCR_3DES",
      "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as accepted
      algorithms.
  
    Step 10: Judgment #5
      The NUT transmits an IKE_AUTH response including "ENCR_3DES",
      "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" as accepted algorithms.
  
    Step 12: Judgment #6
      The NUT never transmits an Echo Reply using the first negotiated algorithms or the second
      negotiated algorithms.
  
    Step 14: Judgment #7
       The NUT transmits an Echo Reply with IPsec ESP using the second negotiated algorithms.

=head1 Possible Problems

  * None.

=cut



