#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: IKEv2-EN-R-1-2-6-4-A.seq,v 1.5 2010/07/22 13:32:59 doo Exp $
#
################################################################



BEGIN
{
	push(@INC, '..');
}

END { }



use IKEv2;
use strict;



my $remote	= 'common_remote_index';
my $ike_sa_init_req_param	= undef;
my $ike_sa_init_resp_param	= undef;
my $ike_auth_req_param	= undef;
my $ike_auth_resp_param	= undef;
my $create_child_sa_req_param = undef;
my $create_child_sa_resp_param = undef;
my $informational_req_param = undef;
my $informational_resp_param = undef;

my $session	= undef;
my $material_1st	= undef;
my $material_2nd	= undef;
my $child_sa_material	= undef;
my $str	= undef;
my $ret	= undef;

my @local_create_child_sa_req = undef;
my @local_create_child_sa_resp = undef;
my @local_informational_req = undef;
my @local_informational_resp = undef;



#------------------------------#
# register IKEv2.pm            #
#------------------------------#
kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST SETUP</B></U></FONT>');

my $tn = 'EN';
my $nut = 'EN';


unless(IKEv2initialize($tn, $nut)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 module initializing failure</FONT>');
}



#------------------------------#
# configure TN                 #
#------------------------------#
unless(IKEv2setupTN()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">TN setup failure</FONT>');
}



#------------------------------#
# configure NUT                #
#------------------------------#
unless(IKEv2setupNUT()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT setup failure</FONT>');
}



#------------------------------#
# prepare session handler      #
#------------------------------#
kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST PROCEDURE</B></U></FONT>');



$session = IKEv2create_session($remote);
unless(defined($session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 session creation failure</FONT>');
}


#--------------------------------------#
# send IKE_SA_INIT request to NUT      #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_sa_init_req_param = devel_IKEv2send_IKE_SA_INIT_request($session, $remote);
unless(defined($ike_sa_init_req_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT request.</FONT>');
}



#--------------------------------------#
# receive IKE_SA_INIT response by NUT  #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_sa_init_resp_param = devel_IKEv2receive_IKE_SA_INIT_response($session,
								  $remote,
								  $ike_sa_init_req_param);
unless(defined($ike_sa_init_resp_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT response.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# generate keying material             #
#--------------------------------------#
$material_1st = devel_IKEv2gen_keymat(1, $ike_sa_init_req_param, $ike_sa_init_resp_param);
unless(defined($material_1st)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t generate keying material.</FONT>');
}



#--------------------------------------#
# send IKE_AUTH request to NUT         #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_AUTH request (HDR, SK {IDi, AUTH, SAi2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_auth_req_param = devel_IKEv2send_IKE_AUTH_request($session,
						       $remote,
						       $ike_sa_init_req_param,
						       $ike_sa_init_resp_param,
						       $material_1st);
unless(defined($ike_auth_req_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_AUTH request.</FONT>');
}



#--------------------------------------#
# receive IKE_AUTH response by NUT     #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_AUTH response (HDR, SK {IDr, AUTH, SAr2, TSi, TSr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_auth_resp_param = devel_IKEv2receive_IKE_AUTH_response($session,
							    $remote,
							    $ike_sa_init_req_param,
							    $ike_sa_init_resp_param,
							    $ike_auth_req_param,
							    $material_1st);
unless(defined($ike_auth_resp_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_AUTH response.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# set keying material                  #
#--------------------------------------#
my $keymat = undef;
{
	#--------------------------------------#
	# generate keying material (CHILD_SA)  #
	#--------------------------------------#
	$keymat = IKEv2_v6eval_generate_IPsecSA(1,	# Initial Exchanges
						$material_1st,
						$ike_sa_init_req_param,
						$ike_sa_init_resp_param,
						$ike_auth_req_param,
						$ike_auth_resp_param);

	my $ret = IKEv2_v6eval_set_IPsecSA(1, $keymat, $ike_auth_req_param, $ike_auth_resp_param);
	unless($ret) {
		IKEv2log(kDump_Common_Error());
		IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t set keying material.</FONT>');
	}
}



#--------------------------------------#
# send Echo Request                    #
#--------------------------------------#
my $esp_seq_out = 1;
my $esp_seq_in = undef;
{
	$str  = '<PRE>';
	$str .= "    (I)             (R)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |<--------------| IPsec {Echo Request}\n";
	$str .= "     |               |\n";
	$str .= "     |-------------->| IPsec {Echo Reply}\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';
	IKEv2log($str);

	my $slink = 'Link0';
	my $rlink = 'Link0';
	my $spkt = 'ipsec_ereq';
	my @rpkts = ('ipsec_erep');

	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	unless ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}

	unless(($vrecv{'recvFrame'} eq 'ipsec_erep') &&
		   (defined($vrecv{'recvHexDump'}))) {
		# NOTREACHED
		IKEv2og('<FONT COLOR="#ff0000">should not be reached to here</FONT>');
		IKEv2exitFatal();
	}

	#------------------------------#
	# update IPsec SA              #
	#------------------------------#
	{
		$esp_seq_out++;
		$esp_seq_in = $vrecv{'Frame_Ether.Packet_IPv6.Hdr_ESP.SequenceNumber'};
		$esp_seq_in++;
		my $cpp = '';
		$cpp .= '-DCPP_ECHO_ID=1 ';
		$cpp .= "-DCPP_ESP_SEQ_OUT=$esp_seq_out ";
		$cpp .= "-DCPP_ESP_SEQ_IN=$esp_seq_in ";

		my $conf = { 'cpp' => $cpp };
		my $ret = IKEv2_v6eval_set_IPsecSA(1, $keymat, $ike_auth_req_param, $ike_auth_resp_param, $conf);
	}
}



#--------------------------------------#
# prepare CREATE_CHILD_SA request      #
#--------------------------------------#
# get IKE_SA_INIT's transform
my $common_ike_sa_init_req = $gen_ike_sa_init_req->{'common_remote_index'};
my @tmp_ike_sa_init_req = @{$common_ike_sa_init_req};
my @ike_sa_init_transform = undef;
my $ike_sa_init_ke = undef;            #********************* for racoon2 ***************
for (my $i = 0; $i < scalar(@tmp_ike_sa_init_req); $i++) {
	my $payload = $tmp_ike_sa_init_req[$i];

	if ($payload->{'self'} eq 'SA') {
		for (my $j = 0; $j < scalar(@{$payload->{'proposals'}}); $j++) {
			my $proposal = @{$payload->{'proposals'}}[$j];

			if (defined($proposal->{'transforms'})) {
				@ike_sa_init_transform = @{$proposal->{'transforms'}};
				last;
			}
		}
	}
	#********************** for racoon2 ***************
	if ($payload->{'self'} eq 'KE') {
		$ike_sa_init_ke = $payload;
	}
}
# generate CREATE_CHILD_SA Request for IKE_SA
my $common_create_child_sa_req = $gen_create_child_sa_req->{$remote};
@local_create_child_sa_req = @{$common_create_child_sa_req};
for (my $i = 0; $i < scalar(@local_create_child_sa_req); $i++) {
	my $payload = $local_create_child_sa_req[$i];

	# delete N, TSi, TSr
        if ( (($payload->{'self'} eq 'N') && ($payload->{'type'} eq 'USE_TRANSPORT_MODE'))
             || ($payload->{'self'} eq 'TSi')
             || ($payload->{'self'} eq 'TSr')) {
                splice(@local_create_child_sa_req, $i, 1);
                redo;
        }
	# change proposal setting
	if ($payload->{'self'} eq 'SA') {
		for (my $j = 0; $j < scalar(@{$payload->{'proposals'}}); $j++) {
			my $proposal = @{$payload->{'proposals'}}[$j];

			$proposal->{'id'} = 'IKE';				# ProtocolID(1=IKE)
			$proposal->{'spiSize'} = '8';				# SPI size

			@{$proposal->{'transforms'}} = @ike_sa_init_transform;
		}

		#****** add KE for racoon2.... ******
		splice(@local_create_child_sa_req, $i+1, 0, $ike_sa_init_ke);	 # add KEi ****for racoon2***
	}
}
my $index = 'close_replaced_IKE_SA.1';
$gen_create_child_sa_req->{$index} = \@local_create_child_sa_req;



#--------------------------------------#
# send CREATE_CHILD_SA request to NUT  #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| CREATE_CHILD_SA request (HDR, SK {SA, Nir})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$create_child_sa_req_param = devel_IKEv2send_CREATE_CHILD_SA_request($session,
								     $index,
								     $ike_sa_init_req_param,
								     $ike_sa_init_resp_param,
								     $informational_req_param,
								     $material_1st);
unless(defined($create_child_sa_req_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send CREATE_CHILD_SA request.</FONT>');
}



#--------------------------------------#
# prepare CREATE_CHILD_SA response     #
#--------------------------------------#
# get IKE_SA_INIT's transform
my $common_ike_sa_init_resp = $exp_ike_sa_init_resp->{'common_remote_index'};
my @tmp_ike_sa_init_resp = @{$common_ike_sa_init_resp};
my @ike_sa_init_transform = undef;
for (my $i = 0; $i < scalar(@tmp_ike_sa_init_resp); $i++) {
	my $payload = $tmp_ike_sa_init_resp[$i];

	if ($payload->{'self'} eq 'SA') {
		for (my $j = 0; $j < scalar(@{$payload->{'proposals'}}); $j++) {
			my $proposal = @{$payload->{'proposals'}}[$j];

			if (defined($proposal->{'transforms'})) {
				@ike_sa_init_transform = @{$proposal->{'transforms'}};
				last;
			}
		}
	}
}
# generate CREATE_CHILD_SA Response for IKE_SA
my $common_create_child_sa_resp = $exp_create_child_sa_resp->{$remote};
my @local_create_child_sa_resp = @{$common_create_child_sa_resp};
for (my $i = 0; $i < scalar(@local_create_child_sa_resp); $i++) {
	my $payload = $local_create_child_sa_resp[$i];

	if ($payload->{'self'} eq 'E') {
		for (my $j = 0; $j < scalar(@{$payload->{'innerPayloads'}}); $j++) {
			my $inner = @{$payload->{'innerPayloads'}}[$j];

                        # delete N, TSi, TSr
                        if ( (($inner->{'self'} eq 'N') && ($inner->{'type'} eq 'USE_TRANSPORT_MODE'))
			     || ($inner->{'self'} eq 'TSi') || ($inner->{'self'} eq 'TSr') ) {
                                splice(@{$payload->{'innerPayloads'}}, $j, 1);
                                redo;
                        }
			# change proposal setting
			if ($inner->{'self'} eq 'SA') {
				for (my $k = 0; $k < scalar(@{$inner->{'proposals'}}); $k++) {
					my $proposal = @{$inner->{'proposals'}}[$k];

					$proposal->{'id'} = 'IKE';				# ProtocolID(1=IKE)
					$proposal->{'spiSize'} = '8';				# SPI size
					$proposal->{'proposalLen'} = '48';			# length +8 +4

					@{$proposal->{'transforms'}} = @ike_sa_init_transform;
				}
				$inner->{'length'} = '52';	  # SA payload length
			}
		}
		#set correct nexttype
		for (my $j = 0; $j < scalar(@{$payload->{'innerPayloads'}}); $j++) {
			my $inner = @{$payload->{'innerPayloads'}}[$j];

			if ($inner->{'self'} eq 'Ni, Nr') {
				my $next = @{$payload->{'innerPayloads'}}[$j+1]; 
				unless (defined($next)) {
					$inner->{'nexttype'} = '0';
					next;
				}
				if ($inner->{'nexttype'} eq $next->{'self'}) {
					next;
				}
				$inner->{'nexttype'} = $next->{'self'};
			}
		}
	}
}
$index = 'close_replaced_IKE_SA.2';
$exp_create_child_sa_resp->{$index} = \@local_create_child_sa_resp;



#------------------------------------------#
# receive CREATE_CHILD_SA response by NUT  #
#------------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| CREATE_CHILD_SA response (HDR, SK {SA, Nr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$create_child_sa_resp_param = devel_IKEv2receive_CREATE_CHILD_SA_response($session,
									  $index,
									  $ike_sa_init_req_param,
									  $ike_sa_init_resp_param,
									  $create_child_sa_req_param,
									  $material_1st);
unless(defined($create_child_sa_resp_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe CREATE_CHILD_SA response.</FONT>');
	IKEv2exitFail();
}



#-------------------------------------------#
# generate keying material (use NEW IKE_SA) #
#-------------------------------------------#
$material_2nd = devel_IKEv2gen_keymat(1,
				      $ike_sa_init_req_param,
				      $ike_sa_init_resp_param,
				      $create_child_sa_req_param,
				      $create_child_sa_resp_param,
				      $material_1st
				     );
unless(defined($material_2nd)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t generate keying material.</FONT>');
}



#------------------------------------------------#
# send INFORMATIONAL Request (w/ delete payload) #
#------------------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| INFORMATIONAL Request (HDR, SK {D})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



my $req_delete_payload =
{	# Delete Payload
	'self'		=> 'D',	     # *** MUST BE HERE ***
	'nexttype'	=> undef,    # Next Payload
	'critical'	=> undef,    # Critical
	'reserved'	=> undef,    # RESERVED
	'length'	=> undef,    # Payload Length
	'id'		=> 'IKE',    #undef,	# Protocol ID
	'spiSize'	=> '0',	     # SPI Size
	'spiCount'	=> '0',
};
my $common_informational_req = $gen_informational_req->{$remote};
@local_informational_req = @{$common_informational_req};
# add Delete payload 
for (my $i = 0; $i < scalar(@local_informational_req); $i++) {
	if ($local_informational_req[$i]->{'self'} eq 'HDR') {
		$local_informational_req[$i]->{'initSPI'} = $ike_sa_init_req_param->{'spi'};
		$local_informational_req[$i]->{'respSPI'} = $ike_sa_init_resp_param->{'spi'};
	}
	if ($local_informational_req[$i]->{'self'} eq 'E') {
		splice(@local_informational_req, $i+1);
		push(@local_informational_req, $req_delete_payload);
	}
}
$index = 'close_replaced_IKE_SA.3';
$gen_informational_req->{$index} = \@local_informational_req;

$informational_req_param = devel_IKEv2send_INFORMATIONAL_request($session,
								 $index,
								 $ike_sa_init_req_param,
								 $ike_sa_init_resp_param,
								 $create_child_sa_req_param,
								 $material_1st);
unless(defined($informational_req_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send INFORMATIONAL request.</FONT>');
}



#--------------------------------------#
# receive INFORMATIONAL Response       #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| INFORMATIONAL Reply (HDR, SK {})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



my $common_informational_resp = $exp_informational_resp->{'common_remote_index'};
@local_informational_resp = @{$common_informational_resp};
# add Delete payload 
for (my $i = 0; $i < scalar(@local_informational_resp); $i++) {
	if ($local_informational_resp[$i]->{'self'} eq 'HDR') {
		$local_informational_resp[$i]->{'initSPI'} = $ike_sa_init_req_param->{'spi'};
		$local_informational_resp[$i]->{'respSPI'} = $ike_sa_init_resp_param->{'spi'};
	}
}
$index = 'close_replaced_IKE_SA.4';
$exp_informational_resp->{$index} = \@local_informational_resp;

$informational_resp_param = devel_IKEv2receive_INFORMATIONAL_response($session,
								      $index,
								      $ike_sa_init_req_param,
								      $ike_sa_init_resp_param,
								      $informational_req_param,
								      $material_1st);
unless(defined($informational_resp_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe INFORMATIONAL response.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# send Echo Request                    #
#--------------------------------------#
{
	$str  = '<PRE>';
	$str .= "    (I)             (R)\n";
	$str .= "    NUT             TN1\n";
	$str .= "     |               |\n";
	$str .= "     |<--------------| IPsec {Echo Request}\n";
	$str .= "     |               |\n";
	$str .= "     |-------------->| IPsec {Echo Reply}\n";
	$str .= "     |               |\n";
	$str .= "     V               V";
	$str .= '</PRE>';
	IKEv2log($str);

	my $slink = 'Link0';
	my $rlink = 'Link0';
	my $spkt = 'ipsec_ereq';
	my @rpkts = ('ipsec_erep');

	my ($ret, %vrecv) = IKEv2_v6eval_send_recv($slink, $rlink, $spkt, @rpkts);
	unless ($ret) {
		my $strerror = kDump_Common_Error();
		IKEv2log('<FONT COLOR="#ff0000">Can\'t observe ICMP packet.</FONT>');
		IKEv2exitFail();
	}
}



#--------------------------------------#
# exit with cleanup                    #
#--------------------------------------#
IKEv2exitPass();
# NOTREACHED



#
# perldoc
#
########################################################################
__END__

=head1 Title

  Test IKEv2.EN.R.1.2.6.4: Close the replaced IKE_SA
  Part A: (BASIC)

=head1 Purpose

  To verify an IKEv2 device properly handles CREATE_CHILD_SA to rekey IKE_SA.

=head1 References

  * [RFC 4306] - Sections 2.8
  * [RFC 4718] - Sections 5.8 and 5.11

=head1 Test Setup

  * Network Topology
      Connect the devices according to the Common Topology.
  * Configuration
      In each part, configure the devices according to the Common Configuration.
  * Pre-Sequence and Cleanup Sequence
      IKEv2 on the NUT is disabled after each part.

=head1 Procedure

=begin html

<BLOCKQUOTE>
<PRE>

   NUT                  TN1
(End-Node)           (End-Node)
    |                    |
    |<-------------------| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)
    |                    | (Packet #1)
    |------------------->| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)
    |                    | (Judgement #1)
    |                    |
    |<-------------------| IKE_AUTH request (HDR, SK {IDi, AUTH, N, SAi2, TSi, TSr})
    |                    | (Packet #2)
    |------------------->| IKE_AUTH response (HDR, SK {IDr, AUTH, N, SAr2, TSi, TSr})
    |                    | (Judgement #2)
    |                    |
    |<-------------------| IPsec {Echo Request}
    |                    | (Packet #3)
    |------------------->| IPsec {Echo Reply}
    |                    | (Judgement #3)
    |                    |
    |<-------------------| CREATE_CHILD_SA request (HDR, SK {SA, Ni})
    |                    | (Packet #4)
    |------------------->| CREATE_CHILD_SA response (HDR, SK {SA, Nr})
    |                    | (Judgement #4)
    |                    |
    |<-------------------| INFORMATIONAL request (HDR, SK {D})
    |                    | (Packet #5)
    |------------------->| INFORMATIONAL response (HDR, SK {})
    |                    | (Judgement #5)
    |                    |
    |<-------------------| IPsec {Echo Request}
    |                    | (Packet #6)
    |------------------->| IPsec {Echo Reply}
    |                    | (Judgement #6)
    |                    |
    V                    V<br>
<br>
N: USE_TRANSPORT_MODE
</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD><TT>Packet #1</TT></TD>
<TD><TT>See Common Packet #1</TT></TD>
</TR>
<TR>
<TD><TT>Packet #2</TT></TD>
<TD><TT>See Common Packet #3</TT></TD>
</TR>
<TR>
<TD><TT>Packet #3</TT></TD>
<TD><TT>See Common Packet #19</TT></TD>
</TR>
<TR>
<TD><TT>Packet #4</TT></TD>
<TD><TT>See Common Packet #11</TT></TD>
</TR>
<TR>
<TD><TT>Packet #5</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
<TR>
<TD><TT>Packet #6</TT></TD>
<TD><TT>See Common Packet #19</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>
<br>

<BLOCKQUOTE>
Packet #5: INFORMATIONAL request
<TABLE BORDER>
<TR>
<TD>IPv6 Header</TD>
<TD colspan="2">Same as the Common Packet #17</TD>
</TR>
<TR>
<TD>UDP Header</TD>
<TD colspan="2">Same as the Common Packet #17</TD>
</TR>
<TR>
<TD>IKEv2 Header</TD>
<TD colspan="2">Same as the Common Packet #17</TD>
</TR>
<TR>
<TD rowspan="2">E Payload</TD>
<TD colspan="2">Other fields are same as the Common Packet #17</TD>
</TR>
<TR>
<TD>Next Payload</TD>
<TD>42 (Delete)</TD>
</TR>
<TR>
<TD rowspan="8">Delete Payload</TD>
<TD>Next Payload</TD>
<TD>0 (last)</TD>
</TR>
<TR>
<TD>Critical</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Reserved</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Payload Length</TD>
<TD>16</TD>
</TR>
<TR>
<TD>Procotol ID</TD>
<TD>1 (IKE_SA)</TD>
</TR>
<TR>
<TD>SPI Size</TD>
<TD>0</TD>
</TR>
<TR>
<TD># of SPIs</TD>
<TD>0</TD>
</TR>
<TR>
<TD>Security Parameter Index(es) (SPI)</TD>
<TD>empty</TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

  Part A: (BASIC)
     1. TN1 starts to negotiate with NUT by sending IKE_SA_INIT request.
     2. Observe the messages transmitted on Link A.
     3. After reception of IKE_SA_INIT response from the NUT, TN1 transmits an IKE_AUTH
         request to the NUT.
     4. Observe the messages transmitted on Link A.
     5. TN1 transmits an Echo Request with IPsec ESP using corresponding algorithms to NUT.
     6. Observe the messages transmitted on Link A.
     7. TN1 transmits a CREATE_CHILD_SA request to rekey IKE_SA to the NUT.
     8. Observe the messages transmitted on Link A.
     9. TN1 transmits an INFORMATIONAL request with a Delete payload which has 1 (IKE_SA)
         in the Protocol ID field, zero in the SPI Size field and zero in the # of SPIs field.
     10. Observe the messages transmitted on Link A.
     11. TN1 transmits an Echo Request with IPsec ESP using corresponding algorithms inherited
         from the replaced IKE_SA.
     12. Observe the messages transmitted on Link A.

=head1 Observable Result

  Part A
       Step 2: Judgment #1
       The NUT transmits an IKE_SA_INIT response including "ENCR_3DES",
       "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as accepted
       algorithms.

       Step 4: Judgment #2
       The NUT transmits an IKE_AUTH response including "ENCR_3DES",
       "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" as accepted
       algorithms.

       Step 6: Judgment #3
       The NUT transmits an Echo Reply with IPsec ESP using corresponding algorithms.

       Step 8: Judgment #4
       The NUT transmits a CREATE_CHILD_SA response including "ENCR_3DES",
       "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as proposed
       algorithms. And the proposal in the SA payload Response includes 1 (IKE) in the Protocol ID
       field, 8 in the SPI size field and rekeyed IKE_SA's responder's SPI value in the SPI field.

       Step 10: Judgment #5
       The NUT responds with an INFORMATIONAL response with no payloads.

       Step 12: Judgment #3
       The NUT transmits an Echo Reply with IPsec ESP using corresponding algorithms inherited
       from the replaced IKE_SA.


=head1 Possible Problems

  * none.

=cut


