#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: IKEv2-EN-R-1-1-8-3-A.seq,v 1.3 2008/11/28 10:16:22 doo Exp $
#
################################################################



BEGIN
{
	push(@INC, '..');
}

END { }



use IKEv2;
use strict;



my $remote	= 'common_remote_index';
my $ike_sa_init_req_param	= undef;
my $ike_sa_init_resp_param	= undef;
my $ike_auth_req_param	= undef;
my $ike_auth_resp_param	= undef;
my $informational_req_param	= undef;

my $session	= undef;
my $material	= undef;
my $child_sa_material	= undef;
my $str	= undef;
my $ret = undef;

my @local_ike_auth_req = undef;
my @local_ike_auth_resp = undef;
my @local_informational_req = undef;


#------------------------------#
# register IKEv2.pm            #
#------------------------------#
kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST SETUP</B></U></FONT>');



unless(IKEv2initialize('EN', 'EN')) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 module initializing failure</FONT>');
}



#------------------------------#
# configure TN                 #
#------------------------------#
unless(IKEv2setupTN()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">TN setup failure</FONT>');
}



#------------------------------#
# change configuration         #
#------------------------------#
my $conf = {
        'selector.0.upper_layer_protocol' => {
                'protocol'      => 'tcp',
        },
        'selector.1.upper_layer_protocol' => {
                'protocol'      => 'tcp',
        },
};
unless (IKEv2customize($conf)) {
        IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 configuration failure</FONT>');
}



#------------------------------#
# configure NUT                #
#------------------------------#
unless(IKEv2setupNUT()) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">NUT setup failure</FONT>');
}



#------------------------------#
# prepare session handler      #
#------------------------------#
kLogHTML('<FONT COLOR="#FF0000" SIZE="+1"><U><B>TEST PROCEDURE</B></U></FONT>');



$session = IKEv2create_session($remote);
unless(defined($session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">IKEv2 session creation failure</FONT>');
}



#--------------------------------------#
# send IKE_SA_INIT request to NUT      #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_sa_init_req_param = devel_IKEv2send_IKE_SA_INIT_request($session, $remote);
unless(defined($ike_sa_init_req_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_SA_INIT request.</FONT>');
}



#--------------------------------------#
# receive IKE_SA_INIT response by NUT  #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_SA_INIT response (HDR, SAr1, KEr, Nr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);



$ike_sa_init_resp_param = devel_IKEv2receive_IKE_SA_INIT_response($session,
							$remote,
							$ike_sa_init_req_param);
unless(defined($ike_sa_init_resp_param)) {
	kLogHTML(kDump_Common_Error());
	kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_SA_INIT response.</FONT>');
	IKEv2exitFail();
}



#--------------------------------------#
# generate keying material             #
#--------------------------------------#
$material = devel_IKEv2gen_keymat(1, $ike_sa_init_req_param, $ike_sa_init_resp_param);
unless(defined($material)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t generate keying material.</FONT>');
}



#--------------------------------------#
# send IKE_AUTH request to NUT         #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IKE_AUTH request (HDR, SK {IDi, AUTH, N(USE_TRANSPORT_MODE), SAi2, TSi, TSr})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


$ike_auth_req_param = devel_IKEv2send_IKE_AUTH_request($session,
                                                       $remote,
                                                       $ike_sa_init_req_param,
                                                       $ike_sa_init_resp_param,
                                                       $material);
unless(defined($ike_auth_req_param)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send IKE_AUTH request.</FONT>');
}



#--------------------------------------#
# prepare receive IKE_AUTH response    #
#--------------------------------------#
my $common_exp_ike_auth_resp = $exp_ike_auth_resp->{'common_remote_index'};
my @my_exp_ike_auth_resp = @{$common_exp_ike_auth_resp};
# change upper protocol 
foreach my $payload (@my_exp_ike_auth_resp) {
        if ($payload->{'self'} eq 'E') {
                foreach my $p (@{$payload->{'innerPayloads'}}) {
                        if ($p->{'self'} eq 'TSi' || $p->{'self'} eq 'TSr') {
                                foreach my $s (@{$p->{'selectors'}}) {
                                        $s->{'protocol'} = '17';
                                }
                        }
                }
        }
}



#-----------------------------------#
# receive IKE_AUTH response by NUT  #
#-----------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| IKE_AUTH response (HDR, SK {IDr, AUTH, N(USE_TRANSPORT_MODE), SAr2, TSi, TSr)\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


$ike_auth_resp_param = devel_IKEv2receive_IKE_AUTH_response($session,
                                                            $remote,
                                                            $ike_sa_init_req_param,
                                                            $ike_sa_init_resp_param,
                                                            $ike_auth_req_param,
                                                            $material);
unless(defined($ike_auth_resp_param)) {
        kLogHTML(kDump_Common_Error());
        kLogHTML('<FONT COLOR="#ff0000">Can\'t observe IKE_AUTH response.</FONT>');
        IKEv2exitFail();
}



#--------------------------------------#
# generate keying material (CHILD_SA)  #
#--------------------------------------#
$child_sa_material = devel_IKEv2gen_child_sa_keymat(1,    # IKE_AUTH exchange
                                                    $material,
					            $ike_sa_init_req_param,
					            $ike_sa_init_resp_param,
					            $ike_auth_req_param,
					            $ike_auth_resp_param);



#--------------------------------------#
# set Upper Protocol for TN's SPD      #
#--------------------------------------#
IKEv2set_SPD('upperspec', 'icmp6');



#--------------------------------------#
# set keying material                  #
#--------------------------------------#
$ret = IKEv2set_child_sa_keymat(1, $child_sa_material, $ike_auth_req_param, $ike_auth_resp_param);
unless($ret) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t set keying material.</FONT>');
}



#--------------------------------------#
# prepare ICMP session handler         #
#--------------------------------------#
my $icmp_session = ICMPcreate_session('TN1sendtoNUT');
unless(defined($icmp_session)) {
	IKEv2exitFatal('<FONT COLOR="#ff0000">ICMP session creation failure</FONT>');
}



#--------------------------------------#
# send Echo Request                    #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n"; 
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |<--------------| IPsec {Echo Request}\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);

$ret = ICMPsend($icmp_session, 'echo_request');
unless(defined($ret)) {
	kLogHTML(kDump_Common_Error());
	IKEv2exitFatal('<FONT COLOR="#ff0000">Can\'t send ICMP packet.</FONT>');
}



#------------------------------------------------------#
# prepare INFORMATIONAL Request (w/ INVALID_SELECTORS) #
#------------------------------------------------------#
my $notify_invalid_sel =
{       # Notify Payload
        'self'          => 'N',     # *** MUST BE HERE ***
        'nexttype'      => '0',     # Next Payload
        'critical'      => '0',     # Critical
        'reserved'      => '0',     # RESERVED
        'length'        => undef,     # Payload Length
        'id'            => '0',     # Protocol ID
        'spiSize'       => '0',     # SPI Size
        'type'          => 'INVALID_SELECTORS',     # Notify Type
        'spi'           => $ike_auth_resp_param->{'spi'},      # SPI
        'data'          => undef       # Notification Data
};
my $common_informational_req = $exp_informational_req->{'common_remote_index'};
@local_informational_req = @{$common_informational_req};
for (my $i = 0; $i < scalar(@local_informational_req); $i++) {
        if ($local_informational_req[$i]->{'self'} eq 'E') {
                splice(@{$local_informational_req[$i]->{'innerPayloads'}}, 0);
                push(@{$local_informational_req[$i]->{'innerPayloads'}}, $notify_invalid_sel);
                $local_informational_req[$i]->{'innerType'} = 'N';
                last;
        }
}
$exp_informational_req->{'EN-R-1-1-9-4.1'} = \@local_informational_req;



#--------------------------------------#
# receive INFORMATIONAL Request        #
#--------------------------------------#
$str  = '<PRE>';
$str .= "    (R)             (I)\n";
$str .= "    NUT             TN1\n";
$str .= "     |               |\n";
$str .= "     |-------------->| INFORMATIONAL Request (HDR, SK {N(INVALID_SELECTORS)})\n";
$str .= "     |               |\n";
$str .= "     V               V";
$str .= '</PRE>';

kLogHTML($str);


$informational_req_param = devel_IKEv2receive_INFORMATIONAL_request($session,
                                                                     'EN-R-1-1-9-4.1',
                                                                     $ike_sa_init_req_param,
                                                                     $ike_sa_init_resp_param,
                                                                     $ike_auth_req_param,
                                                                     $material);
unless(defined($informational_req_param)) {
        kLogHTML(kDump_Common_Error());
        kLogHTML('<FONT COLOR="#ff0000">Can\'t observe INFORMATIONAL response.</FONT>');
        IKEv2exitFail();
}



#--------------------------------------#
# exit with cleanup                    #
#--------------------------------------#
IKEv2exitPass();
# NOTREACHED



#
# perldoc
#
########################################################################
__END__

=head1 Title

  Test IKEv2.EN.R.1.1.8.3: INVALID_SELECTORS
  Part A (BASIC)

=head1 Purpose

  To verify an IKEv2 device properly handles an ESP or AH packet whose selectors do not
  match those of the CHILD_SA.

=head1 References

  * [RFC 4306] - Sections 3.10.1
  * [RFC 4307] - Sections 7.8

=head1 Test Setup

  * Network Topology
      Connect the devices according to the Common Topology.
  * Configuration
      In each part, configure the devices according to the Common Configuration except
      Traffic Selector. Traffic Selector should be configured as following.

=begin html

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD rowspan="3"></TD>
<TD colspan="6"><center>Traffic Selector</center></TD>
</TR>
<TR>
<TD colspan="3"><center>Source</center></TD>
<TD colspan="3"><center>Destination</center></TD>
</TR>
<TR>
<TD>Address<br>Range</TD>
<TD>Next Layer<br>Protocol</TD>
<TD>Port<br>Range</TD>
<TD>Address<br>Range</TD>
<TD>Next Layer<br>Protocol</TD>
<TD>Port<br>Range</TD>
</TR>
<TR>
<TD>Inbound</TD>
<TD>TN1</TD>
<TD>TCP</TD>
<TD>ANY</TD>
<TD>NUT</TD>
<TD>TCP</TD>
<TD>ANY</TD>
</TR>
<TR>
<TD>Outbound</TD>
<TD>NUT</TD>
<TD>TCP</TD>
<TD>ANY</TD>
<TD>TN1</TD>
<TD>TCP</TD>
<TD>ANY</TD>
</TR>
</TABLE>
</BLOCKQUOTE>
<br>

=end html

  * Pre-Sequence and Cleanup Sequence
      IKEv2 on the NUT is disabled after each part.

=head1 Procedure

=begin html

<BLOCKQUOTE>
<PRE>

   NUT                  TN1
(End-Node)           (End-Node)
    |                    |
    |<-------------------| IKE_SA_INIT request (HDR, SAi1, KEi, Ni)
    |                    | (Packet #1)
    |------------------->| IKE_SA_INIT Response (HDR, SAr1, KEr, Nr)
    |                    | (Judgement #1)
    |                    |
    |<-------------------| IKE_AUTH request (HDR, SK {IDi, AUTH, N, SAi2, TSi, TSr})
    |                    | (Packet #2)
    |------------------->| IKE_AUTH Response (HDR, SK {IDr, AUTH, N, SAr2, TSi, TSr})
    |                    | (Judgement #2)
    |                    |
    |<-------------------| IPsec {Echo Request} 
    |                    | (Packet #3)
    |------------------->| INFORMATIONAL request (HDR, SK { N(INVALID_SELECTORS) })
    |                    | (Judgement #3)   
    |                    |
    V                    V
<br>
 N: USE_TRANSPORT_MODE   

</BLOCKQUOTE>

<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD><TT>Packet #1</TT></TD>
<TD><TT>See Common Packet #1</TT></TD>
</TR>
<TR>
<TD><TT>Packet #2</TT></TD>
<TD><TT>See below</TT></TD>
</TR>
<TR>
<TD><TT>Packet #3</TT></TD>
<TD><TT>See Common Packet #19</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>
<br>

<br>
<BLOCKQUOTE>
  * Packet #2: IKE_AUTH request
<TABLE BORDER>
<TR>
<TD>IPv6 Header</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>UDP Header</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>IKEv2 Header</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>E Payload</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>IDi Payload</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>AUTH Payload</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>N Payload</TD>
<TD colspan="2">Same as the Common Packet #3</TD>
</TR>
<TR>
<TD>SA Payload</TD>
<TD colspan="2">Same as the common packet #3</TD>
</TR>
<TR>
<TD rowspan="2">TSi Payload</TD>
<TD colspan="2">Other fields are same as the Common Packet #3</TD>
</TR>
<TR>
<TD>Traffic Selectors</TD>
<TD>See below</TD>
</TR>
<TR>
<TD rowspan="2">TSr Payload</TD>
<TD colspan="2">Other fields are same as the Common Packet #3</TD>
</TR>
<TR>
<TD>Traffic Selectors</TD>
<TD>See below</TD>
</TR>
</TABLE>
</BLOCKQUOTE>
<br>

<br>
<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD rowspan="7">TSi Payload</TD>
<TD rowspan="7">Traffic Selector</TD>
<TD>TS Type</TD>
<TD>8 (IPV6_ADDR_RANGE)</TD>
</TR>
<TR>
<TD>IP Protocol ID</TD>
<TD>6 (TCP)</TD>
</TR>
<TR>
<TD>Selector Length</TD>
<TD>40</TD>
</TR>
<TR>
<TD>Start Port</TD>
<TD>0</TD>
</TR>
<TR>
<TD>End Port</TD>
<TD>65535</TD>
</TR>
<TR>
<TD>Starting Address</TD>
<TD>TN1's Global Address on Link X</TD>
</TR>
<TR>
<TD>Ending Address</TD>
<TD>TN1's Global Address on Link X</TD>
</TR>
</TABLE>
</BLOCKQUOTE>
<br>

<br>
<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD rowspan="7">TSr Payload</TD>
<TD rowspan="7">Traffic Selector</TD>
<TD>TS Type</TD>
<TD>8 (IPV6_ADDR_RANGE)</TD>
</TR>
<TR>
<TD>IP Protocol ID</TD>
<TD>6 (TCP)</TD>
</TR>
<TR>
<TD>Selector Length</TD>
<TD>40</TD>
</TR>
<TR>
<TD>Start Port</TD>
<TD>0</TD>
</TR>
<TR>
<TD>End Port</TD>
<TD>65535</TD>
</TR>
<TR>
<TD>Starting Address</TD>
<TD>NUT's Global Address on Link A</TD>
</TR>
<TR>
<TD>Ending Address</TD>
<TD>NUT's Global Address on Link A</TD>
</TR>
</TABLE>
</BLOCKQUOTE>
<br>

=end html

  Part A (BASIC)
       1. TN starts to negotiate with NUT by sending IKE_SA_INIT request.
       2. Observe the messages transmitted on Link A.
       3. After reception of IKE_SA_INIT response from the NUT, TN transmits an IKE_AUTH
          request as the above table to the NUT.
       4. Observe the messages transmitted on Link A.
       5. After reception of IKE_AUTH response from the NUT, TN1 transmits an Echo Request
          with IPsec ESP using corresponding algorithms to NUT.
       6. Observe the messages transmitted on Link A.

=head1 Observable Result

  Part A
    Step 2: Judgment #1
      The NUT transmits an IKE_SA_INIT response including "ENCR_3DES",
      "PRF_HMAC_SHA1", "AUTH_HMAC_SHA1_96" and "D-H group 2" as accepted
      algorithms.
  
    Step 4: Judgment #2
      The NUT transmits an IKE_AUTH response including "ENCR_3DES",
      "AUTH_HMAC_SHA1_96" and "No Extended Sequence Numbers" as accepted algorithms.

    Step 6: Judgment #3
      The NUT transmits an INFORMATIONAL request with a Notify of type
      INVALID_SELECTORS.

=head1 Possible Problems

  * None.

=cut


