#!/usr/bin/perl
#
# Copyright (C) IPv6 Promotion Council,
# NIPPON TELEGRAPH AND TELEPHONE CORPORATION (NTT),
# Yokogwa Electoric Corporation, YASKAWA INFORMATION SYSTEMS Corporation
# and NTT Advanced Technology Corporation(NTT-AT) All rights reserved.
# 
# Technology Corporation.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#

#--------------------------------------------------------------#
# ENTRANCE
#--------------------------------------------------------------#
# Set the test version used for the display.
BEGIN { $V6evalTool::TestVersion = '$Name: MIPv6_4_0_5 $'; }

# Import the package.
use V6evalTool;
use mip6_mn_config;
use mip6_mn_common;
use mip6_mn_get;
use mip6_mn_send;
use mip6_mn_neighbor;
use mip6_mn_recv;
use mip6_mn_msg;

#--------------------------------------------------------------#
# INITIALIZATION
#--------------------------------------------------------------#
# Do the test satisfied the condition.
my @options = (
	'TEST_STATE_NORMAL',        'YES',                0,
	'TEST_FUNC_REAL_HOME_LINK', 'YES',                0,
);

# Initialize the state of TARGET.
Init_MN(@options);

#--------------------------------------------------------------#
# PREPARATION
#--------------------------------------------------------------#
# Prepare other variables.
my @value;
my $sec;

#-------------------------------------------------------------
# TEST PROCEDURE
#--------------------------------------------------------------#
#--------------------------------------------------------------#
# NUT moves from Link0 to LinkX.
#--------------------------------------------------------------#
# Receive Binding Update. (NUTX -> HA0)
# Send Binding Acknowledgement. (HA0 -> NUTX)
%packet = vRecv_to_move_from_Link0_to_LinkX_NonHA($IF0);
if ($packet{status} != 0) {
	$initcount ++;
	goto TERM;
}

# for IKEv1
if (vRecv_to_establish_all_SA_at_LinkX($IF0) != 0) {
	$initcount ++;
	goto TERM;
}

# interval
vRecv_at_LinkX($IF0, $MinDelayBetweenRAs);

#--------------------------------------------------------------#
# NUT moves from LinkX to Link0.
#--------------------------------------------------------------#
# Receive Neighbor Solicitation (DAD). (Unspecified -> HA0)
# Send Neighbor Advertisement. (HA0 -> NUT0)
# Receive Binding Update. (NUT0 -> HA0)
# Send Binding Acknowledgement. (HA0 -> NUT0)
$now_time = time;
$end_time = $now_time + $RTN_TIME;
while ($now_time < $end_time) {

	$sec = $end_time - $now_time;
	%packet = vRecv_at_Link0_NonHA($IF0, $sec,
		'ns_0_nuthsol_tgt_nuthga',
		'bu_nuthga_ha0ga',
		'bu_nuthga_ha0ga_hoa_nuthga',
		'ns_any_any',
		'ns_any_any_w_ipsec',
		'ns_any_any_opt_any',
		'ns_any_any_opt_any_w_ipsec');
	$now_time = time;

	if ($packet{recvFrame} eq 'ns_0_nuthsol_tgt_nuthga') {
		vSend_na($IF0, 'na_ha0lla_alnodemcast_tgt_nuthga_tll_ha0', $packet);
		$ns_flag = 1;
	}
	elsif (($packet{recvFrame} eq 'bu_nuthga_ha0ga') ||
	       ($packet{recvFrame} eq 'bu_nuthga_ha0ga_hoa_nuthga')) {
		vSend_ba($IF0, 'ba_ha0ga_nuthga', \%packet);
		$de_bu_flag = 1;
		last;
	}
	elsif ($packet{status} == 0) {
		if ($ns_flag == 0) {
			%value_addr = get_value_of_ipv6(0, \%packet);
			%saddr_tbl = get_addr_tbl($value_addr{SourceAddress});
			if ($saddr_tbl{node_name} =~ /nuth/) {
				vLogHTML_Fail("FAIL: NUT use Home Address before Home De-Registration.");
				$failcount ++;
				last;
			}
		}

		$rtn = check_ns(1, \%packet);
		if ($rtn == 0) {
			vSend_na2($IF0, \%packet);
		}
		elsif ($rtn == 1) {
			%value_dad = get_value_of_ns(0, \%packet);
			if ($value_dad{TargetAddress} eq $node_hash{nuth_ga}) {
				vSend_na($IF0, 'na_ha0lla_alnodemcast_tgt_nuthga_tll_ha0', $packet);
			}
			elsif ($value_dad{TargetAddress} eq $node_hash{nuth_lla}) {
				if ($value_bu{LFlag} == 1) {
					vSend_na($IF0, 'na_ha0lla_alnodemcast_tgt_nuthlla_tll_ha0', $packet);
				}
				else {
					vLogHTML_Info("    no-reply");
				}
			}
			else {
				vLogHTML_Info("    no-reply");
			}
		}
		else {
			vLogHTML_Info("    no-reply");
		}
	}
}

#--------------------------------------------------------------#
# JUDGEMENT *1
#--------------------------------------------------------------#
if ($ns_flag == 1) {
	vLogHTML_Pass("(*1) PASS: HA0 receives Neighbor Solicitation (DAD).");
}
else {
	vLogHTML_Warn("(*1) WARN: HA0 does not receive Neighbor Solicitation (DAD).");
	$warncount ++;
}

if ($de_bu_flag == 1) {
	vLogHTML_Pass("(*2) PASS: HA0 receives Binding Update.");
}
else {
	vLogHTML_Fail("(*2) FAIL: HA0 does not receive Binding Update.");
	$failcount ++;
}

TERM:
#--------------------------------------------------------------#
# TERMINATION
#--------------------------------------------------------------#
# Terminate the state of TARGET.
Term_MN($IF0, 1);

################################################################
__END__


=head1 NAME

=begin html
  MN-2-1-3-1-007 - Sending Neighbor Solicitation for the home agent's address

=end html

=head1 TARGET

=begin html
<PRE>
Host
</PRE>

=end html

=head1 REQUIREMENT of TEST

=begin html
<PRE>
    - Function of Real Home Link: YES
                    
</PRE>

=end html

=head1 TOPOLOGY

=begin html
<PRE>
<UL>
<LI><B><FONT SIZE="+1">TOPOLOGY-1 In the case of Real Home Link</FONT></B>
</UL>
                    
                            |
                            R      CN0
                            |       |
                ----+-------+-------+----------------------- LinkZ
                    |
                    R2                            NUTY
                    |                               |
                ----+-------+-----------------------+------- LinkY
                            |
                            R1                    NUTX
                            |                       |
                ----+-------+-----------------------+------- LinkX
                    |
                   HA0                            NUT0
                    |                               |
        ------------+-------------------------------+------- Link0
                    
</PRE>
<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD><TT>Link0</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:100::/64</TT></TD>
<TD><TT>home link</TT></TD>
</TR>
<TR>
<TD><TT>LinkX</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:102::/64</TT></TD>
<TD><TT>foreign link</TT></TD>
</TR>
<TR>
<TD><TT>LinkY</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:103::/64</TT></TD>
<TD><TT>foreign link</TT></TD>
</TR>
<TR>
<TD><TT>LinkZ</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:104::/64</TT></TD>
<TD><TT>foreign link</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>HA0 (Link0)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:100:200:ff:fe00:a0a0</TT></TD>
<TD ROWSPAN="3"><TT>home agent</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::200:ff:fe00:a0a0</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>00:00:00:00:a0:a0</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>R1 (LinkX)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:102:200:ff:fe00:a4a4</TT></TD>
<TD ROWSPAN="3"><TT>&nbsp;</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::200:ff:fe00:a4a4</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>00:00:00:00:a4:a4</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>R2 (LinkY)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:103:200:ff:fe00:a6a6</TT></TD>
<TD ROWSPAN="3"><TT>&nbsp;</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::200:ff:fe00:a6a6</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>00:00:00:00:a6:a6</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>CN0 (LinkZ)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:104:200:ff:fe00:a8a8</TT></TD>
<TD ROWSPAN="3"><TT>correspondent node</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::200:ff:fe00:a8a8</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>00:00:00:00:a8:a8</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>NUT0 (Link0)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:100::&lt;NutDef.Link0_addr&gt;</TT></TD>
<TD ROWSPAN="3"><TT>home address</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::&lt;NutDef.Link0_addr&gt;</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>&lt;NutDef.Link0_addr&gt;</TT></TD>
</TR>
<TR>
<TD><TT>NUTX (LinkX)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:102::&lt;NutDef.Link0_addr&gt;</TT></TD>
<TD><TT>care-of address</TT></TD>
</TR>
<TR>
<TD><TT>NUTY (LinkY)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:103::&lt;NutDef.Link0_addr&gt;</TT></TD>
<TD><TT>care-of address</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

=head1 SETUP

=begin html
<PRE>
<LI><B><FONT SIZE="+1">Common Setup-1</FONT></B>
<UL>
<LI>Reboot NUT
<LI>Enable MN function
<UL>
<LI>Turn on MN functions
</UL>
<LI>Initialize IPsec configuration
<LI>Set IPsec configuration
<UL>
<LI>This test requires following configurations.
<UL>
<LI><A HREF="SETUP_IPsec_HA0_SA1_SA2.html">MN-HA0 SA1/SA2, Transport mode, Binding Update/Binding Acknowledgement</A>
</UL>
<LI>This test requires following configurations, If a related message is used.
<UL>
<LI><A HREF="SETUP_IPsec_HA0_SA3_SA4.html">MN-HA0 SA3/SA4, Tunnel mode, Return Routability Signaling</A>
<LI><A HREF="SETUP_IPsec_HA0_SA5_SA6.html">MN-HA0 SA5/SA6, Transport mode, Prefix Discovery</A>
</UL>
<LI>This test also allow to use following configurations.
<UL>
<LI><A HREF="SETUP_IPsec_HA0_SA7_SA8.html">MN-HA0 SA7/SA8, Tunnel mode, Payload Packets</A>
<LI><A HREF="SETUP_IPsec_CN0_SA.html">MN-CN0, Transport mode, ICMP</A>
</UL>
</UL>
</UL>
</PRE>

=end html

=head1 INITIALIZATION

=begin html
<PRE>
                    
       HA0    NUT0      R1      R2     CN0
        |       |       |       |       |
        | ----> |       |       |       | 1.Router Advertisement
        |       |       |       |       |
        |     NUTX      |       |       |
        |       |       |       |       |
        |       | <---- |       |       | 2.Router Advertisement
        |       |       |       |       |
        | <---- |       |       |       | 3.Neighbor Solicitation (NUD)
        |       |       |       |       | 4.(no reply)
        |       |       |       |       |
                    
        1. Send Router Advertisement. (HA0 -> HA0_allnode_multi)
            # H Flag = 0 and Not include HA information.
        2. Send Router Advertisement. (R1 -> R1_allnode_multi)
        3. Receive Neighbor Solicitation (NUD). (NUT0 -> HA0)
        4. (no reply)
                    
</PRE>

=end html

=head1 TEST PROCEDURE

=begin html
<PRE>
                    
       HA0    NUTX      R1      R2     CN0
        |       |       |       |       |
        |       | <---- |       |       | 1.Router Advertisement
        |       |       |       |       |
        | <---- |       |       |       | 2.Home Agent Address Discovery Request
        | ----> |       |       |       | 3.Home Agent Address Discovery Reply
        |       |       |       |       |
        | <---- |       |       |       | 4.Binding Update
        | ----> |       |       |       | 5.Binding Acknowledgement
        |       |       |       |       |
        |     NUT0      |       |       |
        |       |       |       |       |
        | ----> |       |       |       | 6.Router Advertisement
        |       |       |       |       |
        |       | ----> |       |       | 7.Neighbor Solicitation (NUD)
        |       |       |       |       | 8.(no reply)
        |       |       |       |       |
        | <---- |       |       |       | 9.Neighbor Solicitation (DAD) (*1)
        | ----> |       |       |       |10.Neighbor Advertisement
        |       |       |       |       |
        | <---- |       |       |       |11.Binding Update (*2)
        | ----> |       |       |       |12.Binding Acknowledgement
        |       |       |       |       |
                    
        1. Send Router Advertisement. (R1 -> R1_allnode_multi)
        2. Receive Home Agent Address Discovery Request. (NUTX -> NUT0_ha_any)
        3. Send Home Agent Address Discovery Reply. (HA0 -> NUTX)
        4. Receive Binding Update. (NUTX -> HA0)
        5. Send Binding Acknowledgement. (HA0 -> NUTX)
        6. Send Router Advertisement. (HA0 -> HA0_allnode_multi)
        7. Receive Neighbor Solicitation (NUD). (NUTX -> R1)
        8. (no reply)
            # Wait during a maximum of 3 seconds(RFC2461).
        9. Receive Neighbor Solicitation (DAD). (Unspecified -> solicited-node multicast)
       10. Send Neighbor Advertisement. (HA0 -> unsolicited-node multicast)
       11. Receive Binding Update. (NUT0 -> HA0)
       12. Send Binding Acknowledgement. (HA0 -> NUT0)
                    
    Focus Packet Format:
        9. Neighbor Solicitation (DAD)
            IPv6 header
                source          = 0::0
                destination     = solicited-node multicast
            ICMPv6 header
              Neighbor Solicitation
                target address  = home address
                    
       10. Neighbor Advertisement
            IPv6 header
                source          = home agent
                destination     = unsolicited-node multicast
            ICMPv6 header
              Neighbor Advertisement
                S               = 0
                target address  = home address
              Target Link-layer Addressoption
                link layer address = home agent
                    
       <A HREF="../images/Binding_Update_message_format_from_MN_to_HA_ESP_home.gif">11. Binding Update</A>
</PRE>

=end html

=head1 JUDGEMENT

=begin html
<PRE>
 (*1) PASS: HA0 receives Neighbor Solicitation (DAD).
 (*2) PASS: HA0 receives Binding Update.
</PRE>

=end html

=head1 REFERENCE

=begin html
<PRE>
RFC3775 Mobility Support in IPv6
    See Section 11.5.4
</PRE>

=end html

