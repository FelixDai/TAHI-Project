#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# $TINY: LLA_DAD_NAPostDAD_SameTgt.seq,v 1.6 2002/03/05 03:04:55 masaxmasa Exp $
# 

########################################################################
BEGIN { $V6evalTool::TestVersion = '$Name: V6LC_5_0_7 $ '; }
use V6evalTool;
use SAA;

#------------------------------------------------------
#----- get sequence arguments
#------------------------------------------------------
$howto_initNUT="none";
$send = "ok";
foreach (@ARGV) {
# How to configure address of NUT?
# sample: boot, ra, manual+_GLOBAL0A0N_UCAST
    /^addrconf=(\S+)/ && do {$SAA::howto_addrconf=$1; next; };

# How to initialize NUT?
# sample: none, DADSuccess_boot, DADFail_boot
    /^init=(\S+)/     && do {$howto_initNUT=$1; next; };

# "none" if send no pakcet to NUT in state DADPostSendNS
# sample: ok, none
    /^send=(\S+)/     && do {$send=$1; next; };

# sequence debug options
# sample: qR
    /^sd=(\S+)/       && do {$seqdebugopt=$1; next; };
    seqERROR("Unknown sequence option '$_'");
}
#------------------------------------------------------

#----- test condition
$IF=Link0;                 # network interface
my $IF1 = 'Link1';	# network interface

$max_retry_count = 10;     # retry if NUT state becomes DADPostSendNS
$max_retry_count = 2 if $SAA::sd =~ /q/;    # quick retry
$send_interval  = 1;
	       # 1[sec] time between DAD NS and DAD NS, send to NUT
               #     (RandomDelay is 0-1sec  e.g. default RetransTimer 1000msec)

##########################################################
#----- Check Target Type

$type=$V6evalTool::NutDef{Type};
if($type eq host) {
    vCPP('-DRFLAG=0');
}
if($type eq router) {
    vCPP('-DRFLAG=1');
}
if($type eq special) {
    vCPP('-DRFLAG=any');
}


##########################################################
#----- Preparetion
vCapture($IF);
seqPrepareLLA($IF, $V6evalTool::NutDef{System});

#----- initialize NUT
vLog("*** Target initialization phase ***");
if($V6evalTool::NutDef{System} ne "manual"){ vSleep($SAA::test_interval); }
$rret=vRemote("reboot_async.rmt","","timeout=$SAA::wait_rebootcmd");
vLog("reboot_async.rmt returned status $rret");

#----- start Capturing
vLog("*** Target testing phase ***");
vClear($IF);

#----- Wait DAD NS from NUT or timeout

vLog("TN wait DAD NS(DADNS_from_NUT) from NUT for $SAA::wait_dadns{$SAA::howto_addrconf} [sec],");

%ret=vRecv_dad($IF,$SAA::wait_dadns{$SAA::howto_addrconf},0,$count,DADNS_from_NUT,DADNS_from_NUT_anyopt);

if ($ret{status} == 0){

    if($ret{recvFrame} eq DADNS_from_NUT_anyopt){
        my $opt_type = $ret{"Frame_Ether.Packet_IPv6.ICMPv6_NS.Opt_ICMPv6_ANY.Type"};
        if($opt_type = 14){
                vLog("DAD NS with NONCE option.");
        }else{

                seqNG();
        }
    }

    vClear($IF);

    %retSend=vSend($IF, DADNA_from_TN_SameTgt);

    #----- check if NUT's address is configured
	if($type eq 'router') {
    vSleep($SAA::wait_addrconf);
	} else {

		#
		# RFC 4861: Neighbor Discovery for IP version 6 (IPv6)
		# 10. Protocol Constants
		#
		# 4350    Host constants:
		# 4351
		# 4352             MAX_RTR_SOLICITATION_DELAY        1 second
		# 4353
		# 4354             RTR_SOLICITATION_INTERVAL         4 seconds
		# 4355
		# 4356             MAX_RTR_SOLICITATIONS             3 transmissions
		#
		# MAX_RTR_SOLICITATION_DELAY +
		#     RTR_SOLICITATION_INTERVAL * MAX_RTR_SOLICITATIONS = 13
		#

		my %local_ret	= vRecv($IF, 13, 0, 0, 'addrconf_rs_unspec',
							'addrconf_rs', 'addrconf_rs_sll');
		if(
			($local_ret{'recvFrame'} eq 'addrconf_rs_unspec') ||
			($local_ret{'recvFrame'} eq 'addrconf_rs') ||
			($local_ret{'recvFrame'} eq 'addrconf_rs_sll')
		) {
			vLog('The NUT must not transmit any Router Solicitations '.
				'if the NUT is a Host.');

			seqNG_dad($def_name);
		}
	}
    if (seqCheckNUTAddrConfigured($IF) eq TRUE) {
	vLog("NUT assigned the address to the interface.");
	if ($SAA::DupAddrDetectTransmits == 0) {
	    vLog("NUT transmit DAD NS though DupAddrDetectTransmits == 0");
	    seqNG_dad($def_name);
	}else{
	    seqNG_dad($def_name);
	}
    }

    if (seqCheckNUTAddrConfiguredUcast($IF) eq TRUE) {
	vLog("NUT assigned the address to the interface.");
	if ($SAA::DupAddrDetectTransmits == 0) {
	    vLog("NUT transmit DAD NS though DupAddrDetectTransmits == 0");
	    seqNG_dad($def_name);
	}else{
	    seqNG_dad($def_name);
	}
    }else{
	vLog("NUT seems to detect Address Duplication");
    }
	if($type ne 'router'){
        captureLLAddr($IF);
    }
	seqOK();
} else{
    vLog("TN wait DAD NS from NUT for $SAA::wait_dadns{$SAA::howto_addrconf}, but NUT had not transmit DAD NS");
    seqNG_dad($def_name);
}

##########################################################


#end
########################################################################
__END__

=head1 NAME

LLA_DAD_NAPostDAD_SameTgt - NUT receives DAD NA (target == NUT)

=head1 TARGET

All Node

=head1 SYNOPSIS

LLA_DAD_NAPostDAD_SameTgt.seq [-tooloption ...] -pkt <packetdef> [addrconf=<addrconfname>] 

  -tooloption   : v6eval tool option
  <packetdef>   : packet definition file (v6eval tool option)
  <addrconfname>: how to configure address on NUT; boot/reboot

=begin html
<PRE>
 detail of v6eval tool option: see perldoc V6evalTool.pm, perldoc V6evalRemote.pm
</PRE>

=end html


=head1 INITIALIZATION

=begin html
<PRE>
 Reboot NUT or Initialize interface of NUT or Initialize IPv6 stack of NUT.
</PRE>

=end html

=head1 TEST PROCEDURE

Verify that a node can properly process neigbor solicitations and advertisements performing Duplicate Address Detection while the node is also performing DAD.

=over 1

B<Test sequence>

   28. Initialize the devices on Link B.
   29. After TN1 receives a DAD NS message from the NUT. Configure TN1 to transmit DAD Neighbor Advertisement B from 
       the NUT's link-local address with a Target Address set to the NUT's tentative link-local address and no TLL Option.
   30. Allow time for all devices on Link B to perform stateless address autoconfiguration and Duplicate Address Detection.
   31. Transmit a NS from TN1 to the solicited-node multicast address of the NUT's link-local address with the Target 
       Address set to the NUT's link-local address.
   32. Observe packet captures on Link B.
   33. Transmit a NS from TN1 to the link-local address of the NUT with the Target Address set to the NUT's link-local address.
   34. Observe packet captures on Link B.

=back 1

=head1 JUDGEMENT

=over 1

B<Test for all NODE>

   Step 30: The NUT should determine its tentative address is not unique and should not assign the tentative address to 
   its interface and must disable IP operation. The NUT must not transmit any Router Solicitations if the NUT is a Host.
   Step 32: The NUT must NOT transmit a Solicited NA for its autoconfigured link-local address.
   Step 34: The NUT must NOT transmit a Solicited NA for its autoconfigured link-local address.

=back 1

=head1 Possible Problems

=over 1

  * If the device doesn't support EUI-64 for privacy address concerns the EUI-64 based steps may be omitted.

=back 1

=head1 CLEANUP

NONE

=cut

# =head1 REFERENCE
# 
# =begin html
# <PRE>
# RFC2462
# <HR>
# <BR>
#    (omit)
# <BR>
# 5.4.4.  Receiving Neighbor Advertisement Messages
# <BR>
#    On receipt of a valid Neighbor Advertisement message on an interface,
#    node behavior depends on whether the target address is tentative or
#    matches a unicast or anycast address assigned to the interface.  If
#    the target address is assigned to the receiving interface, the
# <A NAME="REF">
#    solicitation is processed as described in [DISCOVERY]. <B>If the target
#    address is tentative, the tentative address is not unique.</B></A>
# <BR>
#    (omit)
# </PRE>
# 
# =end html
# 

=pod

=head1 REFERENCE

=begin html
<BLOCKQUOTE>
<PRE>
RFC 4862 - IPv6 Stateless Address Autoconfiguration
</PRE>
</BLOCKQUOTE>

=end html

=head1 SEE ALSO

=begin html
<PRE>
 detail of v6eval tool option: see perldoc V6evalTool.pm, perldoc V6evalRemote.pm
</PRE>

=end html

=cut

