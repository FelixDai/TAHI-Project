#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# $TINY: LLA_DAD_NSPostDAD_SameTgt.seq,v 1.6 2002/03/05 03:04:56 masaxmasa Exp $
# 

########################################################################
BEGIN { $V6evalTool::TestVersion = '$Name: V6LC_5_0_7 $ '; }
use V6evalTool;
use SAA;

#------------------------------------------------------
#----- get sequence arguments
#------------------------------------------------------
$howto_initNUT="none";
$send = "ok";
foreach (@ARGV) {
# How to configure address of NUT?
# sample: boot, ra, manual+_GLOBAL0A0N_UCAST
    /^addrconf=(\S+)/ && do {$SAA::howto_addrconf=$1; next; };

# How to initialize NUT?
# sample: none, DADSuccess_boot, DADFail_boot
    /^init=(\S+)/     && do {$howto_initNUT=$1; next; };

# "none" if send no pakcet to NUT in state DADPostSendNS
# sample: ok, none
    /^send=(\S+)/     && do {$send=$1; next; };

# sequence debug options
# sample: qR
    /^sd=(\S+)/       && do {$seqdebugopt=$1; next; };
    seqERROR("Unknown sequence option '$_'");
}
#------------------------------------------------------

#----- test condition
$IF=Link0;                 # network interface
my $IF1 = 'Link1';	# network interface

$max_retry_count = 10;     # retry if NUT state becomes DADPostSendNS
$max_retry_count = 2 if $SAA::sd =~ /q/;    # quick retry
$send_interval  = 1;
$IDGEN_DELAY = 1;
	       # 1[sec] time between DAD NS and DAD NS, send to NUT
               #     (RandomDelay is 0-1sec  e.g. default RetransTimer 1000msec)


##########################################################
#----- Check Target Type

$type=$V6evalTool::NutDef{Type};
if($type eq host) {
    vCPP('-DRFLAG=0');
}
if($type eq router) {
    vCPP('-DRFLAG=1');
}
if($type eq special) {
    vCPP('-DRFLAG=any');
}

##########################################################

vCapture($IF);

$TargetAddress = 'Frame_Ether.Packet_IPv6.ICMPv6_NS.TargetAddress';
%ret0 = vSend($IF, 'DADNS_from_NUT_EUI');
unless(defined($ret0{$TargetAddress})) {
	vLogHTML('<FONT COLOR="#FF0000"><B>Can\'t get TargetAddress.</B></FONT><BR>');
	seqNG();
}
$TargetAddress_LL_EUI = $ret0{$TargetAddress};

%ret1 = vSend($IF, 'DADNS_from_GANUT_EUI');
unless(defined($ret1{$TargetAddress})) {
	vLogHTML('<FONT COLOR="#FF0000"><B>Can\'t get TargetAddress.</B></FONT><BR>');
	seqNG();
}
$TargetAddress_GA_EUI = $ret1{$TargetAddress};

#----- initialize NUT
vLog("*** Target initialization phase ***");
if($V6evalTool::NutDef{System} ne "manual"){ vSleep($SAA::test_interval); }
$rret=vRemote("reboot_async.rmt","","timeout=$SAA::wait_rebootcmd");
vLog("reboot_async.rmt returned status $rret");

#----- start Capturing
vLog("*** Target testing phase ***");

#----- LLA PHASE
#----- Wait DAD NS from NUT or timeout
vLog("TN wait DAD NS(DADNS_from_NUT) from NUT for $SAA::wait_dadns{$SAA::howto_addrconf} [sec],");

%ret2 = vRecv($IF, $SAA::wait_dadns{$SAA::howto_addrconf}, 0, 0, DADNS_from_NUT, DADNS_from_NUT_anyopt);
if($ret2{'status'} == 0) {

    $TargetAddress_LLA = $ret2{"Frame_Ether.Packet_IPv6.ICMPv6_NS.TargetAddress"};
    if(seqCompareAddr($TargetAddress_LLA, $TargetAddress_LL_EUI)) {
        vLog("NUT transmitted DAD NS for its link-local address with EUI-64.");
        seqNG();
    }else{
        vLog("Target Address is $TargetAddress_LLA.");
        vLog("NUT had transmitted DAD NS for its link-local address from RFC 7217.");
    }
} else {
    vLog("NUT did not transmit DAD NS.");
    seqNG();
}

if($ret2{recvFrame} eq DADNS_from_NUT_anyopt){
    my $opt_type = $ret2{"Frame_Ether.Packet_IPv6.ICMPv6_NS.Opt_ICMPv6_ANY.Type"};
    if($opt_type = 14){
        vLog(" DAD NS with NONCE option.");
    }
}

vLog("OK! Let's go ahead!");


vSleep($SAA::wait_addrconf);
vClear($IF);
vSend($IF, RA_GA0_VLT40);


vLog("TN wait DAD NS for Global address from NUT for $SAA::wait_dadns{ra} [sec],");
%ret2 = vRecv($IF, $SAA::wait_dadns{ra}, 0, 0, DADNS_from_NUT_GA0Tgt, DADNS_from_NUT_GA0Tgt_anyopt);


if($ret2{'status'} == 0) {

    $TargetAddress_GA = $ret2{"Frame_Ether.Packet_IPv6.ICMPv6_NS.TargetAddress"};
    $TargetAddress_GA_lc = lc($TargetAddress_GA);
    $idx = index($TargetAddress_GA_lc, "3ffe:501:ffff:100");
    if($idx == 0) {
        if(seqCompareAddr($TargetAddress_GA, $TargetAddress_GA_EUI)) {
            vLog("NUT had not transmitted DAD NS for its Global address from RFC 7217.");
            seqNG();
        } else {
            vLog("Target Address is $TargetAddress_GA.");
            vLog("NUT had transmitted DAD NS for its Global address from RFC 7217.");
           # vRenewConfFile($IF, $TargetAddress_GA_lc);
        }
    }
} else {
    vLog("NUT had not transmit DAD NS for its Global address.");
    seqNG();
}

vClear($IF);
%retSend=vSend($IF, DADNA_from_TN_SameGATgt);
#----- check if NUT generate an new global address
vSleep($IDGEN_DELAY);
%ret2=vRecv($IF,$send_interval+1,0,$count,Init_DADNS_from_NUT,Init_DADNS_from_NUT_anyopt);
if($ret2{'status'} == 0) {
    $TargetAddress_GA_new = $ret2{"Frame_Ether.Packet_IPv6.ICMPv6_NS.TargetAddress"};
    $TargetAddress_GA_new_lc = lc($TargetAddress_GA_new);
    $idx = index($TargetAddress_GA_new_lc, "3ffe:501:ffff:100");
    if($idx == 0) {
        if(seqCompareAddr($TargetAddress_GA, $TargetAddress_GA_new)) {
            vLog("Target Address is $TargetAddress_GA_new.");
            vLog("NUT transmitted an new DADNS with the same tentative global address.");
            seqNG();
        }else{
            vLog("Target Address is $TargetAddress_GA_new.");
            vLog("NUT transmitted an new DADNS with a different tentative global address.");
            #captureAddr($IF);
            seqOK();
        }
    }else{
        vLog("NUT did not transmit an new global DADNS.");
        seqNG();
       }
}

##########################################################


#end
########################################################################
__END__

=head1 NAME

v6LC_3_2_7_A - Link-Local

=head1 TARGET

All Node

=head1 SYNOPSIS

v6LC_3_2_7_A.seq [-tooloption ...] -pkt <packetdef> [addrconf=<addrconfname>] 

  -tooloption   : v6eval tool option
  <packetdef>   : packet definition file (v6eval tool option)
  <addrconfname>: how to configure address on NUT; boot/reboot

=begin html
<PRE>
 detail of v6eval tool option: see perldoc V6evalTool.pm, perldoc V6evalRemote.pm
</PRE>

=end html


=head1 INITIALIZATION

=begin html
<PRE>
 Reboot NUT or Initialize interface of NUT or Initialize IPv6 stack of NUT.
</PRE>

=end html

=head1 TEST PROCEDURE

Verify that a node can properly process neigbor solicitations and advertisements performing Duplicate Address Detection while the node is also performing DAD.

=over 1

   1.  Initialize the interface on the HUT.
   2.  Allow time for the HUT to perform stateless address autoconfiguration and DAD.
   3.  After TN1 receives a DAD NS message from the NUT.  TN1  transmits DAD Neighbor Advertisement with the Target Address set to the NUTâ€™s tentative 
       link-local address.
   4. Wait IDGEN_DELAY (1 second)

=back 1

=head1 JUDGEMENT

=over 1

   Step 2: The HUT should perform DAD on its tentative address for its interface by sending DAD Neighbor Solicitations.  The HUT should assign the tentative
    address to its interface.  Interface IDs are required to be 64 bits long and use the algorithm from RFC 7217.  
   Step 4: The HUT should transmit a DAD NS message with a in the Target Address set to a different tentative link-local address then in Step 2.

=back 1

=head1 Possible Problems

=over 1

  none.

=back 1

=head1 CLEANUP

NONE

=cut



=pod

=head1 REFERENCE

=begin html
<BLOCKQUOTE>
<PRE>
RFC 4862 - IPv6 Stateless Address Autoconfiguration
</PRE>
</BLOCKQUOTE>

=end html

=head1 SEE ALSO

=begin html
<PRE>
 detail of v6eval tool option: see perldoc V6evalTool.pm, perldoc V6evalRemote.pm
</PRE>

=end html

=cut

