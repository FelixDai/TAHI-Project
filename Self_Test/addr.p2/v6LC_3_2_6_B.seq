#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# $TINY: RA_GA_Success.seq,v 1.14 2002/03/05 17:13:55 miyata Exp $
# 

########################################################################
BEGIN { $V6evalTool::TestVersion = '$Name: V6LC_5_0_7 $ '; }
use V6evalTool;
use SAA;

#------------------------------------------------------
#----- get sequence arguments
#------------------------------------------------------
$howto_initNUT="none";
$send = "ok";

$DAD_GA=$SAA::DADTransmitsGA;
$DAD_GA =~ tr/a-z/A-Z/ ;

##########################################################
#----- Check Target Type

$type=$V6evalTool::NutDef{Type};
if($type eq router) {
    vLogHTML("This test is for the host only<BR>");
    exit $V6evalTool::exitHostOnly;
}

if($type ne host) {
    vLogHTML(ndErrmsg("ERROR: $V6evalTool::NutDef{Type}: ".
		      "Unknown target type<BR>"));
    exit $V6evalTool::exitFail;
}

##########################################################

foreach (@ARGV) {
# How to configure address of NUT?
# sample: boot, ra, manual+_GLOBAL0A0N_UCAST
    /^addrconf=(\S+)/ && do {$SAA::howto_addrconf=$1; next; };

# How to initialize NUT?
# sample: none, DADSuccess_boot, DADFail_boot
    /^init=(\S+)/     && do {$howto_initNUT=$1; next; };

# "none" if send no pakcet to NUT in state DADPostSendNS
# sample: ok, none
    /^send=(\S+)/     && do {$send=$1; next; };

# sequence debug options
# sample: qR
    /^sd=(\S+)/       && do {$seqdebugopt=$1; next; };
    seqERROR("Unknown sequence option '$_'");
}
#------------------------------------------------------

#----- test condition
$IF=Link0;                 # network interface

$max_retry_count = 10;     # retry if NUT state becomes DADPostSendNS
$max_retry_count = 2 if $SAA::sd =~ /q/;    # quick retry
$send_interval  = 1;
	       # 1[sec] time between DAD NS and DAD NS, send to NUT
               #     (RandomDelay is 0-1sec  e.g. default RetransTimer 1000msec)
$recvVLT=40; #30
##########################################################

$type=$V6evalTool::NutDef{Type};
if($type eq host) {
	vCPP('-DRFLAG=0');
}
if($type eq router) {
	vCPP('-DRFLAG=1');
}
if($type eq special) {
	vCPP('-DRFLAG=any');
}

$TargetAddress = 'Frame_Ether.Packet_IPv6.ICMPv6_NS.TargetAddress';
%ret0 = vSend($IF, 'DADNS_from_NUT_EUI');
unless(defined($ret0{$TargetAddress})) {
	vLogHTML('<FONT COLOR="#FF0000"><B>Can\'t get TargetAddress.</B></FONT><BR>');
	seqNG();
}

%ret1 = vSend($IF, 'DADNS_from_GANUT_EUI');
unless(defined($ret1{$TargetAddress})) {
	vLogHTML('<FONT COLOR="#FF0000"><B>Can\'t get TargetAddress.</B></FONT><BR>');
	seqNG();
}

#----- initialize NUT
vLog("*** Target initialization phase ***");
if($V6evalTool::NutDef{System} ne "manual"){ vSleep($SAA::test_interval); }
$rret=vRemote("reboot_async.rmt","","timeout=$SAA::wait_rebootcmd");
vLog("reboot_async.rmt returned status $rret");

#----- start Capturing
vLog("*** Target testing phase ***");
vCapture($IF);

#----- LLA PHASE
#----- Wait DAD NS from NUT or timeout
vLog("TN wait DAD NS(DADNS_from_NUT) from NUT for $SAA::wait_dadns{$SAA::howto_addrconf} [sec],");


# host:
# 	- DADNS_from_NUT

# router/special:
# 	- DADNS_from_NUT
# 	- DADNS_from_NUT_GA0Tgt

%ret2 = vRecv($IF, $SAA::wait_dadns{$SAA::howto_addrconf}, 0, 0, Init_DADNS_from_NUT, Init_DADNS_from_NUT_anyopt);
if($ret2{'status'} == 0) {

    $TargetAddress_LLA = $ret2{"Frame_Ether.Packet_IPv6.ICMPv6_NS.TargetAddress"};
    $TargetAddress_LLA_lc = lc($TargetAddress_LLA);
    $idx = index($TargetAddress_LLA_lc, "fe80");
    if(($idx == 0) && ($TargetAddress_LLA ne $ret0{$TargetAddress})) {
        vLog("NUT had transmitted DAD NS for its link-local address from RFC 7217.");
    }else{
        vLog("NUT hadnot transmitted DAD NS for its link-local address from RFC 7217.");
        seqNG();
    }
}else{
    vLog("TN wait DAD NS from NUT for $SAA::wait_dadns{$SAA::howto_addrconf}, but NUT had not transmit DAD NS");
    seqNG();
}

if($ret2{recvFrame} eq Init_DADNS_from_NUT_anyopt){
    my $opt_type = $ret2{"Frame_Ether.Packet_IPv6.ICMPv6_NS.Opt_ICMPv6_ANY.Type"};
    if($opt_type = 14){
        vLog(" DAD NS with NONCE option.");
    }
}

vLog("OK! Let's go ahead!");


vSleep($SAA::wait_addrconf);
vClear($IF);
vSend($IF, RA_GA0_VLT40);


vLog("TN wait DAD NS for Global address from NUT for $SAA::wait_dadns{ra} [sec],");
%ret3 = vRecv($IF, $SAA::wait_dadns{ra}, 0, 0, Init_DADNS_from_NUT, Init_DADNS_from_NUT_anyopt);


if($ret3{'status'} == 0) {

    $TargetAddress_GA = $ret3{"Frame_Ether.Packet_IPv6.ICMPv6_NS.TargetAddress"};
    $TargetAddress_GA_lc = lc($TargetAddress_GA);
    $idx = index($TargetAddress_GA_lc, "3ffe:501:ffff:100");
    if($idx == 0 && $TargetAddress_GA ne $ret1{$TargetAddress}) {
        vLog("NUT had transmitted DAD NS for its Global address from RFC 7217.");
    }else{
        vLog("NUT hadnot transmitted DAD NS for its Global address from RFC 7217.");
        seqNG();
    }
}else{
    vLog("TN wait DAD NS from NUT's Global address, but NUT had not transmit DAD NS");
    seqNG();
}

#----- initialize NUT
vLog("*** Target initialization phase ***");
if($V6evalTool::NutDef{System} ne "manual"){ vSleep($SAA::test_interval); }
$rret=vRemote("reboot_async.rmt","","timeout=$SAA::wait_rebootcmd");
vLog("reboot_async.rmt returned status $rret");

#----- start Capturing
vLog("*** Target testing phase ***");
vClear($IF);

#----- LLA PHASE
#----- Wait DAD NS from NUT or timeout
vLog("TN wait DAD NS(DADNS_from_NUT) from NUT for $SAA::wait_dadns{$SAA::howto_addrconf} [sec],");

%ret2 = vRecv($IF, $SAA::wait_dadns{$SAA::howto_addrconf}, 0, 0, Init_DADNS_from_NUT, Init_DADNS_from_NUT_anyopt);
if($ret2{'status'} == 0) {

    $TargetAddress_LLA_2nd = $ret2{"Frame_Ether.Packet_IPv6.ICMPv6_NS.TargetAddress"};
    $TargetAddress_LLA_2nd_lc = lc($TargetAddress_LLA_2nd);
    $idx = index($TargetAddress_LLA_2nd_lc, "fe80");
    if(($idx == 0) && ($TargetAddress_LLA_2nd ne $ret0{$TargetAddress})) {
        vLog("NUT had transmitted DAD NS for its link-local address from RFC 7217.");
        if($TargetAddress_LLA_2nd eq $TargetAddress_LLA){
            vLog("NUT has the same link-local address as the one before reboot.");
        }else{
            vLog("NUT has a different link-local address as the one before reboot.");
            seqNG();
        }
    }else{
        vLog("NUT did not transmit DAD NS for its link-local address from RFC 7217.");
        seqNG();
    }
}

vLog("OK! Let's go ahead!");


vSleep($SAA::wait_addrconf);
vClear($IF);
vSend($IF, RA_GA0_VLT40);


vLog("TN wait DAD NS for Global address from NUT for $SAA::wait_dadns{ra} [sec],");
%ret3 = vRecv($IF, $SAA::wait_dadns{ra}, 0, 0, Init_DADNS_from_NUT, Init_DADNS_from_NUT_anyopt);


if($ret3{'status'} == 0) {

    $TargetAddress_GA_2nd = $ret3{"Frame_Ether.Packet_IPv6.ICMPv6_NS.TargetAddress"};
    $TargetAddress_GA_2nd_lc = lc($TargetAddress_GA_2nd);
    $idx = index($TargetAddress_GA_2nd_lc, "3ffe:501:ffff:100");
    if($idx == 0 && $TargetAddress_GA_2nd ne $ret1{$TargetAddress}) {
        vLog("NUT had transmitted DAD NS for its Global address from RFC 7217.");
        if($TargetAddress_GA_2nd eq $TargetAddress_GA){
            vLog("NUT has the same global address as the one before reboot.");
        }else{
            vLog("NUT has a different global address as the one before reboot.");
            seqNG();
        }
    }else{
        vLog("NUT hadnot transmitted DAD NS for its Global address from RFC 7217.");
        seqNG();
    }
}


########################################################################
__END__

=head1 NAME

v6LC_3_2_6_B - Reboot (Host Only)

=head1 TARGET

Host

=head1 SYNOPSIS

v6LC_3_2_6_A.seq [-tooloption ...] -pkt <packetdef> [addrconf=<addrconfname>] 

  -tooloption   : v6eval tool option
  <packetdef>   : packet definition file (v6eval tool option)
  <addrconfname>: how to configure address on NUT; boot/reboot

=begin html
<PRE>
 detail of v6eval tool option: see perldoc V6evalTool.pm, perldoc V6evalRemote.pm
</PRE>

=end html


=head1 INITIALIZATION

=begin html
<PRE>
 Reboot NUT or Initialize interface of NUT or Initialize IPv6 stack of NUT.
</PRE>

=end html

=head1 TEST PROCEDURE

Verify that the HUT keeps the network interface constant across system network events.

=over 1

=item Test for Unicast address configuration

The following tests are prepared in this test package. See INDEX file.

B<Test for all node>

   When NUT receives RA which contains Global Prefix, NUT assignes 
   autoconfigured address (or configures the Global address). 
   NUT must perform DAD for its Global address prior to assigning it.

B<Test sequence>

  TN                            NUT
  ---------------------------------
  Initialize NUT

  Configure address of NUT (reboot or interface initialization etc...)

  TN wait the DAD NS sent from NUT
  <=== Judgement #1: DAD NS =======
        name: DADNS_from_NUT

  ==== Action #1: RA =============>
        name: RA_GA0 (If NUT is a Router, configure a global address)

  <=== Judgement #2: DAD NS =======
        name: DADNS_from_NUT_GA0Tgt

  ==== Action #2: Reboot =============>

  TN wait the DAD NS sent from NUT
  <=== Judgement #3: DAD NS =======
        name: DADNS_from_NUT

  ==== Action #3: RA =============>
        name: RA_GA0 (If NUT is a Router, configure a global address)

  <=== Judgement #4: DAD NS =======
        name: DADNS_from_NUT_GA0Tgt
        

=back 1

=head1 JUDGEMENT

=over 1

=item Test for Global Unicast address autoconfiguration

B<Test for host only>

B<NUT performs Stateless Address Autoconfiguration(Global) on its interface>

   Judgement #1. The HUT should perform DAD on its tentative address for its 
   interface by sending DAD Neighbor Solicitations.  The HUT should assign the 
   tentative address to its interface.  Interface IDs are required to be 64 bits 
   long and use the algorithm from RFC 7217. 

   Action #1. TN transmits RA which contains Global Prefix.
        name: RA_GA0
	src: TN's Link-local
	dst: allnode
	PXOPT: Global0

   Judgement #2. The HUT should perform DAD on its tentative global address for 
   its interface on Link A.  Interface IDs are required to be 64 bits long and use 
   the algorithm from RFC 7217. The Interface ID should be different then the id 
   used in Step 2.

   Action #2. NUT Reboot.

   Judgement #3. The HUT should perform DAD on its link-local tentative address for 
   its interface by sending DAD Neighbor Solicitations for the same address used in Step 6 

   Action #3. TN transmits RA which contains Global Prefix.
        name: RA_GA0
	src: TN's Link-local
	dst: allnode
	PXOPT: Global0

   Judgement #4. The HUT should perform DAD on its link-local tentative address for 
   its interface by sending DAD Neighbor Solicitations for the same address used in Step 8.
   

=back 1

=head1 CLEANUP

NONE

=cut

=pod

=head1 REFERENCE

=begin html
<BLOCKQUOTE>
<PRE>
RFC 4862 - IPv6 Stateless Address Autoconfiguration
</PRE>
</BLOCKQUOTE>

=end html

=head1 SEE ALSO

=begin html
<PRE>
 detail of v6eval tool option: see perldoc V6evalTool.pm, perldoc V6evalRemote.pm
</PRE>

=end html

=cut

