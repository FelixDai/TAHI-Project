#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# $TINY: RA_GA_Success.seq,v 1.14 2002/03/05 17:13:55 miyata Exp $
# 

########################################################################
BEGIN { $V6evalTool::TestVersion = '$Name: V6LC_5_0_7 $ '; }
use V6evalTool;
use SAA;

#------------------------------------------------------
#----- get sequence arguments
#------------------------------------------------------
$howto_initNUT="none";
$send = "ok";

$DAD_GA=$SAA::DADTransmitsGA;
$DAD_GA =~ tr/a-z/A-Z/ ;


foreach (@ARGV) {
# How to configure address of NUT?
# sample: boot, ra, manual+_GLOBAL0A0N_UCAST
    /^addrconf=(\S+)/ && do {$SAA::howto_addrconf=$1; next; };

# How to initialize NUT?
# sample: none, DADSuccess_boot, DADFail_boot
    /^init=(\S+)/     && do {$howto_initNUT=$1; next; };

# "none" if send no pakcet to NUT in state DADPostSendNS
# sample: ok, none
    /^send=(\S+)/     && do {$send=$1; next; };

# sequence debug options
# sample: qR
    /^sd=(\S+)/       && do {$seqdebugopt=$1; next; };
    seqERROR("Unknown sequence option '$_'");
}
#------------------------------------------------------

#----- test condition
$IF=Link0;                 # network interface

$max_retry_count = 10;     # retry if NUT state becomes DADPostSendNS
$max_retry_count = 2 if $SAA::sd =~ /q/;    # quick retry
$send_interval  = 1;
	       # 1[sec] time between DAD NS and DAD NS, send to NUT
               #     (RandomDelay is 0-1sec  e.g. default RetransTimer 1000msec)
$recvVLT=40; #30

##########################################################
#----- Check Target Type

$type=$V6evalTool::NutDef{Type};
if($type eq router) {
    vLogHTML("This test is for the host only<BR>");
    exit $V6evalTool::exitHostOnly;
}

if($type ne host) {
    vLogHTML(ndErrmsg("ERROR: $V6evalTool::NutDef{Type}: ".
		      "Unknown target type<BR>"));
    exit $V6evalTool::exitFail;
}

##########################################################

$type=$V6evalTool::NutDef{Type};
if($type eq host) {
	vCPP('-DRFLAG=0');
}


#----- initialize NUT
vLog("*** Target initialization phase ***");
if($V6evalTool::NutDef{System} ne "manual"){ vSleep($SAA::test_interval); }
$rret=vRemote("reboot_async.rmt","","timeout=$SAA::wait_rebootcmd");
vLog("reboot_async.rmt returned status $rret");

#----- start Capturing
vLog("*** Target testing phase ***");
vCapture($IF);

#----- LLA PHASE
#----- Wait DAD NS from NUT or timeout
vLog("TN wait DAD NS(DADNS_from_NUT) from NUT for $SAA::wait_dadns{$SAA::howto_addrconf} [sec],");
$Recv_count = 0;
$LLA_recv = 0;
$GA_recv = 0;
while (1) {
	$Recv_count++;
	if($Recv_count > 4){
		last;
	}
	%ret1 = vRecv($IF, $SAA::wait_dadns{$SAA::howto_addrconf}, 0, 0, Init_DADNS_from_NUT, Init_DADNS_from_NUT_anyopt);
	if($ret1{'status'} == 0) {
		my $TargetAddress = $ret1{"Frame_Ether.Packet_IPv6.ICMPv6_NS.TargetAddress"};
		$TargetAddress = lc($TargetAddress);
		my $idx = index($TargetAddress, "fe80");
		if($idx == 0){
                        vLog("link-local addr received");
			vRenewConfFile($IF, $TargetAddress);
			$LLA_recv = 1;
			if($V6evalTool::NutDef{'Type'} ne 'router') {
			    vSleep($SAA::wait_addrconf);
			    vClear($IF);
			    vSend($IF, RA_GA0_VLT40);
			    next;
			}
		}
		else{
                        vLog("global addr received");
			vRenewConfFile($IF, $TargetAddress);
		        $GA_recv = 1;
		}
	}
	if($LLA_recv && $GA_recv) {
		last;
	}
}
vLogHTML('OK');
exit($V6evalTool::exitIgnore);

########################################################################
__END__

=head1 NAME

  v6LC_3_0_0.seq - Initialization for IPv6 Specification Conformance Test

=head1 TARGET

  Host and Router

=head1 SYNOPSIS

  v6LC_3_0_0.seq -pkt v6LC_3_2_1_A.def

=head1 INITIALIZATION

  N/A

=head1 TEST PROCEDURE

  N/A

=head1 JUDGEMENT

  N/A

=head1 NOTE

  Reboot target.

=head1 SEE ALSO

  perldoc V6evalTool
  perldoc V6evalRemote

=cut

