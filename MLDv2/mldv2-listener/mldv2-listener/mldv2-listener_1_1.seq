#!/usr/bin/perl
# 
# Copyright (C) IPv6 Promotion Council, NTT Advanced Technology Corporation
# (NTT-AT), Yokogwa Electoric Corporation and YASKAWA INFORMATION SYSTEMS
# Corporation All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with
# or without modification, are permitted provided that the following
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which
# is related to this software (hereinafter referred to as "project") nor
# the names of the contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
# notification to the copyrighters. However, using this software for the
# purpose of testing or evaluating any products including merchantable
# products may be permitted without any notification to the copyrighters.
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.
# 
###############################################################################
BEGIN {}
END   {}

#------------------------------------------------------------------------------
# Include
#------------------------------------------------------------------------------
# Include Module
use strict;
use warnings;
use V6evalTool;
use MLDv2L;

#------------------------------------------------------------------------------
vLog2("Setup");
#------------------------------------------------------------------------------
# Variable
my $stp = 0;
my $rtn;
my $wk;

# Requirement configuration
%T_REQ = (
#	DupAddrDetectTransmits => 1,
);

# Specification configuration
%T_CONF = (
	FUNC_ENABLE_REPORT => 1,
	RV  => 2,
	URI => 1,
);

# Topology
@T_LINK = ("Link0");
@T_NODE = ("TR1");

# Setup
$rtn = Setup();
if ($rtn != $RES_OK) {
	goto TERM;
}

#------------------------------------------------------------------------------
vLog2("Procedure");
#------------------------------------------------------------------------------
# Sequence
%T_SEQ = (
	$stp++ => {
		caption => [ "Step 1. Configure the HUT to enable an address autoconfiguration." ],
		func    => "ConfProc",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step  2. Boot the HUT.",
		             "Step  3. Enable MLDv2 on the HUT." ],
		func    => "BootProc",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 4. Observe the packets on all networks." ],
		func    => $CONF_DATA{SRV} ? "RecvProc" : "BaseProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{ENABLE_TIME},
		             $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{SRV},
		msgs    => [ "MLDv2R_0_mld2r_r1_t4hut0sn0" ],
		status  => 0,
	},
	$stp++ => {
		func    => $CONF_DATA{DupAddrDetectTransmits} ? "RecvProc" : "BaseProc",
		link    => "Link0",
		wtime   => $CONF_DATA{SRV} ?
		           [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ] :
		           [ $CONF_DATA{ENABLE_TIME},
		             $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{DupAddrDetectTransmits},
		msgs    => [ "NS_any_any" ],
		status  => 0,
	},
	$stp++ => {
		func    => $CONF_DATA{FUNC_ENABLE_REPORT} ? "RecvProc" : "BaseProc",
		link    => "Link0",
		wtime   => ($CONF_DATA{SRV} || $CONF_DATA{DupAddrDetectTransmits}) ?
		           [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ] :
		           [ $CONF_DATA{ENABLE_TIME},
		             $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{RV},
		msgs    => [ "MLDv2R_hut0l_mld2r_r1_t4hut0sn0" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 5. Call ListenerAPI (S1, I1, M1, INCLUDE, {S1}) on the HUT." ],
		func    => "ListenerProc",
		socket  => "S1",
		if      => "IF0",
		mcast   => "MCAST1",
		filter  => "INCLUDE",
		srcnum  => 1,
		source  => "S1",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 6. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{RV},
		msgs    => [ "MLDv2R_hut0l_mld2r_r1_t5m1n1s1" ],
		status  => 0,
	},
	$stp++ => {
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} + $CONF_DATA{CHECK_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2R_any_any" ],
		status  => 1,
	},
);

# Execute
for ($stp = 0; $T_SEQ{$stp}; $stp++) {
	no strict 'refs';
	$rtn = &{$T_SEQ{$stp}{func}}($stp);
	if ($rtn != $RES_OK) {
		last;
	}
}

#------------------------------------------------------------------------------
vLog2("Complement Judgement");
#------------------------------------------------------------------------------
$wk = JudgeCommon();
if (($wk != $RES_OK) && ($rtn == $RES_OK)) {
	$rtn = $wk;
}

TERM:
#------------------------------------------------------------------------------
vLog2("Termination");
#------------------------------------------------------------------------------
# 
Term($rtn);

###############################################################################
__END__


=head1 Test Label

=begin html
MLD.1.1 Initial Sequence

=end html

=head1 Purpose

=begin html
To verify the initial sequence of MLDv2 Listener.  To verify that MLDv2 Listener transmits MLDv2 Report for tentative address with Source Address of unspecific address before getting an address.  To verify that MLDv2 Listener transmits MLDv2 Report after getting a valid link-local address.  To verify that the count and the interval of these MLDv2 Report messages are a rated value.

=end html

=head1 References

=begin html
RFC3810 5.2.13.  Source Addresses for Reports<BR>

=cut
<PRE>
   An MLDv2 Report MUST be sent with a valid IPv6 link-local source
   address, or the unspecified address (::), if the sending interface
   has not acquired a valid link-local address yet.
   
           Once a valid link-local address is available, a node SHOULD
   generate new MLDv2 Report messages for all multicast addresses joined
   on the interface.
</PRE>

=pod

=end html

=begin html
RFC3810 6.1.  Action on Change of Per-Interface State<BR>

=cut
<PRE>
   To cover the possibility of the State Change Report being missed by
   one or more multicast routers, [Robustness Variable] - 1
   retransmissions are scheduled, through a Retransmission Timer, at
   intervals chosen at random from the range (0, [Unsolicited Report
   Interval]).
</PRE>

=pod

=end html

=begin html
RFC3810 9.1.  Robustness Variable<BR>

=cut
<PRE>
                                 The value of the Robustness Variable
   MUST NOT be zero, and SHOULD NOT be one.  Default value: 2.
</PRE>

=pod

=end html

=begin html
RFC3810 9.11.  Unsolicited Report Interval<BR>

=cut
<PRE>
   The Unsolicited Report Interval is the time between repetitions of a
   node's initial report of interest in a multicast address.  Default
   value: 1 second.
</PRE>

=pod

=end html

=head1 Discussion

=begin html
None

=end html

=head1 Test Requirement

=begin html
None

=end html

=head1 Test Setup

=begin html
<UL><LI><B><FONT SIZE="+1">Common Topology</FONT></B></UL>
<PRE><FONT SIZE="+1">
   HUT
    |(I/F: Link0)
    |
   -+-------+-------+-------+-------+---- Network 0
            |       |       |       |
           TR1     TR2     TR3     TN1
</FONT></PRE>
<BLOCKQUOTE>
<TABLE BORDER>
<TR><TD><TT>ID</TT></TD>
    <TD><TT>attibute</TT></TD>
    <TD><TT>address, prefix</TT></TD>
    <TD><TT>memo</TT></TD></TR>
<TR><TD><TT>Network 0</TT></TD>
    <TD><TT>prefix</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>I/F Link0 is connected.</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:01</TT></TD>
    <TD ROWSPAN="3"><TT>Lower IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:1</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:1</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR2</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:02</TT></TD>
    <TD ROWSPAN="3"><TT>Middle IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:2</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:2</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR3</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:03</TT></TD>
    <TD ROWSPAN="3"><TT>Higher IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:3</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:3</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TN1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:11</TT></TD>
    <TD ROWSPAN="3"><TT>&nbsp;</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:11</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:11</TT></TD></TR>
</TABLE></BLOCKQUOTE>
<UL><LI><B><FONT SIZE="+1">Common Test Setup</FONT></B>
    <OL><LI>Configure HUT to have:
        <UL><LI>Robustness Variable of 2
            <LI>Query Interval of 125
            <LI>Query Response Interval of 10 seconds
            <LI>Unsolicited Report Interval of 1 second</UL></OL><BR>
    <LI><B><FONT SIZE="+1">Common Test Cleanup</FONT></B>
    <OL><LI>Return all timers and variables to their defaults values.
        <LI>Stop any listening.  HUT does not listen to any multicast other than a solicited-node multicast address of an address assigned to the interface.</OL></UL>

=end html

=head1 Procedure

=begin html
<PRE>
Step 1. Configure the HUT to enable an address autoconfiguration.
Step 2. Boot the HUT.
Step 3. Enable MLDv2 on the HUT.
Step 4. Observe the packets on all networks.
Step 5. Call ListenerAPI (S1, I1, M1, INCLUDE, {S1}) on the HUT.
Step 6. Observe the packets on all networks.
</PRE>

=end html

=head1 Observable Results

=begin html
<PRE>
Step 4: The HUT must transmit 2 MLDv2 Report messages with IPv6 Source Address of the unspecified address (::) and Multicast Address Record TO_EX (NULL) for solicited-node multicast of tentative address one or less second apart.
        Then, the HUT must transmit [DupAddrDetectTransmits] Neighbor Solicitation message with Target Address of tentative address for Duplicate Address Detection.
        Then, the HUT must transmit 2 MLDv2 Report messages with Multicast Address Record TO_EX (NULL) for HUT solicited-node multicast one or less second apart.
Step 6: The HUT must transmit 2 MLDv2 Report messages with Multicast Address Record ALLOW (S1) for M1 one or less second apart.
<BR>
   HUT     TR1     TR2     TR3     TN1
    |       |       |       |       |
    |       |       |       |       | 1. Configure the HUT to enable an address autoconfiguration.
    |       |       |       |       | 2. Boot the HUT.
    |       |       |       |       | 3. Enable MLDv2 on the HUT.
    |<------|       |       |       |    TR1 transmits Router Advertisement
    |       |       |       |       | 4. Observe the packets on all networks.
    |------------------------------>|    HUT transmits TO_EX (HUT solicited-node multicast), [RV] times, [URI] second(s)
    |------------------------------>|    HUT transmits Neighbor Solicitation(DAD), [DupAddrDetectTransmits] times
    |------------------------------>|    HUT transmits TO_EX (HUT solicited-node multicast), [RV] times, [URI] second(s)
    |       |       |       |       | 5. Call ListenerAPI (S1, I1, M1, INCLUDE, {S1}) on the HUT.
    |       |       |       |       | 6. Observe the packets on all networks.
    |------------------------------>|    HUT transmits ALLOW (M1,{S1}), [RV] times, [URI] second(s)
    |       |       |       |       |
</PRE>

=end html

=head1 Possible Problems

=begin html
None

=end html
