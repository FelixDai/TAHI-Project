#!/usr/bin/perl
# 
# Copyright (C) IPv6 Promotion Council, NTT Advanced Technology Corporation
# (NTT-AT), Yokogwa Electoric Corporation and YASKAWA INFORMATION SYSTEMS
# Corporation All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with
# or without modification, are permitted provided that the following
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which
# is related to this software (hereinafter referred to as "project") nor
# the names of the contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
# notification to the copyrighters. However, using this software for the
# purpose of testing or evaluating any products including merchantable
# products may be permitted without any notification to the copyrighters.
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.
# 
###############################################################################
BEGIN {}
END   {}

#------------------------------------------------------------------------------
# Include
#------------------------------------------------------------------------------
# Include Module
use strict;
use warnings;
use V6evalTool;
use MLDv2L;

#------------------------------------------------------------------------------
vLog2("Setup");
#------------------------------------------------------------------------------
# Variable
my $stp = 0;
my $rtn;
my $wk;

# Requirement configuration
%T_REQ = (
	FUNC_2_INTERFACES => 1,
);

# Specification configuration
%T_CONF = ();

# Topology
@T_LINK = ("Link0", "Link1");
@T_NODE = ("TR1", "TR4");

# Setup
$rtn = Setup();
if ($rtn != $RES_OK) {
	goto TERM;
}

#------------------------------------------------------------------------------
vLog2("Procedure");
#------------------------------------------------------------------------------
# Sequence
%T_SEQ = (
	$stp++ => {
		caption => [ "Step 0. Configure the HUT to have two interfaces." ],
		func    => "ConfProc",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 1. Enable MLDv2 on the HUT." ],
		func    => "EnableProc",
		status  => 0,
	},
	$stp++ => {
		func    => $CONF_DATA{FUNC_ENABLE_REPORT} ? "RecvProc" : "BaseProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{RV},
		msgs    => [ "MLDv2R_hut0l_mld2r_r1_t4hut0sn0" ],
		status  => 0,
	},
	$stp++ => {
		func    => $CONF_DATA{FUNC_ENABLE_REPORT} ? "RecvProc" : "BaseProc",
		link    => "Link1",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{RV},
		msgs    => [ "MLDv2R_hut1l_mld2r_r1_t4hut1sn0" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 2. Call ListenerAPI (S1, I1, M1, INCLUDE, {S1}) on the HUT." ],
		func    => "ListenerProc",
		socket  => "S1",
		if      => "IF0",
		mcast   => "MCAST1",
		filter  => "INCLUDE",
		srcnum  => 1,
		source  => "S1",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 3. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{RV},
		msgs    => [ "MLDv2R_hut0l_mld2r_r1_t5m1n1s1" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 4. Call ListenerAPI (S2, I2, M1, INCLUDE, {S2}) on the HUT." ],
		func    => "ListenerProc",
		socket  => "S2",
		if      => "IF2",
		mcast   => "MCAST1",
		filter  => "INCLUDE",
		srcnum  => 1,
		source  => "S2",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 5. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link1",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{RV},
		msgs    => [ "MLDv2R_hut1l_mld2r_r1_t5m1n1s2" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 6. TR1 transmits MLDv1 Multicast Address Specific Query message C on the Network 0." ],
		func    => "SendProc",
		link    => "Link0",
		msgs    => [ "MLDv1Q_tr1l_mcast1_m1" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 7. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{MLDQM_MRD} + $CONF_DATA{MARGIN_TIME} ],
		count   => 1,
		msgs    => [ "MLDv1R_hut0l_mcast1_m1" ],
		status  => 0,
	},
	$stp++ => {
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} + $CONF_DATA{CHECK_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2R_any_any" ],
		status  => 1,
	},
	$stp++ => {
		caption => [ "Step 8. TR4 transmits MLDv2 Multicast Address Specific Query message B on the Network 1." ],
		func    => "SendProc",
		link    => "Link1",
		msgs    => [ "MLDv2Q_tr4l_mcast1_m1n0" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 9. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link1",
		wtime   => [ $CONF_DATA{MLDQM_MRD} + $CONF_DATA{MARGIN_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2R_hut1l_mld2r_r1_t1m1n1s2" ],
		status  => 0,
	},
	$stp++ => {
		func    => "RecvProc",
		link    => "Link1",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} + $CONF_DATA{CHECK_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2R_any_any" ],
		status  => 1,
	},
);

# local packet
$pktdesc{MLDv2R_hut1l_mld2r_r1_t5m1n1s2} = "Send: HUT1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S1})";
$pktdesc{MLDv1R_hut0l_mcast1_m1} = "Recv: HUT0 -> M1, MLDv1 Report (M1)";
$pktdesc{MLDv2Q_tr4l_mcast1_m1n0} = "Send: TR4 -> M1, MLDv2 Query (M1,{null})";
$pktdesc{MLDv2R_hut1l_mld2r_r1_t1m1n1s2} = "Send: HUT1 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M1,{S1})";

# Execute
for ($stp = 0; $T_SEQ{$stp}; $stp++) {
	no strict 'refs';
	$rtn = &{$T_SEQ{$stp}{func}}($stp);
	if ($rtn != $RES_OK) {
		last;
	}
}

#------------------------------------------------------------------------------
vLog2("Complement Judgement");
#------------------------------------------------------------------------------
$wk = JudgeCommon();
if (($wk != $RES_OK) && ($rtn == $RES_OK)) {
	$rtn = $wk;
}

TERM:
#------------------------------------------------------------------------------
vLog2("Termination");
#------------------------------------------------------------------------------
# 
Term($rtn);

###############################################################################
__END__


=head1 Test Label

=begin html
MLD.6.3: MLDv1 Compatibility Mode Scope<BR>

=end html

=head1 Purpose

=begin html
To verify that the MLDv2 Listener treats each state of interface independently.

=end html

=head1 References

=begin html
RFC3810 6.  Protocol Description for Multicast Address Listeners<BR>

=cut
<PRE>
   A node performs the protocol described in this section over all
   interfaces on which multicast reception is supported, even if more
   than one of those interfaces are connected to the same link.

   For interoperability with multicast routers that run the MLDv1
   protocol, nodes maintain a Host Compatibility Mode variable for each
   interface on which multicast reception is supported.  This section
   describes the behavior of multicast address listener nodes on
   interfaces for which Host Compatibility Mode = MLDv2.  The algorithm
   for determining Host Compatibility Mode, and the behavior if its
   value is set to MLDv1, are described in section 8.
</PRE>

=pod

=end html

=begin html
RFC3810 8.2.1.  In the Presence of MLDv1 Routers<BR>

=cut
<PRE>
                                             MLDv2 hosts MUST keep state
   per local interface regarding the compatibility mode of each attached
   link.
</PRE>

=pod

=end html

=head1 Discussion

=begin html
None

=end html

=head1 Test Requirement

=begin html
HUT has 2 interfaces. (Advanced Function)

=end html

=head1 Test Setup

=begin html
<UL><LI><B><FONT SIZE="+1">Common Topology</FONT></B></UL>
<PRE><FONT SIZE="+1">
   TN2     TR4
    |       |
   -+-------+-------+---- Network 1
                    |
        (I/F: Link1)|
                    HUT
                      |(I/F: Link0)
                      |
                     -+-------+-------+-------+-------+---- Network 0
                              |       |       |       |
                             TR1     TR2     TR3     TN1
</FONT></PRE>
<BLOCKQUOTE>
<TABLE BORDER>
<TR><TD><TT>ID</TT></TD>
    <TD><TT>attibute</TT></TD>
    <TD><TT>address, prefix</TT></TD>
    <TD><TT>memo</TT></TD></TR>
<TR><TD><TT>Network 0</TT></TD>
    <TD><TT>prefix</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>I/F Link0 is connected.</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:01</TT></TD>
    <TD ROWSPAN="3"><TT>Lower IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:1</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:1</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR2</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:02</TT></TD>
    <TD ROWSPAN="3"><TT>Middle IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:2</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:2</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR3</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:03</TT></TD>
    <TD ROWSPAN="3"><TT>Higher IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:3</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:3</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TN1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:11</TT></TD>
    <TD ROWSPAN="3"><TT>&nbsp;</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:11</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:11</TT></TD></TR>
<TR><TD><TT>Network 1</TT></TD>
    <TD><TT>prefix</TT></TD>
    <TD><TT>3ffe:501:ffff:101::/64</TT></TD>
    <TD><TT>I/F Link0 is connected.</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR4</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>ff:ff:ff:ff:ff:ff</TT></TD>
    <TD ROWSPAN="3"><TT>&nbsp;</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::fdff:ffff:feff:ffff</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:101:fdff:ffff:feff:ffff</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TN2</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:22:22:22</TT></TD>
    <TD ROWSPAN="3"><TT>&nbsp;</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe22:2222</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:101:200:ff:fe22:2222</TT></TD></TR>
</TABLE></BLOCKQUOTE>
<UL><LI><B><FONT SIZE="+1">Common Test Setup</FONT></B>
    <OL><LI>Configure HUT to have:
        <UL><LI>Robustness Variable of 2
            <LI>Query Interval of 125
            <LI>Query Response Interval of 10 seconds
            <LI>Unsolicited Report Interval of 1 second</UL></OL><BR>
    <LI><B><FONT SIZE="+1">Common Test Cleanup</FONT></B>
    <OL><LI>Return all timers and variables to their defaults values.
        <LI>Stop any listening.  HUT does not listen to any multicast other than a solicited-node multicast address of an address assigned to the interface.</OL></UL>

=end html

=head1 Procedure

=begin html
<PRE>
Step 1. Enable MLDv2 on the HUT.
Step 2. Call ListenerAPI (S1, I1, M1, INCLUDE, {S1}) on the HUT.
Step 3. Observe the packets on all networks.
Step 4. Call ListenerAPI (S2, I2, M1, INCLUDE, {S2}) on the HUT.
Step 5. Observe the packets on all networks.
Step 6. TR1 transmits MLDv1 Multicast Address Specific Query message A on the Network 0.
    -----
    IPv6 Header
        IPv6 Hop Limit                  = 1
        IPv6 Source Address             = TR1 Link-local Address
        IPv6 Destination Address        = M1
    Hop-by-Hop Options Header
        Router Alert Option
    ICMPv6 Header (MLD Query)
        Maximum Response Code           = 1000
        Multicast Address               = M1
    -----
Step 7. Observe the packets on all networks.
Step 8. TR4 transmits MLDv2 Multicast Address Specific Query message B on the Network 1.
    -----
    IPv6 Header
        IPv6 Hop Limit                  = 1
        IPv6 Source Address             = TR4 Link-local Address
        IPv6 Destination Address        = M1
    Hop-by-Hop Options Header
        Router Alert Option
    ICMPv6 Header (MLD Query)
        Maximum Response Code           = 1000
        Multicast Address               = M1
        S Flag                          = 0
        QRV                             = 2
        QQIC                            = 125
        Number of Sources               = 0
    -----
Step 9. Observe the packets on all networks.
</PRE>

=end html

=head1 Observable Results

=begin html
<PRE>
Step 3: The HUT must transmit 2 MLDv2 Report messages with Multicast Address Record ALLOW (S1) for M1 from Interface 1.
Step 5: The HUT must transmit 2 MLDv2 Report messages with Multicast Address Record ALLOW (S2) for M1 from Interface 2.
Step 7: The HUT must transmit MLDv1 Report message for M1 from Interface 1.
Step 9: The HUT must transmit MLDv2 Report message with Multicast Address Record IS_IN (S2) for M1 from Interface 2.
<BR>
   TN2     TR4      HUT      TR1     TR2     TR3     TN1
    |       |       | |       |       |       |       |
    |       |       | |       |       |       |       | 1. Enable MLDv2 on the HUT.
    |       |       | |       |       |       |       | 2. Call ListenerAPI (S1, I1, M1, INCLUDE, {S1}) on the HUT.
    |       |       | |       |       |       |       | 3. Observe the packets on all networks.
    |       |       | |------------------------------>|     HUT0 transmits ALLOW (M1,{S1}), [RV] times, [URI] second(s)
    |       |       | |       |       |       |       | 4. Call ListenerAPI (S2, I2, M1, INCLUDE, {S2}) on the HUT.
    |       |       | |       |       |       |       | 5. Observe the packets on all networks.
    |<--------------| |       |       |       |       |     HUT1 transmits ALLOW (M1,{S2}), [RV] times, [URI] second(s)
    |       |       | |<------|       |       |       | 6. TR1 transmits MLDv1 Multicast Address Specific Query message C on the Network 0.
    |       |       | |       |       |       |       | 7. Observe the packets on all networks.
    |       |       | |------------------------------>|     HUT0 transmits MLDv1 Report (M1)
    |       |------>| |       |       |       |       | 8. TR4 transmits MLDv2 Multicast Address Specific Query message B on the Network 1.
    |       |       | |       |       |       |       | 9. Observe the packets on all networks.
    |<--------------| |       |       |       |       |     HUT0 transmits IS_IN (M1,{S1})
    |       |       | |       |       |       |       |
</PRE>

=end html

=head1 Possible Problems

=begin html
None

=end html
