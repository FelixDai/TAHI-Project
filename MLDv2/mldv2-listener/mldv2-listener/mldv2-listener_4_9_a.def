// 
// Copyright (C) IPv6 Promotion Council, NTT Advanced Technology Corporation
// (NTT-AT), Yokogwa Electoric Corporation and YASKAWA INFORMATION SYSTEMS
// Corporation All rights reserved.
// 
// Redistribution and use of this software in source and binary forms, with
// or without modification, are permitted provided that the following
// conditions and disclaimer are agreed and accepted by the user:
// 
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project which
// is related to this software (hereinafter referred to as "project") nor
// the names of the contributors may be used to endorse or promote products
// derived from this software without specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
// notification to the copyrighters. However, using this software for the
// purpose of testing or evaluating any products including merchantable
// products may be permitted without any notification to the copyrighters.
// 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
// THE POSSIBILITY OF SUCH DAMAGE.
// 
///////////////////////////////////////////////////////////////////////////////
//=============================================================================
// Include
//=============================================================================
#include "MLDv2L.def"

//-----------------------------------------------------------------------------
// TR1 -> M1, MLDv2 Query (M1,{S1}) with Max Response Code of 20000.
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_tr1l_mcast1_m1n1s1_mrc20000,
	_HETHER_tr1_to_mcast1,
	{
		HopLimit        = MLDQ_HOP;
		_SRC(TR1_LLOCAL_UCAST);
		_DST(MCAST1_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_tr1l_mcast1_m1n1s1_mrc20000);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_tr1l_mcast1_m1n1s1_mrc20000);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = MLDQ_CODE;
		Checksum            = MLDQ_CHECKSUM;
		MaxResponseDelay    = 20000;
		Reserved            = MLDQ_RESERVED;
		MulticastAddress    = MLDQM_MCADDR;
		Resv                = MLDQ_RESV;
		SFlag               = MLDQ_S_FLAG;
		QRV                 = MLDQ_QRV;
		QQIC                = MLDQ_QQIC;
		NumOfSources        = 1;
		SourceAddress       = MSRC_01;
	}
)

//-----------------------------------------------------------------------------
// TR1 -> M1, MLDv2 Query (M1,{S2}) with Max Response Code of 1000.
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_tr1l_mcast1_m1n1s2_mrc1000,
	_HETHER_tr1_to_mcast1,
	{
		HopLimit        = MLDQ_HOP;
		_SRC(TR1_LLOCAL_UCAST);
		_DST(MCAST1_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_tr1l_mcast1_m1n1s2_mrc1000);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_tr1l_mcast1_m1n1s2_mrc1000);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = MLDQ_CODE;
		Checksum            = MLDQ_CHECKSUM;
		MaxResponseDelay    = 1000;
		Reserved            = MLDQ_RESERVED;
		MulticastAddress    = MLDQM_MCADDR;
		Resv                = MLDQ_RESV;
		SFlag               = MLDQ_S_FLAG;
		QRV                 = MLDQ_QRV;
		QQIC                = MLDQ_QQIC;
		NumOfSources        = 1;
		SourceAddress       = MSRC_02;
	}
)

//-----------------------------------------------------------------------------
// HUT0 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S1,S2})
//-----------------------------------------------------------------------------
MLDv2_AddrRecord mld2_rcd_t5m1n2s21 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_01;
}

FEM_icmp6_mldv2report_exth(
	MLDv2R_hut0l_mld2r_r1_t5m1n2s12,
	_HETHER_hut0_to_mld2r,
	{
		HopLimit        = HUT_MLDR_HOP;
		_SRC(HUT0_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_hut0l_mld2r_r1_t5m1n2s12);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_hut0l_mld2r_r1_t5m1n2s12);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = HUT_MLDv2R_CODE;
		Checksum                = HUT_MLDv2R_CHECKSUM;
		Reserved                = HUT_MLDv2R_RESERVED;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = oneof (mld2_rcd_t5m1n2s12,
		                                 mld2_rcd_t5m1n2s21);
	}
)

//-----------------------------------------------------------------------------
// HUT0 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M1,{S1,S2})
//-----------------------------------------------------------------------------
MLDv2_AddrRecord mld2_rcd_t1m1n2s21 {
	Type                = MLDv2R_IS_INCLUDE;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_01;
}

FEM_icmp6_mldv2report_exth(
	MLDv2R_hut0l_mld2r_r1_t1m1n2s12,
	_HETHER_hut0_to_mld2r,
	{
		HopLimit        = HUT_MLDR_HOP;
		_SRC(HUT0_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_hut0l_mld2r_r1_t1m1n2s12);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_hut0l_mld2r_r1_t1m1n2s12);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = HUT_MLDv2R_CODE;
		Checksum                = HUT_MLDv2R_CHECKSUM;
		Reserved                = HUT_MLDv2R_RESERVED;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = oneof (mld2_rcd_t1m1n2s12,
		                                 mld2_rcd_t1m1n2s21);
	}
)

// EOF
