#!/usr/bin/perl
# 
# Copyright (C) IPv6 Promotion Council, NTT Advanced Technology Corporation
# (NTT-AT), Yokogwa Electoric Corporation and YASKAWA INFORMATION SYSTEMS
# Corporation All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with
# or without modification, are permitted provided that the following
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which
# is related to this software (hereinafter referred to as "project") nor
# the names of the contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
# notification to the copyrighters. However, using this software for the
# purpose of testing or evaluating any products including merchantable
# products may be permitted without any notification to the copyrighters.
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.
# 
###############################################################################
BEGIN {}
END   {}

#------------------------------------------------------------------------------
# Include
#------------------------------------------------------------------------------
# Include Module
use strict;
use warnings;
use V6evalTool;
use MLDv2L;

#------------------------------------------------------------------------------
vLog2("Setup");
#------------------------------------------------------------------------------
# Variable
my $stp = 0;
my $rtn;
my $wk;

# Requirement configuration
%T_REQ = ();

# Specification configuration
%T_CONF = ();

# Topology
@T_LINK = ("Link0");
@T_NODE = ("TR1");

# Setup
$rtn = Setup();
if ($rtn != $RES_OK) {
	goto TERM;
}

#------------------------------------------------------------------------------
vLog2("Procedure");
#------------------------------------------------------------------------------
# Sequence
%T_SEQ = (
	$stp++ => {
		caption => [ "Step 0. Configure on the HUT." ],
		func    => "ConfProc",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 1. Enable MLDv2 on the HUT." ],
		func    => "EnableProc",
		status  => 0,
	},
	$stp++ => {
		func    => $CONF_DATA{FUNC_ENABLE_REPORT} ? "RecvProc" : "BaseProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{RV},
		msgs    => [ "MLDv2R_hut0l_mld2r_r1_t4hut0sn0" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 2. Call ListenerAPI (S1, I1, SSM1, INCLUDE, {S1}) on the HUT." ],
		func    => "ListenerProc",
		socket  => "S1",
		if      => "IF0",
		mcast   => "SSMCAST1",
		filter  => "INCLUDE",
		srcnum  => 1,
		source  => "S1",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 3. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{RV},
		msgs    => [ "MLDv2R_hut0l_mld2r_r1_t5ssm1s1" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 4. TR1 transmits MLDv1 General Query message A." ],
		func    => "SendProc",
		link    => "Link0",
		msgs    => [ "MLDv1Q_tr1l_allnodes_m0" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 5. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{MLDQG_MRD} + $CONF_DATA{MARGIN_TIME} ],
		count   => 2,
		msgs    => [ "MLDv1R_hut0l_hut0s_hut0s", "MLDv1R_hut0l_ssmcast1_ssm1" ],
		status  => 0,
		stack   => "L0R1",
	},
	$stp++ => {
		caption => [ "Step 6. Call ListenerAPI (S2, I1, SSM2, INCLUDE, {S1}) on the HUT." ],
		func    => "ListenerProc",
		socket  => "S2",
		if      => "IF0",
		mcast   => "SSMCAST2",
		filter  => "INCLUDE",
		srcnum  => 1,
		source  => "S1",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 7. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{RV},
		msgs    => [ "MLDv1R_hut0l_ssmcast2_ssm2" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 8. TR1 transmits MLDv1 Multicast Address Specific Query B for SSM1." ],
		func    => "SendProc",
		link    => "Link0",
		msgs    => [ "MLDv1Q_tr1l_ssmcast1_ssm1" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 9. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{MLDQM_MRD} + $CONF_DATA{MARGIN_TIME} ],
		count   => 1,
		msgs    => [ "MLDv1R_hut0l_ssmcast1_ssm1" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 10. Call ListenerAPI (S1, I1, SSM1, INCLUDE, {NULL}) on the HUT." ],
		func    => "ListenerProc",
		socket  => "S1",
		if      => "IF0",
		mcast   => "SSMCAST1",
		filter  => "INCLUDE",
		srcnum  => 0,
		source  => "NULL",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 11. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{RV},
		msgs    => [ "MLDv1D_hut0l_ssmcast1_ssm1" ],
		status  => 0,
	},
	$stp++ => {
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} + $CONF_DATA{CHECK_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2R_any_any" ],
		status  => 1,
	},
);

# local packet
$pktdesc{MLDv2R_hut0l_mld2r_r1_t5ssm1s1} = "Recv: HUT0 -> All MLDv2-capable routers, MLDv2 Report ALLOW(SSM1,{S1})";
$pktdesc{MLDv1R_hut0l_hut0s_hut0s} = "Recv: HUT0 -> HUT0, MLDv1 Report (HUT0)";
$pktdesc{MLDv1R_hut0l_ssmcast1_ssm1} = "Recv: HUT0 -> SSM1, MLDv1 Report (SSM1)";
$pktdesc{MLDv1R_hut0l_ssmcast2_ssm2} = "Recv: HUT0 -> SSM2, MLDv1 Report (SSM2)";
$pktdesc{MLDv1Q_tr1l_ssmcast1_ssm1} = "Send: TR1 -> SSM1, MLDv1 Query (SSM1)";
$pktdesc{MLDv1D_hut0l_ssmcast1_ssm1} = "Recv: HUT0 -> SSM1, MLDv1 Done (SSM1)";

# Execute
for ($stp = 0; $T_SEQ{$stp}; $stp++) {
	no strict 'refs';
	$rtn = &{$T_SEQ{$stp}{func}}($stp);
	if ($rtn != $RES_OK) {
		last;
	}
}

#------------------------------------------------------------------------------
vLog2("Complement Judgement");
#------------------------------------------------------------------------------
$wk = JudgeCommon();
if (($wk != $RES_OK) && ($rtn == $RES_OK)) {
	$rtn = $wk;
}

#------------------------------------------------------------------------------
vLog1("Check: Number of MLDv1 Report in Step 5.");
#------------------------------------------------------------------------------
$wk = JudgeStackMsgIDandNum("L0R1", 1, "MLDv1R_hut0l_hut0s_hut0s", "MLDv1R_hut0l_ssmcast1_ssm1");
if (($wk != $RES_OK) && ($rtn == $RES_OK)) {
	$rtn = $wk;
}

TERM:
#------------------------------------------------------------------------------
vLog2("Termination");
#------------------------------------------------------------------------------
# 
Term($rtn);

###############################################################################
__END__


=head1 Test Label

=begin html
MLD.7.2: MLDv1 message<BR>
Part A: MLDv1 Compatibility mode

=end html

=head1 Purpose

=begin html
To verify that HUT in MLDv1 compatible mode state treats multicast of the SSM range.

=end html

=head1 References

=begin html
RFC4604 2.2.2.  IGMPv3 and MLDv2 Reports<BR>

=cut
<PRE>
   An SSM-aware host operating according to [IGMPv3, MLDv2] could send
   an IGMPv1, IGMPv2, or MLDv1 report for an SSM address when it is
   operating in "older-version compatibility mode."
   
   [IGMPv3] and [MLDv2] specify that a host MAY allow an older-version
   report to suppress its own IGMPv3 or MLDv2 Membership Record.  An
   SSM-aware host, however, MUST NOT allow its report to be suppressed
   in this situation (MODIFICATION). 
</PRE>

=pod

=end html

=begin html
RFC4604 2.2.3.  IGMPv1 Queries, IGMPv2 and MLDv1 General Queries<BR>

=cut
<PRE>
   A host SHOULD log an error if it receives an IGMPv1, IGMPv2, or MLDv1
   query for an SSM address (MODIFICATION).
</PRE>

=pod

=end html

=begin html
RFC4604 2.2.4.  IGMPv2 Leave and MLDv1 Done<BR>

=cut
<PRE>
   IGMP Leave and MLD Done messages are not processed by hosts.  IGMPv2
   Leave and MLDv1 Done messages should not be sent for an SSM address,
   unless the sending host has reverted to older-version compatibility
   mode, with all the caveats described above.
</PRE>

=pod

=end html

=begin html
RFC4604 2.2.5.  IGMPv2 and MLDv1 Group Specific Query<BR>

=cut
<PRE>
   If a host receives an IGMPv2 or MLDv1 Group Specific Query for an
   address in any configured source-specific range, it should process
   the query normally, as per [IGMPv3, MLDv2], even if the group queried
   is a source-specific destination address.  The transmission of such a
   query likely indicates either that the sending router is not
   compliant with this document or that it is not configured with the
   same SSM address range(s) as the receiving host.  A host SHOULD log
   an error in this case (MODIFICATION).
</PRE>

=pod

=end html

=begin html
RFC2710 4.  Protocol Description<BR>

=cut
<PRE>
   When a node ceases to listen to a multicast address on an interface,
   it SHOULD send a single Done message to the link-scope all-routers
   multicast address (FF02::2), carrying in its Multicast Address field
   the address to which it is ceasing to listen.
</PRE>

=pod

=end html

=head1 Discussion

=begin html
None

=end html

=head1 Test Requirement

=begin html
None

=end html

=head1 Test Setup

=begin html
<UL><LI><B><FONT SIZE="+1">Common Topology</FONT></B></UL>
<PRE><FONT SIZE="+1">
   HUT
    |(I/F: Link0)
    |
   -+-------+-------+-------+-------+---- Network 0
            |       |       |       |
           TR1     TR2     TR3     TN1
</FONT></PRE>
<BLOCKQUOTE>
<TABLE BORDER>
<TR><TD><TT>ID</TT></TD>
    <TD><TT>attibute</TT></TD>
    <TD><TT>address, prefix</TT></TD>
    <TD><TT>memo</TT></TD></TR>
<TR><TD><TT>Network 0</TT></TD>
    <TD><TT>prefix</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>I/F Link0 is connected.</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:01</TT></TD>
    <TD ROWSPAN="3"><TT>Lower IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:1</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:1</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR2</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:02</TT></TD>
    <TD ROWSPAN="3"><TT>Middle IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:2</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:2</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR3</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:03</TT></TD>
    <TD ROWSPAN="3"><TT>Higher IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:3</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:3</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TN1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:11</TT></TD>
    <TD ROWSPAN="3"><TT>&nbsp;</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:11</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:11</TT></TD></TR>
</TABLE></BLOCKQUOTE>
<UL><LI><B><FONT SIZE="+1">Common Test Setup</FONT></B>
    <OL><LI>Configure HUT to have:
        <UL><LI>Robustness Variable of 2
            <LI>Query Interval of 125
            <LI>Query Response Interval of 10 seconds
            <LI>Unsolicited Report Interval of 1 second</UL></OL><BR>
    <LI><B><FONT SIZE="+1">Common Test Cleanup</FONT></B>
    <OL><LI>Return all timers and variables to their defaults values.
        <LI>Stop any listening.  HUT does not listen to any multicast other than a solicited-node multicast address of an address assigned to the interface.</OL></UL>

=end html

=head1 Procedure

=begin html
<PRE>
Step 1. Enable MLDv2 on the HUT.
Step 2. Call ListenerAPI (S1, I1, SSM1, INCLUDE, {S1}) on the HUT.
Step 3. Observe the packets on all networks.
Step 4. TR1 transmits MLDv1 General Query message A.
    -----
    IPv6 Header
        IPv6 Hop Limit                  = 1
        IPv6 Source Address             = TR1 Link-local Address
        IPv6 Destination Address        = All Nodes Address
    Hop-by-Hop Options Header
        Router Alert Option
    ICMPv6 Header (MLD Query)
        Maximum Response Code           = 10000
        Multicast Address               = ::
    -----
Step 5. Observe the packets on all networks.
Step 6. Call ListenerAPI (S2, I1, SSM2, INCLUDE, {S1}) on the HUT.
Step 7. Observe the packets on all networks.
Step 8. TR1 transmits MLDv1 Multicast Address Specific Query B for SSM1.
    -----
    IPv6 Header
        IPv6 Hop Limit                  = 1
        IPv6 Source Address             = TR1 Link-local Address
        IPv6 Destination Address        = SSM1
    Hop-by-Hop Options Header
        Router Alert Option
    ICMPv6 Header (MLD Query)
        Maximum Response Code           = 10000
        Multicast Address               = SSM1
    -----
Step 9. Observe the packets on all networks.
Step 10. Call ListenerAPI (S1, I1, SSM1, INCLUDE, {NULL}) on the HUT.
Step 11. Observe the packets on all networks.
</PRE>

=end html

=head1 Observable Results

=begin html
<PRE>
Step 3: The HUT must transmit 2 MLDv2 Report message with Multicast Address Record ALLOW (S1) for SSM1.
Step 5: The HUT must transmit MLDv1 Report message for HUT solicited-node multicast.
        And The HUT must transmit MLDv1 Report message for SSM1.
Step 7: The HUT must transmit 2 MLDv1 Report messages for SSM2.
Step 9: The HUT must transmit MLDv1 Report message for SSM1.
Step 11: The HUT must transmit a single MLDv1 Done message for SSM1.
<BR>
   HUT     TR1     TR2     TR3     TN1
    |       |       |       |       |
    |       |       |       |       | 1. Enable MLDv2 on the HUT.
    |       |       |       |       | 2. Call ListenerAPI (S1, I1, SSM1, INCLUDE, {S1}) on the HUT.
    |       |       |       |       | 3. Observe the packets on all networks.
    |------------------------------>|    HUT transmits ALLOW (SSM1,{S1}), [RV] times, [URI] second(s)
    |<------|       |       |       | 4. TR1 transmits MLDv1 General Query message A.
    |       |       |       |       | 5. Observe the packets on all networks.
    |------------------------------>|    HUT transmits MLDv1 Report for HUT0 solicited-node multicast
    |------------------------------>|    HUT transmits MLDv1 Report for SSM1
    |       |       |       |       | 6. Call ListenerAPI (S2, I1, SSM2, INCLUDE, {S1}) on the HUT.
    |       |       |       |       | 7. Observe the packets on all networks.
    |------------------------------>|    HUT transmits MLDv1 Report for SSM2, [RV] times, [URI] second(s)
    |<------|       |       |       | 8. TR1 transmits MLDv1 Multicast Address Specific Query B for SSM1.
    |       |       |       |       | 9. Observe the packets on all networks.
    |------------------------------>|    HUT transmits MLDv1 Report for SSM1
    |       |       |       |       | 10. Call ListenerAPI (S1, I1, SSM1, INCLUDE, {NULL}) on the HUT.
    |       |       |       |       | 11. Observe the packets on all networks.
    |------------------------------>|     HUT transmits MLDv1 Done for M1
    |       |       |       |       |
</PRE>

=end html

=head1 Possible Problems

=begin html
None

=end html
