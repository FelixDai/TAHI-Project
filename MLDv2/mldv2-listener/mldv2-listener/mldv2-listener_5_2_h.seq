#!/usr/bin/perl
# 
# Copyright (C) IPv6 Promotion Council, NTT Advanced Technology Corporation
# (NTT-AT), Yokogwa Electoric Corporation and YASKAWA INFORMATION SYSTEMS
# Corporation All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with
# or without modification, are permitted provided that the following
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which
# is related to this software (hereinafter referred to as "project") nor
# the names of the contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
# notification to the copyrighters. However, using this software for the
# purpose of testing or evaluating any products including merchantable
# products may be permitted without any notification to the copyrighters.
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.
# 
###############################################################################
BEGIN {}
END   {}

#------------------------------------------------------------------------------
# Include
#------------------------------------------------------------------------------
# Include Module
use strict;
use warnings;
use V6evalTool;
use MLDv2L;

#------------------------------------------------------------------------------
vLog2("Setup");
#------------------------------------------------------------------------------
# Variable
my $stp = 0;
my $rtn;
my $wk;

# Requirement configuration
%T_REQ = (
	SI_SRCLST_INCLUDE_UNDER45 => 0,
	SI_SRCLST_INCLUDE_UNDER90 => 0,
);

# Specification configuration
%T_CONF = ();

# Topology
@T_LINK = ("Link0");
@T_NODE = ("TR1");

# Setup
$rtn = Setup();
if ($rtn != $RES_OK) {
	goto TERM;
}

#------------------------------------------------------------------------------
vLog2("Procedure");
#------------------------------------------------------------------------------
# Sequence
%T_SEQ = (
	$stp++ => {
		caption => [ "Step 0. Configure on the HUT." ],
		func    => "ConfProc",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 36. Enable MLDv2 on the HUT." ],
		func    => "EnableProc",
		status  => 0,
	},
	$stp++ => {
		func    => $CONF_DATA{FUNC_ENABLE_REPORT} ? "RecvProc" : "BaseProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{RV},
		msgs    => [ "MLDv2R_hut0l_mld2r_r1_t4hut0sn0" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 37. Call ListenerAPI (S1, I1, M1, EXCLUDE, {NULL}) on the HUT." ],
		func    => "ListenerProc",
		socket  => "S1",
		if      => "IF0",
		mcast   => "MCAST1",
		filter  => "EXCLUDE",
		srcnum  => 0,
		source  => "NULL",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 38. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{RV},
		msgs    => [ "MLDv2R_hut0l_mld2r_r1_t4m1n0" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 39. Call ListenerAPI (S1, I1, M1, INCLUDE, {S1, S2, S3 ... and S90}) on the HUT." ],
		func    => "ListenerProc",
		socket  => "S1",
		if      => "IF0",
		mcast   => "MCAST1",
		filter  => "INCLUDE",
		srcnum  => 90,
		source  => "S1_90",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 40. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		# count   => $CONF_DATA{RV},
		count   => $CONF_DATA{RV} * 2,
		# msgs    => [ "MLDv2R_hut0l_mld2r_any" ],
		# msgs    => [ "MLDv2R_hut0l_mld2r_r1_t3m1n89" ],
		msgs    => [ "MLDv2R_hut0l_mld2r_r1_any" ],
		status  => 0,
		stack   => "L0R1",
	},
	$stp++ => {
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} + $CONF_DATA{CHECK_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2R_any_any" ],
		status  => 1,
	},
);

# local packet
$pktdesc{MLDv2R_hut0l_mld2r_r1_t3m1n89} = "Send: HUT0 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M1,{89 sources})";

# Execute
for ($stp = 0; $T_SEQ{$stp}; $stp++) {
	no strict 'refs';
	$rtn = &{$T_SEQ{$stp}{func}}($stp);
	if ($rtn != $RES_OK) {
		last;
	}
}

#------------------------------------------------------------------------------
vLog2("Complement Judgement");
#------------------------------------------------------------------------------
$wk = JudgeCommon();
if (($wk != $RES_OK) && ($rtn == $RES_OK)) {
	$rtn = $wk;
}

#------------------------------------------------------------------------------
vLog1("Check: Multicast source addresses and those counts of Multicast Address Records of Reports in Step 40.");
#------------------------------------------------------------------------------
# $wk = JudgeSplitReport("L0R1", "$CONF_DATA{MCAST1}", 3, "S1_90", $CONF_DATA{RV}, 89);
$wk = JudgeSplitReport("L0R1", "$CONF_DATA{MCAST1}", 3, "S1_90", $CONF_DATA{RV}, 90);
if (($wk != $RES_OK) && ($rtn == $RES_OK)) {
	$rtn = $wk;
}

TERM:
#------------------------------------------------------------------------------
vLog2("Termination");
#------------------------------------------------------------------------------
# 
Term($rtn);

###############################################################################
__END__


=head1 Test Label

=begin html
MLD.5.2: MTU - MLDv2 Report with State Change Record<BR>
Part H: TO_IN

=end html

=head1 Purpose

=begin html
To verify that the MLDv2 Listener splits the state change report of big source list according to an MTU limit.

=end html

=head1 References

=begin html
RFC3810 5.2.15.  Multicast Listener Report Size<BR>

=cut
<PRE>
   If the set of Multicast Address Records required in a Report does not
   fit within the size limit of a single Report message (as determined
   by the MTU of the link on which it will be sent), the Multicast
   Address Records are sent in as many Report messages as needed to
   report the entire set.
   
   If a single Multicast Address Record contains so many source
   addresses that it does not fit within the size limit of a single
   Report message, then:
   
   o  if its Type is not IS_EX or TO_EX, it is split into multiple
      Multicast Address Records; each such record contains a different
      subset of the source addresses, and is sent in a separate Report.
      
   o  if its Type is IS_EX or TO_EX, a single Multicast Address Record
      is sent, with as many source addresses as can fit; the remaining
      source addresses are not reported.  Although the choice of which
      sources to report is arbitrary, it is preferable to report the
      same set of sources in each subsequent report, rather than
      reporting different sources each time.
</PRE>

=pod

=end html

=begin html
RFC3810 6.1.  Action on Change of Per-Interface State<BR>

=cut
<PRE>
   Old State         New State         State Change Record Sent
   ---------         ---------         ------------------------
   EXCLUDE (A)       INCLUDE (B)       TO_IN (B)
   
   Record   Sources included
   ------   ----------------
   TO_IN    All in the current per-interface state that must be
            forwarded
</PRE>

=pod

=end html

=begin html
RFC3810 6.3.  Action on Timer Expiration<BR>

=cut
<PRE>
                    Multiple Current State Records are packed into
      individual Report messages, to the extent possible.
</PRE>

=pod

=end html

=head1 Discussion

=begin html
TO_IN as well as TO_EX.  If Type is TO_IN, a single Multicast Address Record is sent, with as many source addresses as can fit.

=end html

=head1 Test Requirement

=begin html
The service interface of implementation can specify 90 sources as the source list in INCLUDE mode.

=end html

=head1 Test Setup

=begin html
<UL><LI><B><FONT SIZE="+1">Common Topology</FONT></B></UL>
<PRE><FONT SIZE="+1">
   HUT
    |(I/F: Link0)
    |
   -+-------+-------+-------+-------+---- Network 0
            |       |       |       |
           TR1     TR2     TR3     TN1
</FONT></PRE>
<BLOCKQUOTE>
<TABLE BORDER>
<TR><TD><TT>ID</TT></TD>
    <TD><TT>attibute</TT></TD>
    <TD><TT>address, prefix</TT></TD>
    <TD><TT>memo</TT></TD></TR>
<TR><TD><TT>Network 0</TT></TD>
    <TD><TT>prefix</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>I/F Link0 is connected.</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:01</TT></TD>
    <TD ROWSPAN="3"><TT>Lower IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:1</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:1</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR2</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:02</TT></TD>
    <TD ROWSPAN="3"><TT>Middle IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:2</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:2</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR3</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:03</TT></TD>
    <TD ROWSPAN="3"><TT>Higher IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:3</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:3</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TN1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:11</TT></TD>
    <TD ROWSPAN="3"><TT>&nbsp;</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:11</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:11</TT></TD></TR>
</TABLE></BLOCKQUOTE>
<UL><LI><B><FONT SIZE="+1">Common Test Setup</FONT></B>
    <OL><LI>Configure HUT to have:
        <UL><LI>Robustness Variable of 2
            <LI>Query Interval of 125
            <LI>Query Response Interval of 10 seconds
            <LI>Unsolicited Report Interval of 1 second</UL></OL><BR>
    <LI><B><FONT SIZE="+1">Common Test Cleanup</FONT></B>
    <OL><LI>Return all timers and variables to their defaults values.
        <LI>Stop any listening.  HUT does not listen to any multicast other than a solicited-node multicast address of an address assigned to the interface.</OL></UL>

=end html

=head1 Procedure

=begin html
<PRE>
Step 36. Enable MLDv2 on the HUT.
Step 37. Call ListenerAPI (S1, I1, M1, EXCLUDE, {NULL}) on the HUT.
Step 38. Observe the packets on all networks.
Step 39. Call ListenerAPI (S1, I1, M1, INCLUDE, {S1, S2, S3 ... and S90}) on the HUT.
Step 40. Observe the packets on all networks.
</PRE>

=end html

=head1 Observable Results

=begin html
<PRE>
Step 38: The HUT must transmit 2 MLDv2 Report messages with Multicast Address Record TO_EX (NULL) for M1.
Step 40: The HUT must transmit 2 MLDv2 Report messages with Multicast Address Record TO_INCLUDE (89 sources) for HUT solicited-node multicast.
<BR>
   HUT     TR1     TR2     TR3     TN1
    |       |       |       |       |
    |       |       |       |       | 36. Enable MLDv2 on the HUT.
    |       |       |       |       | 37. Call ListenerAPI (S1, I1, M1, EXCLUDE, {NULL}) on the HUT.
    |       |       |       |       | 38. Observe the packets on all networks.
    |------------------------------>|     HUT transmits TO_EX (M1,{NULL}), [RV] times, [URI] second(s)
    |       |       |       |       | 39. Call ListenerAPI (S1, I1, M1, INCLUDE, {S1, S2, S3 ... and S90}) on the HUT.
    |       |       |       |       | 40. Observe the packets on all networks.
    |------------------------------>|     HUT transmits TO_IN (M1,{89 sources}), [RV] times, [URI] second(s)
    |       |       |       |       |
</PRE>

=end html

=head1 Possible Problems

=begin html
By the limit of source list on the HUT, some of MTU tests may be unnecessary.
If HUT has the limit less than 90, Part A, B, D, E, F and H does not test.
It HUT has the limit less than 45, no test.

=end html
