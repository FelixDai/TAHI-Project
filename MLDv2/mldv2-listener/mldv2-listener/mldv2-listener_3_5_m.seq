#!/usr/bin/perl
# 
# Copyright (C) IPv6 Promotion Council, NTT Advanced Technology Corporation
# (NTT-AT), Yokogwa Electoric Corporation and YASKAWA INFORMATION SYSTEMS
# Corporation All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with
# or without modification, are permitted provided that the following
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which
# is related to this software (hereinafter referred to as "project") nor
# the names of the contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
# notification to the copyrighters. However, using this software for the
# purpose of testing or evaluating any products including merchantable
# products may be permitted without any notification to the copyrighters.
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.
# 
###############################################################################
BEGIN {}
END   {}

#------------------------------------------------------------------------------
# Include
#------------------------------------------------------------------------------
# Include Module
use strict;
use warnings;
use V6evalTool;
use MLDv2L;

#------------------------------------------------------------------------------
vLog2("Setup");
#------------------------------------------------------------------------------
# Variable
my $stp = 0;
my $rtn;
my $wk;

# Requirement configuration
%T_REQ = ();

# Specification configuration
%T_CONF = ();

# Topology
@T_LINK = ("Link0");
@T_NODE = ("TR1");

# Setup
$rtn = Setup();
if ($rtn != $RES_OK) {
	goto TERM;
}

#------------------------------------------------------------------------------
vLog2("Procedure");
#------------------------------------------------------------------------------
# Sequence
%T_SEQ = (
	$stp++ => {
		caption => [ "Step 0. Configure on the HUT." ],
		func    => "ConfProc",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 77. Enable MLDv2 on the HUT." ],
		func    => "EnableProc",
		status  => 0,
	},
	$stp++ => {
		func    => $CONF_DATA{FUNC_ENABLE_REPORT} ? "RecvProc" : "BaseProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{RV},
		msgs    => [ "MLDv2R_hut0l_mld2r_r1_t4hut0sn0" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 78. Call ListenerAPI (S1, I1, M1, EXCLUDE, {S1, S3}) on the HUT." ],
		func    => "ListenerProc",
		socket  => "S1",
		if      => "IF0",
		mcast   => "MCAST1",
		filter  => "EXCLUDE",
		srcnum  => 2,
		source  => "S13",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 79. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{RV},
		msgs    => [ "MLDv2R_hut0l_mld2r_r1_t4m1n2s13" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 80. Call ListenerAPI (S1, I1, M1, EXCLUDE, {S2,S3}) on the HUT." ],
		func    => "ListenerProc",
		socket  => "S1",
		if      => "IF0",
		mcast   => "MCAST1",
		filter  => "EXCLUDE",
		srcnum  => 2,
		source  => "S23",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 82. Call ListenerAPI (S1, I1, M1, INCLUDE, {NULL}) before retransmission on the HUT." ],
		func    => "ListenerProc",
		socket  => "S1",
		if      => "IF0",
		mcast   => "MCAST1",
		filter  => "INCLUDE",
		srcnum  => 0,
		source  => "NULL",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 81. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2R_hut0l_mld2r_r2_t5m1n1s1_t6m1n1s2" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 83. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{RV},
		msgs    => [ "MLDv2R_hut0l_mld2r_r1_t3m1n0" ],
		status  => 0,
	},
	$stp++ => {
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} + $CONF_DATA{CHECK_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2R_any_any" ],
		status  => 1,
	},
);

# local packet
$pktdesc{MLDv2R_hut0l_mld2r_r1_t4m1n2s13} = "Send: HUT0 -> All MLDv2-capable routers, MLDv2 Report TO_EX(M1,{S1,S3})";
$pktdesc{MLDv2R_hut0l_mld2r_r2_t5m1n1s1_t6m1n1s2} = "Send: HUT0 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S1}) and BLOCK(M1,{S2})";

# RETRY
my $rcnt = 0;
RETRY:

# Execute
for ($stp = 0; $T_SEQ{$stp}; $stp++) {
	no strict 'refs';
	$rtn = &{$T_SEQ{$stp}{func}}($stp);
	if ($rtn != $RES_OK) {
		last;
	}
}

#------------------------------------------------------------------------------
vLog2("Complement Judgement");
#------------------------------------------------------------------------------
$wk = JudgeCommon();
if (($wk != $RES_OK) && ($rtn == $RES_OK)) {
	$rtn = $wk;
}

# RETRY
if (($rtn != $RES_OK) && ($rcnt < $CONF_DATA{RETRY_COUNT})) {
	vLog2("RETRY");
	vLog2("Procedure");
	$rcnt ++;
	goto RETRY;
}

TERM:
#------------------------------------------------------------------------------
vLog2("Termination");
#------------------------------------------------------------------------------
# 
Term($rtn);

###############################################################################
__END__


=head1 Test Label

=begin html
MLD.3.5: Listening State Update before Retransmission by Single Socket<BR>
Part M: EXCLUDE (A) -> EXCLUDE (B) -> INCLUDE (NULL)

=end html

=head1 Purpose

=begin html
To verify that MLDv2 Listener maintain retransmission state for the multicast address until the [Robustness Variable] State Change Report have been sent.

=end html

=head1 References

=begin html
RFC3810 6.1.  Action on Change of Per-Interface State<BR>

=cut
<PRE>
   If more changes to the same per-interface state entry occur before
   all the retransmissions of the State Change Report for the first
   change have been completed, each such additional change triggers the
   immediate transmission of a new State Change Report.

   Each time a source is included in the difference report calculated
   above, retransmission state for that source needs to be maintained
   until [Robustness Variable] State Change Reports have been sent by
   the node.
                                           When a source is included in
   the list, its counter is set to [Robustness Variable].  Each time a
   State Change Report is sent the counter is decreased by one unit.
   When the counter reaches zero, the source is deleted from the
   Retransmission List for that multicast address.

   If the per-interface listening change that triggers the new report is
   a filter mode change, then the next n[Robustness Variable] State
   Change Reports will include a Filter Mode Change Record.

                                                When the filter mode
   changes, the counter is set to [Robustness Variable].  Each time a
   State Change Report is sent the counter is decreased by one unit.
   When the counter reaches zero, i.e., [Robustness Variable] State
   Change Reports with Filter Mode Change Records have been transmitted
   after the last filter mode change, and if source list changes have
   resulted in additional reports being scheduled, then the next State
   Change Report will include Source List Change Records.
</PRE>

=pod

=end html

=begin html
RFC3810 6.3.  Action on Timer Expiration<BR>

=cut
<PRE>
   4. If the expired timer is a Retransmission Timer for a multicast
      address (i.e., there is a pending State Change Report for that
      multicast address), the contents of the report are determined as
      follows.  If the report should contain a Filter Mode Change
      Record, i.e., the Filter Mode Retransmission Counter for that
      multicast address has a value higher than zero, then, if the
      current filter mode of the interface is INCLUDE, a TO_IN record is
      included in the report; otherwise a TO_EX record is included.  In
      both cases, the Filter Mode Retransmission Counter for that
      multicast address is decremented by one unit after the
      transmission of the report.

      If instead the report should contain Source List Change Records,
      i.e., the Filter Mode Retransmission Counter for that multicast
      address is zero, an ALLOW and a BLOCK record is included.  The
      contents of these records are built according to the table below:
</PRE>

=pod

=end html

=head1 Discussion

=begin html
None

=end html

=head1 Test Requirement

=begin html
None

=end html

=head1 Test Setup

=begin html
<UL><LI><B><FONT SIZE="+1">Common Topology</FONT></B></UL>
<PRE><FONT SIZE="+1">
   HUT
    |(I/F: Link0)
    |
   -+-------+-------+-------+-------+---- Network 0
            |       |       |       |
           TR1     TR2     TR3     TN1
</FONT></PRE>
<BLOCKQUOTE>
<TABLE BORDER>
<TR><TD><TT>ID</TT></TD>
    <TD><TT>attibute</TT></TD>
    <TD><TT>address, prefix</TT></TD>
    <TD><TT>memo</TT></TD></TR>
<TR><TD><TT>Network 0</TT></TD>
    <TD><TT>prefix</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>I/F Link0 is connected.</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:01</TT></TD>
    <TD ROWSPAN="3"><TT>Lower IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:1</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:1</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR2</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:02</TT></TD>
    <TD ROWSPAN="3"><TT>Middle IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:2</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:2</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR3</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:03</TT></TD>
    <TD ROWSPAN="3"><TT>Higher IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:3</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:3</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TN1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:11</TT></TD>
    <TD ROWSPAN="3"><TT>&nbsp;</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:11</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:11</TT></TD></TR>
</TABLE></BLOCKQUOTE>
<UL><LI><B><FONT SIZE="+1">Common Test Setup</FONT></B>
    <OL><LI>Configure HUT to have:
        <UL><LI>Robustness Variable of 2
            <LI>Query Interval of 125
            <LI>Query Response Interval of 10 seconds
            <LI>Unsolicited Report Interval of 1 second</UL></OL><BR>
    <LI><B><FONT SIZE="+1">Common Test Cleanup</FONT></B>
    <OL><LI>Return all timers and variables to their defaults values.
        <LI>Stop any listening.  HUT does not listen to any multicast other than a solicited-node multicast address of an address assigned to the interface.</OL></UL>

=end html

=head1 Procedure

=begin html
<PRE>
Step 77. Enable MLDv2 on the HUT.
Step 78. Call ListenerAPI (S1, I1, M1, EXCLUDE, {S1, S3}) on the HUT.
Step 79. Observe the packets on all networks.
Step 80. Call ListenerAPI (S1, I1, M1, EXCLUDE, {S2, S3}) on the HUT.
Step 81. Observe the packets on all networks.
Step 82. Call ListenerAPI (S1, I1, M1, INCLUDE, {NULL}) before retransmission on the HUT.
Step 83. Observe the packets on all networks.
</PRE>

=end html

=head1 Observable Results

=begin html
<PRE>
Step 79: The HUT must transmit 2 MLDv2 Report messages with Multicast Address Record TO_EX (S1, S3) for M1.
Step 81: The HUT must transmit MLDv2 Report message with 2 Multicast Address Record ALLOW (S1) for M1 and BLOCK (S2) for M1.
Step 83: The HUT must transmit 2 MLDv2 Report messages with Multicast Address Record TO_IN (NULL) for M1.
<BR>
   HUT     TR1     TR2     TR3     TN1
    |       |       |       |       |
    |       |       |       |       | 77. Enable MLDv2 on the HUT.
    |       |       |       |       | 78. Call ListenerAPI (S1, I1, M1, EXCLUDE, {S1, S3}) on the HUT.
    |       |       |       |       | 79. Observe the packets on all networks.
    |------------------------------>|     HUT transmits TO_EX (M1,{S1,S3}), [RV] times, [URI] second(s)
    |       |       |       |       | 80. Call ListenerAPI (S1, I1, M1, EXCLUDE, {S2, S3}) on the HUT.
    |       |       |       |       | 81. Observe the packets on all networks.
    |------------------------------>|     HUT transmits ALLOW (M1,{S1}) and BLOCK (M1,{S2})
    |       |       |       |       | 82. Call ListenerAPI (S1, I1, M1, INCLUDE, {NULL}) before retransmission on the HUT.
    |       |       |       |       | 83. Observe the packets on all networks.
    |------------------------------>|     HUT transmits TO_IN (M1,{NULL}), [RV] times, [URI] second(s)
    |       |       |       |       |
</PRE>

=end html

=head1 Possible Problems

=begin html
This test has a timing matter. Before implementation retransmits the MLD report by the 1st Service Interface, you have to make the 2nd Service Interface accepted in implementation. It may be possible by extending Unsolicited Report Interval in the implementation. Or, the result will be obtained by trying several times.

=end html
