#!/usr/bin/perl
# 
# Copyright (C) IPv6 Promotion Council, NTT Advanced Technology Corporation
# (NTT-AT), Yokogwa Electoric Corporation and YASKAWA INFORMATION SYSTEMS
# Corporation All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with
# or without modification, are permitted provided that the following
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which
# is related to this software (hereinafter referred to as "project") nor
# the names of the contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
# notification to the copyrighters. However, using this software for the
# purpose of testing or evaluating any products including merchantable
# products may be permitted without any notification to the copyrighters.
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.
# 
###############################################################################
BEGIN {}
END   {}

#------------------------------------------------------------------------------
# Include
#------------------------------------------------------------------------------
# Include Module
use strict;
use warnings;
use V6evalTool;
use MLDv2L;

#------------------------------------------------------------------------------
vLog2("Setup");
#------------------------------------------------------------------------------
# Variable
my $stp = 0;
my $rtn;
my $wk;

# Requirement configuration
%T_REQ = ();

# Specification configuration
%T_CONF = ();

# Topology
@T_LINK = ("Link0");
@T_NODE = ("TR1");

# Setup
$rtn = Setup();
if ($rtn != $RES_OK) {
	goto TERM;
}

#------------------------------------------------------------------------------
vLog2("Procedure");
#------------------------------------------------------------------------------
# Sequence
%T_SEQ = (
	$stp++ => {
		caption => [ "Step 0. Configure on the HUT." ],
		func    => "ConfProc",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 61. Enable MLDv2 on the HUT." ],
		func    => "EnableProc",
		status  => 0,
	},
	$stp++ => {
		func    => $CONF_DATA{FUNC_ENABLE_REPORT} ? "RecvProc" : "BaseProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{RV},
		msgs    => [ "MLDv2R_hut0l_mld2r_r1_t4hut0sn0" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 62. Call ListenerAPI (S1, I1, M1, INCLUDE, {S1, S3}) on the HUT." ],
		func    => "ListenerProc",
		socket  => "S1",
		if      => "IF0",
		mcast   => "MCAST1",
		filter  => "INCLUDE",
		srcnum  => 2,
		source  => "S13",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 63. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{RV},
		msgs    => [ "MLDv2R_hut0l_mld2r_r1_t5m1n2s13" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 64. TR1 transmits MLDv2 Multicast Address and Source Specific Query message C for M1 (S1, S2, S3) with Maximum Response Code of 10000." ],
		func    => "SendProc",
		link    => "Link0",
		msgs    => [ "MLDv2Q_tr1l_mcast1_m1n3s123_mrc10000" ],
		status  => 0,
		stack   => "L0S1",
	},
	$stp++ => {
		caption => [ "Step 65. Call ListenerAPI (S1, I1, M1, EXCLUDE, {S2, S3}) on the HUT." ],
		func    => "ListenerProc",
		socket  => "S1",
		if      => "IF0",
		mcast   => "MCAST1",
		filter  => "EXCLUDE",
		srcnum  => 2,
		source  => "S23",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 66. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{RV},
		msgs    => [ "MLDv2R_hut0l_mld2r_r1_t4m1n2s23" ],
		status  => 0,
	},
	$stp++ => {
		func    => "RecvProc",
		link    => "Link0",
		stime   => [ "L0S1", 0 ],
		wtime   => [ (10000 / 1000) + $CONF_DATA{MARGIN_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2R_hut0l_mld2r_r1_t1m1n1s1" ],
		status  => 0,
	},
	$stp++ => {
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{URI} + $CONF_DATA{MARGIN_TIME} + $CONF_DATA{CHECK_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2R_any_any" ],
		status  => 1,
	},
);

# local packet
$pktdesc{MLDv2R_hut0l_mld2r_r1_t5m1n2s13} = "Send: HUT0 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S1,S3})";
$pktdesc{MLDv2Q_tr1l_mcast1_m1n3s123_mrc10000} = "Send: TR1 -> M1, MLDv2 Query (M1,{S1,S2,S3}) with Max Response Code of 10000.";
$pktdesc{MLDv2R_hut0l_mld2r_r1_t4m1n2s23} = "Send: HUT0 -> All MLDv2-capable routers, MLDv2 Report TO_EX(M1,{S2,S3})";

# RETRY
my $rcnt = 0;
RETRY:

# Execute
for ($stp = 0; $T_SEQ{$stp}; $stp++) {
	no strict 'refs';
	$rtn = &{$T_SEQ{$stp}{func}}($stp);
	if ($rtn != $RES_OK) {
		last;
	}
}

#------------------------------------------------------------------------------
vLog2("Complement Judgement");
#------------------------------------------------------------------------------
$wk = JudgeCommon();
if (($wk != $RES_OK) && ($rtn == $RES_OK)) {
	$rtn = $wk;
}

# RETRY
if (($rtn != $RES_OK) && ($rcnt < $CONF_DATA{RETRY_COUNT})) {
	vLog2("RETRY");
	vLog2("Procedure");
	$rcnt ++;
	goto RETRY;
}

TERM:
#------------------------------------------------------------------------------
vLog2("Termination");
#------------------------------------------------------------------------------
# 
Term($rtn);

###############################################################################
__END__


=head1 Test Label

=begin html
MLD.4.10: Listening State Change under MLDv2 Query Reception<BR>
Part L: Multicast Address and Source Specific Query and State Update INCLUDE (A) -> EXCLUDE (B)

=end html

=head1 Purpose

=begin html
To verify that the MLDv2 Listener replies an optimized report, when MLDv2 Query message reception and state change occur continuously.

=end html

=head1 References

=begin html
RFC3810 6.2.  Action on Reception of a Query<BR>

=cut
<PRE>
   When a new valid General Query arrives on an interface, the node
   checks whether it has any per-interface listening state record to
   report on, or not.  Similarly, when a new valid Multicast Address
   (and Source) Specific Query arrives on an interface, the node checks
   whether it has a per-interface listening state record that
   corresponds to the queried multicast address (and source), or not. If
   it does, a delay for a response is randomly selected in the range (0,
   [Maximum Response Delay]), where Maximum Response Delay is derived
   from the Maximum Response Code inserted in the received Query
   message.
</PRE>

=pod

=end html

=begin html
RFC3810 6.3.  Action on Timer Expiration<BR>

=cut
<PRE>
   1. If the expired timer is the Interface Timer (i.e., there is a
      pending response to a General Query), then one Current State
      Record is sent for each multicast address for which the specified
      interface has listening state, as described in section 4.2.  The
      Current State Record carries the multicast address and its
      associated filter mode (MODE_IS_INCLUDE or MODE_IS_EXCLUDE) and
      Source list.  Multiple Current State Records are packed into
      individual Report messages, to the extent possible.
      
   2. If the expired timer is a Multicast Address Timer and the list of
      recorded sources for that multicast address is empty (i.e., there
      is a pending response to a Multicast Address Specific Query), then
      if, and only if, the interface has listening state for that
      multicast address, a single Current State Record is sent for that
      address.  The Current State Record carries the multicast address
      and its associated filter mode (MODE_IS_INCLUDE or
      MODE_IS_EXCLUDE) and source list, if any.
      
   3. If the expired timer is a Multicast Address Timer and the list of
      recorded sources for that multicast address is non-empty (i.e.,
      there is a pending response to a Multicast Address and Source
      Specific Query), then if, and only if, the interface has listening
      state for that multicast address, the contents of the
      corresponding Current State Record are determined from the per-
      interface state and the pending response record, as specified in
      the following table:
      
                             set of sources in the
      per-interface state  pending response record  Current State Record
      -------------------  -----------------------  --------------------
       INCLUDE (A)                   B                IS_IN (A*B)
       
       EXCLUDE (A)                   B                IS_IN (B-A)
   
   If the resulting Current State Record has an empty set of source
   addresses, then no response is sent.
</PRE>

=pod

=end html

=head1 Discussion

=begin html
None

=end html

=head1 Test Requirement

=begin html
None

=end html

=head1 Test Setup

=begin html
<UL><LI><B><FONT SIZE="+1">Common Topology</FONT></B></UL>
<PRE><FONT SIZE="+1">
   HUT
    |(I/F: Link0)
    |
   -+-------+-------+-------+-------+---- Network 0
            |       |       |       |
           TR1     TR2     TR3     TN1
</FONT></PRE>
<BLOCKQUOTE>
<TABLE BORDER>
<TR><TD><TT>ID</TT></TD>
    <TD><TT>attibute</TT></TD>
    <TD><TT>address, prefix</TT></TD>
    <TD><TT>memo</TT></TD></TR>
<TR><TD><TT>Network 0</TT></TD>
    <TD><TT>prefix</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>I/F Link0 is connected.</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:01</TT></TD>
    <TD ROWSPAN="3"><TT>Lower IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:1</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:1</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR2</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:02</TT></TD>
    <TD ROWSPAN="3"><TT>Middle IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:2</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:2</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR3</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:03</TT></TD>
    <TD ROWSPAN="3"><TT>Higher IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:3</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:3</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TN1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:11</TT></TD>
    <TD ROWSPAN="3"><TT>&nbsp;</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:11</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:11</TT></TD></TR>
</TABLE></BLOCKQUOTE>
<UL><LI><B><FONT SIZE="+1">Common Test Setup</FONT></B>
    <OL><LI>Configure HUT to have:
        <UL><LI>Robustness Variable of 2
            <LI>Query Interval of 125
            <LI>Query Response Interval of 10 seconds
            <LI>Unsolicited Report Interval of 1 second</UL></OL><BR>
    <LI><B><FONT SIZE="+1">Common Test Cleanup</FONT></B>
    <OL><LI>Return all timers and variables to their defaults values.
        <LI>Stop any listening.  HUT does not listen to any multicast other than a solicited-node multicast address of an address assigned to the interface.</OL></UL>

=end html

=head1 Procedure

=begin html
<PRE>
Step 61. Enable MLDv2 on the HUT.
Step 62. Call ListenerAPI (S1, I1, M1, INCLUDE, {S1, S3}) on the HUT.
Step 63. Observe the packets on all networks.
Step 64. TR1 transmits MLDv2 Multicast Address and Source Specific Query message C for M1 (S1, S2, S3) with Maximum Response Code of 10000.
    -----
    IPv6 Header
        IPv6 Hop Limit                  = 1
        IPv6 Source Address             = TR1 Link-local Address
        IPv6 Destination Address        = M1
    Hop-by-Hop Options Header
        Router Alert Option
    ICMPv6 Header (MLD Query)
        Maximum Response Code           = 10000
        Multicast Address               = M1
        S Flag                          = 0
        QRV                             = 2
        QQIC                            = 125
        Number of Sources               = 3
        Source Address                  = S1
        Source Address                  = S2
        Source Address                  = S3
    -----
Step 65. Call ListenerAPI (S1, I1, M1, EXCLUDE, {S2, S3}) on the HUT.
Step 66. Observe the packets on all networks.
</PRE>

=end html

=head1 Observable Results

=begin html
<PRE>
Step 63: The HUT must transmit 2 MLDv2 Report messages with Multicast Address Record ALLOW (S1, S3) for M1.
Step 66: The HUT must transmit 2 MLDv2 Report messages with Multicast Address Record TO_EX (S2, S3) for M1.
         And the HUT must transmit MLDv2 Report message with Multicast Address Records IS_IN (S1) for M1 within 10 seconds from Step 64.
<BR>
   HUT     TR1     TR2     TR3     TN1
    |       |       |       |       |
    |       |       |       |       | 61. Enable MLDv2 on the HUT.
    |       |       |       |       | 62. Call ListenerAPI (S1, I1, M1, INCLUDE, {S1, S3}) on the HUT.
    |       |       |       |       | 63. Observe the packets on all networks.
    |------------------------------>|     HUT transmits ALLOW (M1,{S1,S3}), [RV] times, [URI] second(s)
    |<------|       |       |       | 64. TR1 transmits MLDv2 Multicast Address and Source Specific Query message C for M1 (S1, S2, S3) with Maximum Response Code of 10000.
    |       |       |       |       | 65. Call ListenerAPI (S1, I1, M1, EXCLUDE, {S2, S3}) on the HUT.
    |       |       |       |       | 66. Observe the packets on all networks.
    |------------------------------>|     HUT transmits TO_EX (M1,{S2,S3}), [RV] times, [URI] second(s)
    |------------------------------>|     HUT transmits IS_IN (M1,{S1})
    |       |       |       |       |
</PRE>

=end html

=head1 Possible Problems

=begin html
Since HUT decides on time to transmit each MLDv2 Report message at random, the expected result may not be obtained.  The expected result by several trials will be obtained.  Besides, probability may be raised by adjusting Maximum Response Code of MLDv2 Query message.

=end html
