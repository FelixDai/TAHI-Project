// 
// Copyright (C) IPv6 Promotion Council, NTT Advanced Technology Corporation
// (NTT-AT), Yokogwa Electoric Corporation and YASKAWA INFORMATION SYSTEMS
// Corporation All rights reserved.
// 
// Redistribution and use of this software in source and binary forms, with
// or without modification, are permitted provided that the following
// conditions and disclaimer are agreed and accepted by the user:
// 
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project which
// is related to this software (hereinafter referred to as "project") nor
// the names of the contributors may be used to endorse or promote products
// derived from this software without specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
// notification to the copyrighters. However, using this software for the
// purpose of testing or evaluating any products including merchantable
// products may be permitted without any notification to the copyrighters.
// 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
// THE POSSIBILITY OF SUCH DAMAGE.
// 
///////////////////////////////////////////////////////////////////////////////
//=============================================================================
// Include
//=============================================================================
#include "MLDv2L.def"

//-----------------------------------------------------------------------------
// HUT0 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S1,S4,S5,S7})
//-----------------------------------------------------------------------------
MLDv2_AddrRecord mld2_rcd_t5m1n4s1457 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_07;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s1475 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_07;
	SourceAddress       = MSRC_05;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s1547 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_07;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s1574 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_07;
	SourceAddress       = MSRC_04;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s1745 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_07;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_05;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s1754 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_07;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_04;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s4157 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_07;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s4175 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_07;
	SourceAddress       = MSRC_05;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s4517 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_07;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s4571 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_07;
	SourceAddress       = MSRC_01;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s4715 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_07;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_05;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s4751 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_07;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_01;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s5147 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_07;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s5174 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_07;
	SourceAddress       = MSRC_04;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s5417 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_07;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s5471 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_07;
	SourceAddress       = MSRC_01;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s5714 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_07;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_04;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s5741 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_07;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_01;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s7145 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_07;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_05;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s7154 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_07;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_04;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s7415 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_07;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_05;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s7451 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_07;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_01;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s7514 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_07;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_04;
}

MLDv2_AddrRecord mld2_rcd_t5m1n4s7541 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_07;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_01;
}

FEM_icmp6_mldv2report_exth(
	MLDv2R_hut0l_mld2r_r1_t5m1n4s1457,
	_HETHER_hut0_to_mld2r,
	{
		HopLimit        = HUT_MLDR_HOP;
		_SRC(HUT0_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_hut0l_mld2r_r1_t5m1n4s1457);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_hut0l_mld2r_r1_t5m1n4s1457);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = HUT_MLDv2R_CODE;
		Checksum                = HUT_MLDv2R_CHECKSUM;
		Reserved                = HUT_MLDv2R_RESERVED;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = oneof (mld2_rcd_t5m1n4s1457, mld2_rcd_t5m1n4s1475,
		                                 mld2_rcd_t5m1n4s1547, mld2_rcd_t5m1n4s1574,
		                                 mld2_rcd_t5m1n4s1745, mld2_rcd_t5m1n4s1754,
		                                 mld2_rcd_t5m1n4s4157, mld2_rcd_t5m1n4s4175,
		                                 mld2_rcd_t5m1n4s4517, mld2_rcd_t5m1n4s4571,
		                                 mld2_rcd_t5m1n4s4715, mld2_rcd_t5m1n4s4751,
		                                 mld2_rcd_t5m1n4s5147, mld2_rcd_t5m1n4s5174,
		                                 mld2_rcd_t5m1n4s5417, mld2_rcd_t5m1n4s5471,
		                                 mld2_rcd_t5m1n4s5714, mld2_rcd_t5m1n4s5741,
		                                 mld2_rcd_t5m1n4s7145, mld2_rcd_t5m1n4s7154,
		                                 mld2_rcd_t5m1n4s7415, mld2_rcd_t5m1n4s7451,
		                                 mld2_rcd_t5m1n4s7514, mld2_rcd_t5m1n4s7541);
	}
)

//-----------------------------------------------------------------------------
// HUT0 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S2,S6}) and BLOCK(M1,{S1,S5})
//-----------------------------------------------------------------------------
MLDv2_AddrRecord mld2_rcd_t5m1n2s26 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_06;
}

MLDv2_AddrRecord mld2_rcd_t5m1n2s62 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_06;
	SourceAddress       = MSRC_02;
}

MLDv2_AddrRecord mld2_rcd_t6m1n2s51 {
	Type                = MLDv2R_BLOCK;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_01;
}

FEM_icmp6_mldv2report_exth(
	MLDv2R_hut0l_mld2r_r2_t5m1n2s26_t6m1n2s15,
	_HETHER_hut0_to_mld2r,
	{
		HopLimit        = HUT_MLDR_HOP;
		_SRC(HUT0_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_hut0l_mld2r_r2_t5m1n2s26_t6m1n2s15);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_hut0l_mld2r_r2_t5m1n2s26_t6m1n2s15);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = HUT_MLDv2R_CODE;
		Checksum                = HUT_MLDv2R_CHECKSUM;
		Reserved                = HUT_MLDv2R_RESERVED;
		NumOfMcastAddrRecords   = 2;
		MLDv2_AddrRecord        = comb (oneof (mld2_rcd_t5m1n2s26, mld2_rcd_t5m1n2s62),
		                                oneof (mld2_rcd_t6m1n2s15, mld2_rcd_t6m1n2s51));
	}
)

//-----------------------------------------------------------------------------
// HUT0 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S3,S5,S6}) and BLOCK(M1,{S1,S2,S4})
//-----------------------------------------------------------------------------
// ALLOW(M1,{S3,S5,S6})
MLDv2_AddrRecord mld2_rcd_t5m1n3s356 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 3;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_06;
}

// ALLOW(M1,{S3,S6,S5})
MLDv2_AddrRecord mld2_rcd_t5m1n3s365 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 3;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_06;
	SourceAddress       = MSRC_05;
}

// ALLOW(M1,{S5,S3,S6})
MLDv2_AddrRecord mld2_rcd_t5m1n3s536 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 3;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_06;
}

// ALLOW(M1,{S5,S6,S3})
MLDv2_AddrRecord mld2_rcd_t5m1n3s563 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 3;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_06;
	SourceAddress       = MSRC_03;
}

// ALLOW(M1,{S6,S3,S5})
MLDv2_AddrRecord mld2_rcd_t5m1n3s635 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 3;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_06;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_05;
}

// ALLOW(M1,{S6,S5,S3})
MLDv2_AddrRecord mld2_rcd_t5m1n3s653 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 3;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_06;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_03;
}

// BLOCK(M1,{S1,S2,S4})
MLDv2_AddrRecord mld2_rcd_t6m1n3s124 {
	Type                = MLDv2R_BLOCK;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 3;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_04;
}

// BLOCK(M1,{S1,S4,S2})
MLDv2_AddrRecord mld2_rcd_t6m1n3s142 {
	Type                = MLDv2R_BLOCK;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 3;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_02;
}

// BLOCK(M1,{S2,S1,S4})
MLDv2_AddrRecord mld2_rcd_t6m1n3s214 {
	Type                = MLDv2R_BLOCK;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 3;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_04;
}

// BLOCK(M1,{S2,S4,S1})
MLDv2_AddrRecord mld2_rcd_t6m1n3s241 {
	Type                = MLDv2R_BLOCK;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 3;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_01;
}

// BLOCK(M1,{S4,S1,S2})
MLDv2_AddrRecord mld2_rcd_t6m1n3s412 {
	Type                = MLDv2R_BLOCK;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 3;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
}

// BLOCK(M1,{S4,S2,S1})
MLDv2_AddrRecord mld2_rcd_t6m1n3s421 {
	Type                = MLDv2R_BLOCK;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 3;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_01;
}

FEM_icmp6_mldv2report_exth(
	MLDv2R_hut0l_mld2r_r2_t5m1n3s356_t6m1n3s124,
	_HETHER_hut0_to_mld2r,
	{
		HopLimit        = HUT_MLDR_HOP;
		_SRC(HUT0_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_hut0l_mld2r_r2_t5m1n3s356_t6m1n3s124);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_hut0l_mld2r_r2_t5m1n3s356_t6m1n3s124);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = HUT_MLDv2R_CODE;
		Checksum                = HUT_MLDv2R_CHECKSUM;
		Reserved                = HUT_MLDv2R_RESERVED;
		NumOfMcastAddrRecords   = 2;
		MLDv2_AddrRecord        = comb (oneof(mld2_rcd_t5m1n3s356, mld2_rcd_t5m1n3s365,
		                                      mld2_rcd_t5m1n3s536, mld2_rcd_t5m1n3s563,
		                                      mld2_rcd_t5m1n3s635, mld2_rcd_t5m1n3s653),
		                                oneof(mld2_rcd_t6m1n3s124, mld2_rcd_t6m1n3s142,
		                                      mld2_rcd_t6m1n3s214, mld2_rcd_t6m1n3s241,
		                                      mld2_rcd_t6m1n3s412, mld2_rcd_t6m1n3s421));
	}
)

//-----------------------------------------------------------------------------
// HUT0 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S3,S5}) and BLOCK(M1,{S2,S4})
//-----------------------------------------------------------------------------
// ALLOW(M1,{S5,S3})
MLDv2_AddrRecord mld2_rcd_t5m1n2s53 {
	Type                = MLDv2R_ALLOW;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_03;
}

// BLOCK(M1,{S4,S2})
MLDv2_AddrRecord mld2_rcd_t6m1n2s42 {
	Type                = MLDv2R_BLOCK;
	AuxDataLen          = MLDv2R_AUXDATALEN;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_02;
}

FEM_icmp6_mldv2report_exth(
	MLDv2R_hut0l_mld2r_r2_t5m1n2s35_t6m1n2s24,
	_HETHER_hut0_to_mld2r,
	{
		HopLimit        = HUT_MLDR_HOP;
		_SRC(HUT0_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_hut0l_mld2r_r2_t5m1n2s35_t6m1n2s24);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_hut0l_mld2r_r2_t5m1n2s35_t6m1n2s24);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = HUT_MLDv2R_CODE;
		Checksum                = HUT_MLDv2R_CHECKSUM;
		Reserved                = HUT_MLDv2R_RESERVED;
		NumOfMcastAddrRecords   = 2;
		MLDv2_AddrRecord        = comb (oneof(mld2_rcd_t5m1n2s35, mld2_rcd_t5m1n2s53),
		                                oneof(mld2_rcd_t6m1n2s24, mld2_rcd_t6m1n2s42));
	}
)

// EOF
