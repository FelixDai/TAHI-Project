// 
// Copyright (C) IPv6 Promotion Council, NTT Advanced Technology Corporation
// (NTT-AT), Yokogwa Electoric Corporation and YASKAWA INFORMATION SYSTEMS
// Corporation All rights reserved.
// 
// Redistribution and use of this software in source and binary forms, with
// or without modification, are permitted provided that the following
// conditions and disclaimer are agreed and accepted by the user:
// 
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project which
// is related to this software (hereinafter referred to as "project") nor
// the names of the contributors may be used to endorse or promote products
// derived from this software without specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
// notification to the copyrighters. However, using this software for the
// purpose of testing or evaluating any products including merchantable
// products may be permitted without any notification to the copyrighters.
// 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
// THE POSSIBILITY OF SUCH DAMAGE.
// 
///////////////////////////////////////////////////////////////////////////////
//=============================================================================
// Include
//=============================================================================
#include "MLDv2R.def"

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(ASM1,{null})
//-----------------------------------------------------------------------------
// IS_EX(ASM1,{null})
MLDv2_AddrRecord mld2_rcd_t2asm1n0 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 0;
	MulticastAddress    = ASMCAST1_ADDR;
}

FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t2asm1n0,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2asm1n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2asm1n0);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t2asm1n0;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(ASM1,{null})
//-----------------------------------------------------------------------------
// TO_IN(ASM1,{null})
MLDv2_AddrRecord mld2_rcd_t3asm1n0 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 0;
	MulticastAddress    = ASMCAST1_ADDR;
}

FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t3asm1n0,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3asm1n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3asm1n0);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t3asm1n0;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(SSM1,{null})
//-----------------------------------------------------------------------------
// IS_EX(SSM1,{null})
MLDv2_AddrRecord mld2_rcd_t2ssm1n0 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 0;
	MulticastAddress    = SSMCAST1_ADDR;
}

FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t2ssm1n0,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2ssm1n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2ssm1n0);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t2ssm1n0;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(SSM1,{null})
//-----------------------------------------------------------------------------
// TO_IN(SSM1,{null})
MLDv2_AddrRecord mld2_rcd_t3ssm1n0 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 0;
	MulticastAddress    = SSMCAST1_ADDR;
}

FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t3ssm1n0,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3ssm1n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3ssm1n0);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t3ssm1n0;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(SSM2,{null})
//-----------------------------------------------------------------------------
// IS_EX(SSM2,{null})
MLDv2_AddrRecord mld2_rcd_t2ssm2n0 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 0;
	MulticastAddress    = SSMCAST2_ADDR;
}

FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t2ssm2n0,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2ssm2n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2ssm2n0);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t2ssm2n0;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(SSM2,{null})
//-----------------------------------------------------------------------------
// TO_IN(SSM2,{null})
MLDv2_AddrRecord mld2_rcd_t3ssm2n0 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 0;
	MulticastAddress    = SSMCAST3_ADDR;
}

FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t3ssm2n0,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3ssm2n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3ssm2n0);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t3ssm2n0;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(ASM2,{null})
//-----------------------------------------------------------------------------
// IS_EX(ASM2,{null})
MLDv2_AddrRecord mld2_rcd_t2asm2n0 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 0;
	MulticastAddress    = ASMCAST2_ADDR;
}

FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t2asm2n0,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2asm2n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2asm2n0);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t2asm2n0;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(ASM2,{null})
//-----------------------------------------------------------------------------
// TO_IN(ASM2,{null})
MLDv2_AddrRecord mld2_rcd_t3asm2n0 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 0;
	MulticastAddress    = ASMCAST2_ADDR;
}

FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t3asm2n0,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3asm2n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3asm2n0);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t3asm2n0;
	}
)

//-----------------------------------------------------------------------------
// RUT0 -> ASM1, MLDv2 Query (ASM1)
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_rut0l_asmcast1_asm1n0,
	_HETHER_rut0_to_asmcast1,
	{
		HopLimit        = MLDQ_HOP;
		_SRC(RUT0_LLOCAL_UCAST);
		_DST(ASMCAST1_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_asmcast1_asm1n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_asmcast1_asm1n0);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = RUT_MLDQ_CODE;
		Checksum            = RUT_MLDQ_CHECKSUM;
		MaxResponseDelay   <= RUT_MLDQM_MRD;
		Reserved            = RUT_MLDQ_RESERVED;
		MulticastAddress    = ASMCAST1_ADDR;
		Resv                = RUT_MLDQ_RESV;
		SFlag               = RUT_MLDQ_S_FLAG;
		QRV                 = RUT_MLDQ_QRV;
		QQIC                = RUT_MLDQ_QQIC;
		NumOfSources        = 0;
	}
)

//-----------------------------------------------------------------------------
// RUT0 -> ASM1, MLDv2 Query (ASM2)
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_rut0l_asmcast2_asm2n0,
	_HETHER_rut0_to_asmcast2,
	{
		HopLimit        = MLDQ_HOP;
		_SRC(RUT0_LLOCAL_UCAST);
		_DST(ASMCAST2_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_asmcast2_asm2n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_asmcast2_asm2n0);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = RUT_MLDQ_CODE;
		Checksum            = RUT_MLDQ_CHECKSUM;
		MaxResponseDelay   <= RUT_MLDQM_MRD;
		Reserved            = RUT_MLDQ_RESERVED;
		MulticastAddress    = ASMCAST2_ADDR;
		Resv                = RUT_MLDQ_RESV;
		SFlag               = RUT_MLDQ_S_FLAG;
		QRV                 = RUT_MLDQ_QRV;
		QQIC                = RUT_MLDQ_QQIC;
		NumOfSources        = 0;
	}
)

// EOF
