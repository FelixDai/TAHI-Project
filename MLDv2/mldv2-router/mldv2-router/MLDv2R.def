// 
// Copyright (C) IPv6 Promotion Council, NTT Advanced Technology Corporation
// (NTT-AT), Yokogwa Electoric Corporation and YASKAWA INFORMATION SYSTEMS
// Corporation All rights reserved.
// 
// Redistribution and use of this software in source and binary forms, with
// or without modification, are permitted provided that the following
// conditions and disclaimer are agreed and accepted by the user:
// 
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project which
// is related to this software (hereinafter referred to as "project") nor
// the names of the contributors may be used to endorse or promote products
// derived from this software without specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
// notification to the copyrighters. However, using this software for the
// purpose of testing or evaluating any products including merchantable
// products may be permitted without any notification to the copyrighters.
// 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
// THE POSSIBILITY OF SUCH DAMAGE.
// 
///////////////////////////////////////////////////////////////////////////////
//=============================================================================
// Include
//=============================================================================
#include "config.def"

//=============================================================================
// Addresses
// http://www.iana.org/assignments/ipv6-address-space
// http://www.iana.org/assignments/ipv6-multicast-addresses/
//=============================================================================
//-----------------------------------------------------------------------------
// General
//-----------------------------------------------------------------------------
// The unspecified address
#define UNSPEC_ETHER            ether("00:00:00:00:00:00")
#define UNSPEC_ADDR             v6("::")

// All Nodes Address
#define ALL_NODES_ADDR          v6("ff02::1")
#define ALL_NODES_ETHER         v62ethermulti(ALL_NODES_ADDR)

// All Routers Address
#define ALL_ROUTERS_ADDR        v6("ff02::2")
#define ALL_ROUTERS_ETHER       v62ethermulti(ALL_ROUTERS_ADDR)

// All MLDv2-capable routers
#define MLDv2_ROUTERS_ADDR      v6("ff02::16")
#define MLDv2_ROUTERS_ETHER     v62ethermulti(MLDv2_ROUTERS_ADDR)

//-----------------------------------------------------------------------------
// Solicited-node multicast prefix
//-----------------------------------------------------------------------------
#define SOL_NODE_PREFIX         "ff02::1:ff00:0"
#define SOL_NODE_PREFIX_LEN     104

//-----------------------------------------------------------------------------
// The test network prefix
//-----------------------------------------------------------------------------
// Network 0
#ifndef NETWORK0
#define NETWORK0        "3ffe:501:ffff:100::"
#endif
#define NETWORK0_PREFIX v6(NETWORK0)

// Network 1
#ifndef NETWORK1
#define NETWORK1        "3ffe:501:ffff:101::"
#endif
#define NETWORK1_PREFIX v6(NETWORK1)

// Network X (The network of a multicasting distribution source)
#ifndef NETWORKX
#define NETWORKX        "3ffe:501:ffff:300::"
#endif
#define NETWORKX_PREFIX v6(NETWORKX)

//-----------------------------------------------------------------------------
// RUT
//-----------------------------------------------------------------------------
// I/F Link0 on Network 0
#define RUT0_ETHER          nutether("Link0")
#define RUT0_LLOCAL_UCAST   nutv6("Link0")
#define RUT0_GLOBAL_UCAST   v6merge(NETWORK0,64,RUT0_LLOCAL_UCAST)
#define RUT0_SOL_ETHER      v62ethermulti(RUT0_LLOCAL_UCAST)
#define RUT0_SOL_MCAST      v6merge(SOL_NODE_PREFIX,SOL_NODE_PREFIX_LEN,RUT0_LLOCAL_UCAST)

// I/F Link1 on Network 1
#define RUT1_ETHER          nutether("Link1")
#define RUT1_LLOCAL_UCAST   nutv6("Link1")
#define RUT1_GLOBAL_UCAST   v6merge(NETWORK1,64,RUT1_LLOCAL_UCAST)
#define RUT1_SOL_ETHER      v62ethermulti(RUT1_LLOCAL_UCAST)
#define RUT1_SOL_MCAST      v6merge(SOL_NODE_PREFIX,SOL_NODE_PREFIX_LEN,RUT1_LLOCAL_UCAST)

//-----------------------------------------------------------------------------
// Nodes on the Network 0
//-----------------------------------------------------------------------------
// TR1 - lower address
#define TR1_MAC             "00:00:00:00:00:01"
#define TR1_ETHER           ether(TR1_MAC)
#define TR1_LLOCAL_UCAST    v6ether(TR1_MAC)
#define TR1_GLOBAL_UCAST    v6merge(NETWORK0,64,TR1_LLOCAL_UCAST)
#define TR1_SOL_ETHER       v62ethermulti(TR1_LLOCAL_UCAST)
#define TR1_SOL_MCAST       v6merge(SOL_NODE_PREFIX,SOL_NODE_PREFIX_LEN,TR1_LLOCAL_UCAST)

// TR2 - higher address
#define TR2_MAC             "fc:fc:fc:fc:fc:fc"
#define TR2_ETHER           ether(TR2_MAC)
#define TR2_LLOCAL_UCAST    v6ether(TR2_MAC)
#define TR2_GLOBAL_UCAST    v6merge(NETWORK0,64,TR2_LLOCAL_UCAST)
#define TR2_SOL_ETHER       v62ethermulti(TR2_LLOCAL_UCAST)
#define TR2_SOL_MCAST       v6merge(SOL_NODE_PREFIX,SOL_NODE_PREFIX_LEN,TR2_LLOCAL_UCAST)

// TN1
#define TN1_MAC             "00:00:00:11:11:11"
#define TN1_ETHER           ether(TN1_MAC)
#define TN1_LLOCAL_UCAST    v6ether(TN1_MAC)
#define TN1_GLOBAL_UCAST    v6merge(NETWORK0,64,TN1_LLOCAL_UCAST)
#define TN1_SOL_ETHER       v62ethermulti(TN1_LLOCAL_UCAST)
#define TN1_SOL_MCAST       v6merge(SOL_NODE_PREFIX,SOL_NODE_PREFIX_LEN,TN1_LLOCAL_UCAST)

//-----------------------------------------------------------------------------
// Nodes on the Network 1
//-----------------------------------------------------------------------------
// TN2
#define TN2_MAC             "00:00:00:22:22:22"
#define TN2_ETHER           ether(TN2_MAC)
#define TN2_LLOCAL_UCAST    v6ether(TN2_MAC)
#define TN2_GLOBAL_UCAST    v6merge(NETWORK1,64,TN2_LLOCAL_UCAST)
#define TN2_SOL_ETHER       v62ethermulti(TN2_LLOCAL_UCAST)
#define TN2_SOL_MCAST       v6merge(SOL_NODE_PREFIX,SOL_NODE_PREFIX_LEN,TN2_LLOCAL_UCAST)

//-----------------------------------------------------------------------------
// The listening multicast
//-----------------------------------------------------------------------------
// Listening multicast 0
#ifndef MCAST1
#define MCAST1              "ff3e:40:3ffe:501:ffff:300:0:1"
#endif
#define MCAST1_ADDR         v6(MCAST1)
#define MCAST1_SOL_ETHER    v62ethermulti(MCAST1_ADDR)

// Listening multicast 1
#ifndef MCAST2
#define MCAST2              "ff3e:40:3ffe:501:ffff:300:0:2"
#endif
#define MCAST2_ADDR         v6(MCAST2)
#define MCAST2_SOL_ETHER    v62ethermulti(MCAST2_ADDR)

//-----------------------------------------------------------------------------
// SSM (IANA allocation)
//-----------------------------------------------------------------------------
// SSM IANA allocation top - 1
#ifndef ASMCAST1
#define ASMCAST1            "ff3e:0:0:0:0:0:3fff:ffff"
#endif
#define ASMCAST1_ADDR       v6(ASMCAST1)
#define ASMCAST1_SOL_ETHER  v62ethermulti(ASMCAST1_ADDR)

// SSM IANA allocation top
#ifndef SSMCAST1
#define SSMCAST1            "ff3e:0:0:0:0:0:4000:1"
#endif
#define SSMCAST1_ADDR       v6(SSMCAST1)
#define SSMCAST1_SOL_ETHER  v62ethermulti(SSMCAST1_ADDR)

// SSM IANA allocation bottom
#ifndef SSMCAST2
#define SSMCAST2            "ff3e:0:0:0:0:0:7fff:ffff"
#endif
#define SSMCAST2_ADDR       v6(SSMCAST2)
#define SSMCAST2_SOL_ETHER  v62ethermulti(SSMCAST2_ADDR)

// SSM IANA allocation bottom + 1
#ifndef ASMCAST2
#define ASMCAST2            "ff3e:0:0:0:0:0:8000:1"
#endif
#define ASMCAST2_ADDR       v6(ASMCAST2)
#define ASMCAST2_SOL_ETHER  v62ethermulti(ASMCAST2_ADDR)

//-----------------------------------------------------------------------------
// SSM (local host allocation)
//-----------------------------------------------------------------------------
// IANA allocation top - 1
#ifdef SSM_RANGE_ST_OUT_ADDR
#define ASMCAST3            SSM_RANGE_ST_OUT_ADDR
#else
#define ASMCAST3            "ff3e:0:0:0:0:0:8fff:ffff"
#endif
#define ASMCAST3_ADDR       v6(ASMCAST3)
#define ASMCAST3_SOL_ETHER  v62ethermulti(ASMCAST3_ADDR)

// IANA allocation top
#ifdef SSM_RANGE_ST_ADDR
#define SSMCAST3            SSM_RANGE_ST_ADDR
#else
#define SSMCAST3            "ff3e:0:0:0:0:0:9000:1"
#endif
#define SSMCAST3_ADDR       v6(SSMCAST3)
#define SSMCAST3_SOL_ETHER  v62ethermulti(SSMCAST3_ADDR)

// IANA allocation bottom
#ifdef SSM_RANGE_ED_ADDR
#define SSMCAST4            SSM_RANGE_ED_ADDR
#else
#define SSMCAST4            "ff3e:0:0:0:0:0:9fff:ffff"
#endif
#define SSMCAST4_ADDR       v6(SSMCAST4)
#define SSMCAST4_SOL_ETHER  v62ethermulti(SSMCAST4_ADDR)

// IANA allocation bottom + 1
#ifndef SSM_RANGE_ED_OUT_ADDR
#define ASMCAST4            SSM_RANGE_ED_OUT_ADDR
#else
#define ASMCAST4            "ff3e:0:0:0:0:0:a000:1"
#endif
#define ASMCAST4_ADDR       v6(ASMCAST4)
#define ASMCAST4_SOL_ETHER  v62ethermulti(ASMCAST4_ADDR)

//-----------------------------------------------------------------------------
// The mulicast source addresses
//-----------------------------------------------------------------------------
#define MSRC_01 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:01"))
#define MSRC_02 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:02"))
#define MSRC_03 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:03"))
#define MSRC_04 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:04"))
#define MSRC_05 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:05"))
#define MSRC_06 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:06"))
#define MSRC_07 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:07"))
#define MSRC_08 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:08"))
#define MSRC_09 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:09"))
#define MSRC_10 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:10"))
#define MSRC_11 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:11"))
#define MSRC_12 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:12"))
#define MSRC_13 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:13"))
#define MSRC_14 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:14"))
#define MSRC_15 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:15"))
#define MSRC_16 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:16"))
#define MSRC_17 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:17"))
#define MSRC_18 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:18"))
#define MSRC_19 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:19"))
#define MSRC_20 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:20"))
#define MSRC_21 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:21"))
#define MSRC_22 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:22"))
#define MSRC_23 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:23"))
#define MSRC_24 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:24"))
#define MSRC_25 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:25"))
#define MSRC_26 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:26"))
#define MSRC_27 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:27"))
#define MSRC_28 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:28"))
#define MSRC_29 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:29"))
#define MSRC_30 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:30"))
#define MSRC_31 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:31"))
#define MSRC_32 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:32"))
#define MSRC_33 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:33"))
#define MSRC_34 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:34"))
#define MSRC_35 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:35"))
#define MSRC_36 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:36"))
#define MSRC_37 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:37"))
#define MSRC_38 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:38"))
#define MSRC_39 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:39"))
#define MSRC_40 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:40"))
#define MSRC_41 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:41"))
#define MSRC_42 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:42"))
#define MSRC_43 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:43"))
#define MSRC_44 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:44"))
#define MSRC_45 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:45"))
#define MSRC_46 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:46"))
#define MSRC_47 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:47"))
#define MSRC_48 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:48"))
#define MSRC_49 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:49"))
#define MSRC_50 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:50"))
#define MSRC_51 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:51"))
#define MSRC_52 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:52"))
#define MSRC_53 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:53"))
#define MSRC_54 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:54"))
#define MSRC_55 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:55"))
#define MSRC_56 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:56"))
#define MSRC_57 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:57"))
#define MSRC_58 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:58"))
#define MSRC_59 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:59"))
#define MSRC_60 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:60"))
#define MSRC_61 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:61"))
#define MSRC_62 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:62"))
#define MSRC_63 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:63"))
#define MSRC_64 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:64"))
#define MSRC_65 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:65"))
#define MSRC_66 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:66"))
#define MSRC_67 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:67"))
#define MSRC_68 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:68"))
#define MSRC_69 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:69"))
#define MSRC_70 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:70"))
#define MSRC_71 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:71"))
#define MSRC_72 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:72"))
#define MSRC_73 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:73"))
#define MSRC_74 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:74"))
#define MSRC_75 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:75"))
#define MSRC_76 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:76"))
#define MSRC_77 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:77"))
#define MSRC_78 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:78"))
#define MSRC_79 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:79"))
#define MSRC_80 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:80"))
#define MSRC_81 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:81"))
#define MSRC_82 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:82"))
#define MSRC_83 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:83"))
#define MSRC_84 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:84"))
#define MSRC_85 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:85"))
#define MSRC_86 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:86"))
#define MSRC_87 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:87"))
#define MSRC_88 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:88"))
#define MSRC_89 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:89"))
#define MSRC_90 v6merge(NETWORKX,64,v6ether("0:0:0:0:0:90"))

//=============================================================================
// Ether Header
//=============================================================================
//-----------------------------------------------------------------------------
// any -> any
//-----------------------------------------------------------------------------
_HETHER_define(_HETHER_any, any, any)

//-----------------------------------------------------------------------------
// 0 (Unspec) -> 
//-----------------------------------------------------------------------------
_HETHER_define(_HETHER_0_to_allnodes,       UNSPEC_ETHER,   ALL_NODES_ETHER)
_HETHER_define(_HETHER_0_to_mld2r,          UNSPEC_ETHER,   MLDv2_ROUTERS_ETHER)

//-----------------------------------------------------------------------------
// RUT0 ->
//-----------------------------------------------------------------------------
_HETHER_define(_HETHER_0_to_rut0sol,        UNSPEC_ETHER,   RUT0_SOL_ETHER)
_HETHER_define(_HETHER_rut0_to_any,         RUT0_ETHER,     any)
_HETHER_define(_HETHER_rut0_to_allnodes,    RUT0_ETHER,     ALL_NODES_ETHER)
_HETHER_define(_HETHER_rut0_to_allrouters,  RUT0_ETHER,     ALL_ROUTERS_ETHER)
_HETHER_define(_HETHER_rut0_to_mld2r,       RUT0_ETHER,     MLDv2_ROUTERS_ETHER)
_HETHER_define(_HETHER_rut0_to_mcast1,      RUT0_ETHER,     MCAST1_SOL_ETHER)
_HETHER_define(_HETHER_rut0_to_mcast2,      RUT0_ETHER,     MCAST2_SOL_ETHER)
_HETHER_define(_HETHER_rut0_to_asmcast1,    RUT0_ETHER,     ASMCAST1_SOL_ETHER)
_HETHER_define(_HETHER_rut0_to_asmcast2,    RUT0_ETHER,     ASMCAST2_SOL_ETHER)
_HETHER_define(_HETHER_rut0_to_asmcast3,    RUT0_ETHER,     ASMCAST3_SOL_ETHER)
_HETHER_define(_HETHER_rut0_to_asmcast4,    RUT0_ETHER,     ASMCAST4_SOL_ETHER)
_HETHER_define(_HETHER_rut0_to_ssmcast1,    RUT0_ETHER,     SSMCAST1_SOL_ETHER)
_HETHER_define(_HETHER_rut0_to_ssmcast2,    RUT0_ETHER,     SSMCAST2_SOL_ETHER)
_HETHER_define(_HETHER_rut0_to_ssmcast3,    RUT0_ETHER,     SSMCAST3_SOL_ETHER)
_HETHER_define(_HETHER_rut0_to_ssmcast4,    RUT0_ETHER,     SSMCAST4_SOL_ETHER)

//-----------------------------------------------------------------------------
// RUT1 ->
//-----------------------------------------------------------------------------
_HETHER_define(_HETHER_0_to_rut1sol,        UNSPEC_ETHER,   RUT1_SOL_ETHER)
_HETHER_define(_HETHER_rut1_to_any,         RUT1_ETHER,     any)
_HETHER_define(_HETHER_rut1_to_allnodes,    RUT1_ETHER,     ALL_NODES_ETHER)
_HETHER_define(_HETHER_rut1_to_allrouters,  RUT1_ETHER,     ALL_ROUTERS_ETHER)
_HETHER_define(_HETHER_rut1_to_mld2r,       RUT1_ETHER,     MLDv2_ROUTERS_ETHER)
_HETHER_define(_HETHER_rut1_to_mcast1,      RUT1_ETHER,     MCAST1_SOL_ETHER)
_HETHER_define(_HETHER_rut1_to_mcast2,      RUT1_ETHER,     MCAST2_SOL_ETHER)
_HETHER_define(_HETHER_rut1_to_tn2,         RUT1_ETHER,     TN2_ETHER)

//-----------------------------------------------------------------------------
// TR1 ->
//-----------------------------------------------------------------------------
_HETHER_define(_HETHER_tr1_to_allnodes,     TR1_ETHER,  ALL_NODES_ETHER)
_HETHER_define(_HETHER_tr1_to_allrouters,   TR1_ETHER,  ALL_ROUTERS_ETHER)
_HETHER_define(_HETHER_tr1_to_mld2r,        TR1_ETHER,  MLDv2_ROUTERS_ETHER)
_HETHER_define(_HETHER_tr1_to_mcast1,       TR1_ETHER,  MCAST1_SOL_ETHER)
_HETHER_define(_HETHER_tr1_to_mcast2,       TR1_ETHER,  MCAST2_SOL_ETHER)
_HETHER_define(_HETHER_tr1_to_rut0,         TR1_ETHER,  RUT0_ETHER)
_HETHER_define(_HETHER_tr1_to_rut0s,        TR1_ETHER,  RUT0_SOL_ETHER)

//-----------------------------------------------------------------------------
// TR2 ->
//-----------------------------------------------------------------------------
_HETHER_define(_HETHER_tr2_to_allnodes,     TR2_ETHER,  ALL_NODES_ETHER)
_HETHER_define(_HETHER_tr2_to_allrouters,   TR2_ETHER,  ALL_ROUTERS_ETHER)
_HETHER_define(_HETHER_tr2_to_mld2r,        TR2_ETHER,  MLDv2_ROUTERS_ETHER)
_HETHER_define(_HETHER_tr2_to_mcast1,       TR2_ETHER,  MCAST1_SOL_ETHER)
_HETHER_define(_HETHER_tr2_to_mcast2,       TR2_ETHER,  MCAST2_SOL_ETHER)

//-----------------------------------------------------------------------------
// TN1 ->
//-----------------------------------------------------------------------------
_HETHER_define(_HETHER_tn1_to_allnodes,     TN1_ETHER,  ALL_NODES_ETHER)
_HETHER_define(_HETHER_tn1_to_allrouters,   TN1_ETHER,  ALL_ROUTERS_ETHER)
_HETHER_define(_HETHER_tn1_to_mld2r,        TN1_ETHER,  MLDv2_ROUTERS_ETHER)
_HETHER_define(_HETHER_tn1_to_mcast1,       TN1_ETHER,  MCAST1_SOL_ETHER)
_HETHER_define(_HETHER_tn1_to_mcast2,       TN1_ETHER,  MCAST2_SOL_ETHER)
_HETHER_define(_HETHER_tn1_to_ssmcast1,     TN1_ETHER,  SSMCAST1_SOL_ETHER)
_HETHER_define(_HETHER_tn1_to_rut0,         TN1_ETHER,  RUT0_ETHER)

//-----------------------------------------------------------------------------
// TN2 ->
//-----------------------------------------------------------------------------
_HETHER_define(_HETHER_tn2_to_allnodes,     TN2_ETHER,  ALL_NODES_ETHER)
_HETHER_define(_HETHER_tn2_to_allrouters,   TN2_ETHER,  ALL_ROUTERS_ETHER)
_HETHER_define(_HETHER_tn2_to_mld2r,        TN2_ETHER,  MLDv2_ROUTERS_ETHER)
_HETHER_define(_HETHER_tn2_to_mcast1,       TN2_ETHER,  MCAST1_SOL_ETHER)
_HETHER_define(_HETHER_tn2_to_mcast2,       TN2_ETHER,  MCAST2_SOL_ETHER)

//=============================================================================
// ICMPv6 RD/ND Option
//=============================================================================
//-----------------------------------------------------------------------------
// Source Link-Layer Address Option (Option Type 1)
//-----------------------------------------------------------------------------
// TR1
Opt_ICMPv6_SLL opt_sll_tr1 {
	LinkLayerAddress    = TR1_ETHER;
}

// TR2
Opt_ICMPv6_SLL opt_sll_tr2 {
	LinkLayerAddress    = TR2_ETHER;
}

//-----------------------------------------------------------------------------
// Target Link-Layer Address Option (Option Type 2)
//-----------------------------------------------------------------------------
// TR1
Opt_ICMPv6_TLL opt_tll_tr1 {
	LinkLayerAddress    = TR1_ETHER;
}

// TR2
Opt_ICMPv6_TLL opt_tll_tr2 {
	LinkLayerAddress    = TR2_ETHER;
}

// TN1
Opt_ICMPv6_TLL opt_tll_tn1 {
	LinkLayerAddress    = TN1_ETHER;
}

// TN2
Opt_ICMPv6_TLL opt_tll_tn2 {
	LinkLayerAddress    = TN2_ETHER;
}

//-----------------------------------------------------------------------------
// Prefix Information Option (Option Type 3)
//-----------------------------------------------------------------------------
#define OPT_PREFIX_LFLAG    1
#define OPT_PREFIX_AFLAG    1
#define OPT_PREFIX_RFLAG    0
#define OPT_PREFIX_VLTIME   2592000
#define OPT_PREFIX_PLTIME   604800

// Network 0
Opt_ICMPv6_Prefix opt_prefix_network0 {
	LFlag               = OPT_PREFIX_LFLAG;
	AFlag               = OPT_PREFIX_AFLAG;
	RFlag               = OPT_PREFIX_RFLAG;
	ValidLifetime       = OPT_PREFIX_VLTIME;
	PreferredLifetime   = OPT_PREFIX_PLTIME;
	Prefix              = NETWORK0_PREFIX;
}

// Network 1
Opt_ICMPv6_Prefix opt_prefix_network1 {
	LFlag               = OPT_PREFIX_LFLAG;
	AFlag               = OPT_PREFIX_AFLAG;
	RFlag               = OPT_PREFIX_RFLAG;
	ValidLifetime       = OPT_PREFIX_VLTIME;
	PreferredLifetime   = OPT_PREFIX_PLTIME;
	Prefix              = NETWORK1_PREFIX;
}

//-----------------------------------------------------------------------------
// MTU Option (Option Type 5)
//-----------------------------------------------------------------------------
#define OPT_MTU_MTU 1500

// Common
Opt_ICMPv6_MTU opt_mtu {
	MTU = OPT_MTU_MTU;
}

//=============================================================================
// ICMPv6 Router Solicitation (Message Type 133)
//=============================================================================
//-----------------------------------------------------------------------------
// any -> any, RS any
//-----------------------------------------------------------------------------
FEM_icmp6_rs(
	RS_any_any,
	_HETHER_any,
	{
		_SRC(any);
		_DST(any);
	},
	{
		//  Type        = 133;
		//  Code        = any;
		//  Checksum    = auto;
		Reserved    = stop;
		//  option      = stop;
	}
)

//=============================================================================
// ICMPv6 Router Advertisement (Message Type 134)
//=============================================================================
#define RA_HOPLIMIT         255
#define RA_CURHOPLIMIT      0
#define RA_MFLAG            0
#define RA_OFLAG            0
#define RA_LIFETIME         3000
#define RA_REACHABLETIME    0
#define RA_RETRANSTIMER     0

//-----------------------------------------------------------------------------
// any -> any, RA any
//-----------------------------------------------------------------------------
FEM_icmp6_ra(
	RA_any_any,
	_HETHER_any,
	{
		_SRC(any);
		_DST(any);
	},
	{
		//  Type            = 134;
		//  Code            = any;
		//  Checksum        = auto;
		CurHopLimit     = stop;
		//  MFlag           = any;
		//  OFlag           = any;
		//  HFlag           = any;
		//  Preference      = any;
		//  Reserved        = any;
		//  LifeTime        = any;
		//  RetransTimer    = any;
		//  option          = stop;
	}
)

//-----------------------------------------------------------------------------
// TR1 -> All Nodes Address, RA
//-----------------------------------------------------------------------------
FEM_icmp6_ra(
	RA_tr1l_allnodes,
	_HETHER_tr1_to_allnodes,
	{
		HopLimit        = RA_HOPLIMIT;
		_SRC(TR1_LLOCAL_UCAST);
		_DST(ALL_NODES_ADDR);
	},
	{
		CurHopLimit     = RA_CURHOPLIMIT;
		MFlag           = RA_MFLAG;
		OFlag           = RA_OFLAG;
		LifeTime        = RA_LIFETIME;
		ReachableTime   = RA_REACHABLETIME;
		RetransTimer    = RA_RETRANSTIMER;
		option          = opt_sll_tr1;
		option          = opt_mtu;
		option          = opt_prefix_network0;
	}
)

//-----------------------------------------------------------------------------
// TR2 -> All Nodes Address, RA
//-----------------------------------------------------------------------------
FEM_icmp6_ra(
	RA_tr2l_allnodes,
	_HETHER_tr2_to_allnodes,
	{
		HopLimit        = RA_HOPLIMIT;
		_SRC(TR2_LLOCAL_UCAST);
		_DST(ALL_NODES_ADDR);
	},
	{
		CurHopLimit     = RA_CURHOPLIMIT;
		MFlag           = RA_MFLAG;
		OFlag           = RA_OFLAG;
		LifeTime        = RA_LIFETIME;
		ReachableTime   = RA_REACHABLETIME;
		RetransTimer    = RA_RETRANSTIMER;
		option          = opt_sll_tr2;
		option          = opt_mtu;
		option          = opt_prefix_network0;
	}
)

//=============================================================================
// ICMPv6 Neighbor Solicitation (Message Type 135)
//=============================================================================
//-----------------------------------------------------------------------------
// any -> any, NS any
//-----------------------------------------------------------------------------
FEM_icmp6_ns (
	NS_any_any,
	_HETHER_any,
	{
		_SRC(any);
		_DST(any);
	},
	{
		//  Type            = 135;
		//  Code            = any;
		//  Checksum        = auto;
		Reserved        = stop;
		//  TargetAddress   = any;
		//  option          = stop;
	}
)

//=============================================================================
// ICMPv6 Neighbor Advertisement (Message Type 136)
//=============================================================================
#define NA_HOPLIMIT 255
#define NA_RFLAG_R  1
#define NA_RFLAG_H  0
#define NA_SFLAG    0
#define NA_OFLAG    1

//-----------------------------------------------------------------------------
// any -> any, NA any
//-----------------------------------------------------------------------------
FEM_icmp6_na (
	NA_any_any,
	_HETHER_any,
	{
		_SRC(any);
		_DST(any);
	},
	{
		//  Type            = 136;
		//  Code            = any;
		//  Checksum        = auto;
		RFlag           = stop;
		//  SFlag           = any;
		//  OFlag           = any;
		//  Reserved        = any;
		//  TargetAddress   = any;
		//  option          = stop;
	}
)

//-----------------------------------------------------------------------------
// TR1 -> All Nodes Address, NA link-local
//-----------------------------------------------------------------------------
FEM_icmp6_na(
	NA_tr1l_allnodes,
	_HETHER_tr1_to_allnodes,
	{
		HopLimit        = NA_HOPLIMIT;
		_SRC(TR1_LLOCAL_UCAST);
		_DST(ALL_NODES_ADDR);
	},
	{
		RFlag           = NA_RFLAG_R;
		SFlag           = NA_SFLAG;
		OFlag           = NA_OFLAG;
		TargetAddress   = TR1_LLOCAL_UCAST;
		option          = opt_tll_tr1;
	}
)

//-----------------------------------------------------------------------------
// TR1 -> All Nodes Address, NA global
//-----------------------------------------------------------------------------
FEM_icmp6_na(
	NA_tr1g_allnodes,
	_HETHER_tr1_to_allnodes,
	{
		HopLimit        = NA_HOPLIMIT;
		_SRC(TR1_LLOCAL_UCAST);
		_DST(ALL_NODES_ADDR);
	},
	{
		RFlag           = NA_RFLAG_R;
		SFlag           = NA_SFLAG;
		OFlag           = NA_OFLAG;
		TargetAddress   = TR1_GLOBAL_UCAST;
		option          = opt_tll_tr1;
	}
)

//-----------------------------------------------------------------------------
// TR2 -> All Nodes Address, NA link-local
//-----------------------------------------------------------------------------
FEM_icmp6_na(
	NA_tr2l_allnodes,
	_HETHER_tr2_to_allnodes,
	{
		HopLimit        = NA_HOPLIMIT;
		_SRC(TR2_LLOCAL_UCAST);
		_DST(ALL_NODES_ADDR);
	},
	{
		RFlag           = NA_RFLAG_R;
		SFlag           = NA_SFLAG;
		OFlag           = NA_OFLAG;
		TargetAddress   = TR2_LLOCAL_UCAST;
		option          = opt_tll_tr2;
	}
)

//-----------------------------------------------------------------------------
// TR2 -> All Nodes Address, NA global
//-----------------------------------------------------------------------------
FEM_icmp6_na(
	NA_tr2g_allnodes,
	_HETHER_tr2_to_allnodes,
	{
		HopLimit        = NA_HOPLIMIT;
		_SRC(TR2_LLOCAL_UCAST);
		_DST(ALL_NODES_ADDR);
	},
	{
		RFlag           = NA_RFLAG_R;
		SFlag           = NA_SFLAG;
		OFlag           = NA_OFLAG;
		TargetAddress   = TR2_GLOBAL_UCAST;
		option          = opt_tll_tr2;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All Nodes Address, NA link-local
//-----------------------------------------------------------------------------
FEM_icmp6_na (
	NA_tn1l_allnodes,
	_HETHER_tn1_to_allnodes,
	{
		HopLimit        = NA_HOPLIMIT;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(ALL_NODES_ADDR);
	},
	{
		RFlag           = NA_RFLAG_H;
		SFlag           = NA_SFLAG;
		OFlag           = NA_OFLAG;
		TargetAddress   = TN1_LLOCAL_UCAST;
		option          = opt_tll_tn1;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All Nodes Address, NA global
//-----------------------------------------------------------------------------
FEM_icmp6_na (
	NA_tn1g_allnodes,
	_HETHER_tn1_to_allnodes,
	{
		HopLimit        = NA_HOPLIMIT;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(ALL_NODES_ADDR);
	},
	{
		RFlag           = NA_RFLAG_H;
		SFlag           = NA_SFLAG;
		OFlag           = NA_OFLAG;
		TargetAddress   = TN1_GLOBAL_UCAST;
		option          = opt_tll_tn1;
	}
)

//-----------------------------------------------------------------------------
// TN2 -> All Nodes Address, NA link-local
//-----------------------------------------------------------------------------
FEM_icmp6_na(
	NA_tn2l_allnodes,
	_HETHER_tn2_to_allnodes,
	{
		HopLimit        = NA_HOPLIMIT;
		_SRC(TN2_LLOCAL_UCAST);
		_DST(ALL_NODES_ADDR);
	},
	{
		RFlag           = NA_RFLAG_H;
		SFlag           = NA_SFLAG;
		OFlag           = NA_OFLAG;
		TargetAddress   = TN2_LLOCAL_UCAST;
		option          = opt_tll_tn2;
	}
)

//-----------------------------------------------------------------------------
// TN2 -> All Nodes Address, NA global
//-----------------------------------------------------------------------------
FEM_icmp6_na(
	NA_tn2g_allnodes,
	_HETHER_tn2_to_allnodes,
	{
		HopLimit        = NA_HOPLIMIT;
		_SRC(TN2_GLOBAL_UCAST);
		_DST(ALL_NODES_ADDR);
	},
	{
		RFlag           = NA_RFLAG_H;
		SFlag           = NA_SFLAG;
		OFlag           = NA_OFLAG;
		TargetAddress   = TN2_GLOBAL_UCAST;
		option          = opt_tll_tn2;
	}
)

//=============================================================================
// Field Value in MLD Query Message
//=============================================================================
//-----------------------------------------------------------------------------
// Field Value in IPv6 Header in MLD Query
//-----------------------------------------------------------------------------
#ifndef MLDQ_HOP            // HopLimit
#define MLDQ_HOP            1
#endif

#ifndef RUT_MLDQ_HOP        // HopLimit
#define RUT_MLDQ_HOP        1
#endif

//-----------------------------------------------------------------------------
// Field Value in Hop-by-Hop Option Header in MLD Query
//-----------------------------------------------------------------------------
#ifndef MLDQ_NEXT_ICMP      // NextHeader
#define MLDQ_NEXT_ICMP      58
#endif

//-----------------------------------------------------------------------------
// Field Value in MLD Query
//-----------------------------------------------------------------------------
#ifndef MLDQ_TYPE           // Type
#define MLDQ_TYPE           130
#endif

#ifndef MLDQ_CODE           // Code
#define MLDQ_CODE           0
#endif

#ifndef RUT_MLDQ_CODE       // Code
#define RUT_MLDQ_CODE       0
#endif

#ifndef MLDQ_CHECKSUM       // Checksum
#define MLDQ_CHECKSUM       auto
#endif

#ifndef RUT_MLDQ_CHECKSUM   // Checksum
#define RUT_MLDQ_CHECKSUM   auto
#endif

#ifndef MLDQG_MRD           // MaxResponseDelay
#define MLDQG_MRD           10000
#endif

#ifndef RUT_MLDQG_MRD       // MaxResponseDelay
#define RUT_MLDQG_MRD       10000
#endif

#ifndef MLDQM_MRD           // MaxResponseDelay
#define MLDQM_MRD           1000
#endif

#ifndef RUT_MLDQM_MRD       // MaxResponseDelay
#define RUT_MLDQM_MRD       1000
#endif

#ifndef MLDQ_RESERVED       // Reserved
#define MLDQ_RESERVED       0
#endif

#ifndef RUT_MLDQ_RESERVED   // Reserved
#define RUT_MLDQ_RESERVED   0
#endif

#ifndef MLDQG_MCADDR        // Multicast Address
#define MLDQG_MCADDR        UNSPEC_ADDR
#endif

#ifndef MLDQM_MCADDR        // Multicast Address
#define MLDQM_MCADDR        MCAST1_ADDR
#endif

#ifndef MLDQ_RESV           // Resv
#define MLDQ_RESV           0
#endif

#ifndef RUT_MLDQ_RESV       // Resv
#define RUT_MLDQ_RESV       0
#endif

#ifndef MLDQ_S_FLAG         // SFlag
#define MLDQ_S_FLAG         0
#endif

#ifndef RUT_MLDQ_S_FLAG     // SFlag
#define RUT_MLDQ_S_FLAG     0
#endif

#ifndef MLDQ_QRV            // QRV
#define MLDQ_QRV            2
#endif

#ifndef RUT_MLDQ_QRV        // QRV
#define RUT_MLDQ_QRV        2
#endif

#ifndef MLDQ_QQIC           // QQIC
#define MLDQ_QQIC           125
#endif

#ifndef RUT_MLDQ_QQIC       // QQIC
#define RUT_MLDQ_QQIC       125
#endif

//=============================================================================
// Hop-by-Hop Option Header [RFC2711]
//=============================================================================
//-----------------------------------------------------------------------------
// Pad Option
//-----------------------------------------------------------------------------
// Pad1 (1 octet)
Opt_Pad1 opt_pad_1 {
	//  OptionType  = 0;
}

// PadN, 2 octets
Opt_PadN opt_pad_2 {
	//  OptionType      = 1;
	OptDataLength   = 0;
}

// PadN, 6 octets
Opt_PadN opt_pad_6 {
	//  OptionType      = 1;
	OptDataLength   = 4;
	pad             = {0,0,0,0};
}

//-----------------------------------------------------------------------------
// Router Alert Option, MLD
//-----------------------------------------------------------------------------
// Router Alert, mld
Opt_RouterAlert opt_rtalrt_mld {
	//  OptionType      = 5;
	//  OptDataLength   = 2;
	Value               = 0; // 0: MLD
}

//-----------------------------------------------------------------------------
// Hop-by-Hop Option Header w/ Router Alert Option, MLD
//-----------------------------------------------------------------------------
Hdr_HopByHop ext_hbh_rtalert_mld {
	//  NextHeader      = MLDQ_NEXT_ICMP;
	//  HeaderExtLength = auto;
	option          = opt_rtalrt_mld;
	option          = opt_pad_2;
}

//=============================================================================
// ICMPv6 MLDv2 Query (Message Type 130)
//=============================================================================
//-----------------------------------------------------------------------------
// any -> any, MLDv2 Query any
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_any_any,
	_HETHER_any,
	{
		//  Version         = 6;
		//  TrafficClass    = any;
		//  FlowLabel       = any;
		//  PayloadLength   = any;
		//  NextHeader      = 0;
		//  HopLimit        = any;
		_SRC(any);
		_DST(any);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_any_any);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_any_any);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = any;
		Checksum            = any;
		MaxResponseDelay    = any;
		Reserved            = any;
		MulticastAddress    = any; // require defined from v6eval.
		Resv                = stop;
		//  SFlag               = any;
		//  QRV                 = any;
		//  QQIC                = any;
		//  NumOfSources        = any;
		//  SourceAddress       = any;
	}
)

//-----------------------------------------------------------------------------
// any -> any, MLDv2 Query any except QG
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_any_any_except_qg,
	_HETHER_any,
	{
		//  Version         = 6;
		//  TrafficClass    = any;
		//  FlowLabel       = any;
		//  PayloadLength   = any;
		//  NextHeader      = 0;
		//  HopLimit        = any;
		_SRC(any);
		_DST(any);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_any_any_except_qg);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_any_any_except_qg);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = any;
		Checksum            = any;
		MaxResponseDelay    = any;
		Reserved            = any;
		// MulticastAddress   != UNSPEC_ADDR;
		MulticastAddress    = oneof(MCAST1_ADDR, MCAST2_ADDR);
		Resv                = stop;
		//  SFlag               = any;
		//  QRV                 = any;
		//  QQIC                = any;
		//  NumOfSources        = any;
		//  SourceAddress       = any;
	}
)

//-----------------------------------------------------------------------------
// RUT0 -> All Nodes Address, MLDv2 Query (G)
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_rut0l_allnodes_m0,
	_HETHER_rut0_to_allnodes,
	{
		HopLimit        = MLDQ_HOP;
		_SRC(RUT0_LLOCAL_UCAST);
		_DST(ALL_NODES_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_allnodes_m0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_allnodes_m0);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = RUT_MLDQ_CODE;
		Checksum            = RUT_MLDQ_CHECKSUM;
		MaxResponseDelay   <= RUT_MLDQG_MRD;
		Reserved            = RUT_MLDQ_RESERVED;
		MulticastAddress    = MLDQG_MCADDR;
		Resv                = RUT_MLDQ_RESV;
		SFlag               = RUT_MLDQ_S_FLAG;
		QRV                 = RUT_MLDQ_QRV;
		QQIC                = RUT_MLDQ_QQIC;
		NumOfSources        = 0;
	}
)

//-----------------------------------------------------------------------------
// RUT0 -> M1, MLDv2 Query (M1)
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_rut0l_mcast1_m1n0,
	_HETHER_rut0_to_mcast1,
	{
		HopLimit        = MLDQ_HOP;
		_SRC(RUT0_LLOCAL_UCAST);
		_DST(MCAST1_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_mcast1_m1n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_mcast1_m1n0);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = RUT_MLDQ_CODE;
		Checksum            = RUT_MLDQ_CHECKSUM;
		MaxResponseDelay   <= RUT_MLDQM_MRD;
		Reserved            = RUT_MLDQ_RESERVED;
		MulticastAddress    = MLDQM_MCADDR;
		Resv                = RUT_MLDQ_RESV;
		SFlag               = RUT_MLDQ_S_FLAG;
		QRV                 = RUT_MLDQ_QRV;
		QQIC                = RUT_MLDQ_QQIC;
		NumOfSources        = 0;
	}
)

//-----------------------------------------------------------------------------
// RUT0 -> M1, MLDv2 Query (M1,{any source})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_rut0l_mcast1_m1nany,
	_HETHER_rut0_to_mcast1,
	{
		HopLimit        = MLDQ_HOP;
		_SRC(RUT0_LLOCAL_UCAST);
		_DST(MCAST1_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_mcast1_m1nany);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_mcast1_m1nany);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = RUT_MLDQ_CODE;
		Checksum            = RUT_MLDQ_CHECKSUM;
		MaxResponseDelay   <= RUT_MLDQM_MRD;
		Reserved            = RUT_MLDQ_RESERVED;
		MulticastAddress    = MLDQM_MCADDR;
		Resv                = RUT_MLDQ_RESV;
		SFlag               = RUT_MLDQ_S_FLAG;
		QRV                 = RUT_MLDQ_QRV;
		QQIC                = RUT_MLDQ_QQIC;
		NumOfSources        = stop;
	}
)

//-----------------------------------------------------------------------------
// RUT0 -> M1, MLDv2 Query (M1,{1 source})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2query_exth (
//	MLDv2Q_rut0l_mcast1_m1n1any,
//	_HETHER_rut0_to_mcast1,
//	{
//		HopLimit        = MLDQ_HOP;
//		_SRC(RUT0_LLOCAL_UCAST);
//		_DST(MCAST1_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_mcast1_m1n1any);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_mcast1_m1n1any);
//	},
//	{
//		Type                = MLDQ_TYPE;
//		Code                = RUT_MLDQ_CODE;
//		Checksum            = RUT_MLDQ_CHECKSUM;
//		MaxResponseDelay   <= RUT_MLDQM_MRD;
//		Reserved            = RUT_MLDQ_RESERVED;
//		MulticastAddress    = MLDQM_MCADDR;
//		Resv                = RUT_MLDQ_RESV;
//		SFlag               = RUT_MLDQ_S_FLAG;
//		QRV                 = RUT_MLDQ_QRV;
//		QQIC                = RUT_MLDQ_QQIC;
//		NumOfSources        = 1;
//		SourceAddress       = any;
//	}
//)

//-----------------------------------------------------------------------------
// RUT0 -> M1, MLDv2 Query (M1,{2 sources})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_rut0l_mcast1_m1n2any,
	_HETHER_rut0_to_mcast1,
	{
		HopLimit        = MLDQ_HOP;
		_SRC(RUT0_LLOCAL_UCAST);
		_DST(MCAST1_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_mcast1_m1n2any);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_mcast1_m1n2any);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = RUT_MLDQ_CODE;
		Checksum            = RUT_MLDQ_CHECKSUM;
		MaxResponseDelay   <= RUT_MLDQM_MRD;
		Reserved            = RUT_MLDQ_RESERVED;
		MulticastAddress    = MLDQM_MCADDR;
		Resv                = RUT_MLDQ_RESV;
		SFlag               = RUT_MLDQ_S_FLAG;
		QRV                 = RUT_MLDQ_QRV;
		QQIC                = RUT_MLDQ_QQIC;
		NumOfSources        = 2;
		SourceAddress       = any;
		SourceAddress       = any;
	}
)

//-----------------------------------------------------------------------------
// RUT0 -> M1, MLDv2 Query (M1,{3 sources})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_rut0l_mcast1_m1n3any,
	_HETHER_rut0_to_mcast1,
	{
		HopLimit        = MLDQ_HOP;
		_SRC(RUT0_LLOCAL_UCAST);
		_DST(MCAST1_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_mcast1_m1n3any);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_mcast1_m1n3any);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = RUT_MLDQ_CODE;
		Checksum            = RUT_MLDQ_CHECKSUM;
		MaxResponseDelay   <= RUT_MLDQM_MRD;
		Reserved            = RUT_MLDQ_RESERVED;
		MulticastAddress    = MLDQM_MCADDR;
		Resv                = RUT_MLDQ_RESV;
		SFlag               = RUT_MLDQ_S_FLAG;
		QRV                 = RUT_MLDQ_QRV;
		QQIC                = RUT_MLDQ_QQIC;
		NumOfSources        = 3;
		SourceAddress       = any;
		SourceAddress       = any;
		SourceAddress       = any;
	}
)

//-----------------------------------------------------------------------------
// RUT0 -> M1, MLDv2 Query (M1,{4 sources})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_rut0l_mcast1_m1n4any,
	_HETHER_rut0_to_mcast1,
	{
		HopLimit        = MLDQ_HOP;
		_SRC(RUT0_LLOCAL_UCAST);
		_DST(MCAST1_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_mcast1_m1n4any);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_mcast1_m1n4any);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = RUT_MLDQ_CODE;
		Checksum            = RUT_MLDQ_CHECKSUM;
		MaxResponseDelay   <= RUT_MLDQM_MRD;
		Reserved            = RUT_MLDQ_RESERVED;
		MulticastAddress    = MLDQM_MCADDR;
		Resv                = RUT_MLDQ_RESV;
		SFlag               = RUT_MLDQ_S_FLAG;
		QRV                 = RUT_MLDQ_QRV;
		QQIC                = RUT_MLDQ_QQIC;
		NumOfSources        = 4;
		SourceAddress       = any;
		SourceAddress       = any;
		SourceAddress       = any;
		SourceAddress       = any;
	}
)

//-----------------------------------------------------------------------------
// RUT0 -> M1, MLDv2 Query (M1,{5 sources})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_rut0l_mcast1_m1n5any,
	_HETHER_rut0_to_mcast1,
	{
		HopLimit        = MLDQ_HOP;
		_SRC(RUT0_LLOCAL_UCAST);
		_DST(MCAST1_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_mcast1_m1n5any);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_mcast1_m1n5any);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = RUT_MLDQ_CODE;
		Checksum            = RUT_MLDQ_CHECKSUM;
		MaxResponseDelay   <= RUT_MLDQM_MRD;
		Reserved            = RUT_MLDQ_RESERVED;
		MulticastAddress    = MLDQM_MCADDR;
		Resv                = RUT_MLDQ_RESV;
		SFlag               = RUT_MLDQ_S_FLAG;
		QRV                 = RUT_MLDQ_QRV;
		QQIC                = RUT_MLDQ_QQIC;
		NumOfSources        = 5;
		SourceAddress       = any;
		SourceAddress       = any;
		SourceAddress       = any;
		SourceAddress       = any;
		SourceAddress       = any;
	}
)

//-----------------------------------------------------------------------------
// RUT0 -> M1, MLDv2 Query (M1,{S1})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_rut0l_mcast1_m1n1s1,
	_HETHER_rut0_to_mcast1,
	{
		HopLimit        = MLDQ_HOP;
		_SRC(RUT0_LLOCAL_UCAST);
		_DST(MCAST1_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_mcast1_m1n1s1);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_mcast1_m1n1s1);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = RUT_MLDQ_CODE;
		Checksum            = RUT_MLDQ_CHECKSUM;
		MaxResponseDelay   <= RUT_MLDQM_MRD;
		Reserved            = RUT_MLDQ_RESERVED;
		MulticastAddress    = MLDQM_MCADDR;
		Resv                = RUT_MLDQ_RESV;
		SFlag               = RUT_MLDQ_S_FLAG;
		QRV                 = RUT_MLDQ_QRV;
		QQIC                = RUT_MLDQ_QQIC;
		NumOfSources        = 1;
		SourceAddress       = MSRC_01;
	}
)

//-----------------------------------------------------------------------------
// RUT0 -> M1, MLDv2 Query (M1,{S2})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_rut0l_mcast1_m1n1s2,
	_HETHER_rut0_to_mcast1,
	{
		HopLimit        = MLDQ_HOP;
		_SRC(RUT0_LLOCAL_UCAST);
		_DST(MCAST1_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_mcast1_m1n1s2);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_mcast1_m1n1s2);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = RUT_MLDQ_CODE;
		Checksum            = RUT_MLDQ_CHECKSUM;
		MaxResponseDelay   <= RUT_MLDQM_MRD;
		Reserved            = RUT_MLDQ_RESERVED;
		MulticastAddress    = MLDQM_MCADDR;
		Resv                = RUT_MLDQ_RESV;
		SFlag               = RUT_MLDQ_S_FLAG;
		QRV                 = RUT_MLDQ_QRV;
		QQIC                = RUT_MLDQ_QQIC;
		NumOfSources        = 1;
		SourceAddress       = MSRC_02;
	}
)

//-----------------------------------------------------------------------------
// RUT0 -> M1, MLDv2 Query (M1,{S3})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_rut0l_mcast1_m1n1s3,
	_HETHER_rut0_to_mcast1,
	{
		HopLimit        = MLDQ_HOP;
		_SRC(RUT0_LLOCAL_UCAST);
		_DST(MCAST1_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_mcast1_m1n1s3);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_mcast1_m1n1s3);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = RUT_MLDQ_CODE;
		Checksum            = RUT_MLDQ_CHECKSUM;
		MaxResponseDelay   <= RUT_MLDQM_MRD;
		Reserved            = RUT_MLDQ_RESERVED;
		MulticastAddress    = MLDQM_MCADDR;
		Resv                = RUT_MLDQ_RESV;
		SFlag               = RUT_MLDQ_S_FLAG;
		QRV                 = RUT_MLDQ_QRV;
		QQIC                = RUT_MLDQ_QQIC;
		NumOfSources        = 1;
		SourceAddress       = MSRC_03;
	}
)

//-----------------------------------------------------------------------------
// RUT0 -> M1, MLDv2 Query (M1,{S4})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_rut0l_mcast1_m1n1s4,
	_HETHER_rut0_to_mcast1,
	{
		HopLimit        = MLDQ_HOP;
		_SRC(RUT0_LLOCAL_UCAST);
		_DST(MCAST1_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_mcast1_m1n1s4);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_mcast1_m1n1s4);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = RUT_MLDQ_CODE;
		Checksum            = RUT_MLDQ_CHECKSUM;
		MaxResponseDelay   <= RUT_MLDQM_MRD;
		Reserved            = RUT_MLDQ_RESERVED;
		MulticastAddress    = MLDQM_MCADDR;
		Resv                = RUT_MLDQ_RESV;
		SFlag               = RUT_MLDQ_S_FLAG;
		QRV                 = RUT_MLDQ_QRV;
		QQIC                = RUT_MLDQ_QQIC;
		NumOfSources        = 1;
		SourceAddress       = MSRC_04;
	}
)

//-----------------------------------------------------------------------------
// RUT0 -> M1, MLDv2 Query (M1,{S5})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_rut0l_mcast1_m1n1s5,
	_HETHER_rut0_to_mcast1,
	{
		HopLimit        = MLDQ_HOP;
		_SRC(RUT0_LLOCAL_UCAST);
		_DST(MCAST1_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_mcast1_m1n1s5);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_mcast1_m1n1s5);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = RUT_MLDQ_CODE;
		Checksum            = RUT_MLDQ_CHECKSUM;
		MaxResponseDelay   <= RUT_MLDQM_MRD;
		Reserved            = RUT_MLDQ_RESERVED;
		MulticastAddress    = MLDQM_MCADDR;
		Resv                = RUT_MLDQ_RESV;
		SFlag               = RUT_MLDQ_S_FLAG;
		QRV                 = RUT_MLDQ_QRV;
		QQIC                = RUT_MLDQ_QQIC;
		NumOfSources        = 1;
		SourceAddress       = MSRC_05;
	}
)

//-----------------------------------------------------------------------------
// RUT0 -> M2, MLDv2 Query (M2)
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_rut0l_mcast2_m2n0,
	_HETHER_rut0_to_mcast2,
	{
		HopLimit        = MLDQ_HOP;
		_SRC(RUT0_LLOCAL_UCAST);
		_DST(MCAST2_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_mcast2_m2n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_mcast2_m2n0);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = RUT_MLDQ_CODE;
		Checksum            = RUT_MLDQ_CHECKSUM;
		MaxResponseDelay   <= RUT_MLDQM_MRD;
		Reserved            = RUT_MLDQ_RESERVED;
		MulticastAddress    = MCAST2_ADDR;
		Resv                = RUT_MLDQ_RESV;
		SFlag               = RUT_MLDQ_S_FLAG;
		QRV                 = RUT_MLDQ_QRV;
		QQIC                = RUT_MLDQ_QQIC;
		NumOfSources        = 0;
	}
)

//-----------------------------------------------------------------------------
// RUT0 -> M2, MLDv2 Query (M2,{1 source})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2query_exth (
//	MLDv2Q_rut0l_mcast2_m2n1any,
//	_HETHER_rut0_to_mcast2,
//	{
//		HopLimit        = MLDQ_HOP;
//		_SRC(RUT0_LLOCAL_UCAST);
//		_DST(MCAST2_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_mcast2_m2n1any);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_mcast2_m2n1any);
//	},
//	{
//		Type                = MLDQ_TYPE;
//		Code                = RUT_MLDQ_CODE;
//		Checksum            = RUT_MLDQ_CHECKSUM;
//		MaxResponseDelay   <= RUT_MLDQM_MRD;
//		Reserved            = RUT_MLDQ_RESERVED;
//		MulticastAddress    = MCAST2_ADDR;
//		Resv                = RUT_MLDQ_RESV;
//		SFlag               = RUT_MLDQ_S_FLAG;
//		QRV                 = RUT_MLDQ_QRV;
//		QQIC                = RUT_MLDQ_QQIC;
//		NumOfSources        = 1;
//		SourceAddress       = any;
//	}
//)

//-----------------------------------------------------------------------------
// RUT0 -> M2, MLDv2 Query (M2,{2 source})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_rut0l_mcast2_m2n2any,
	_HETHER_rut0_to_mcast2,
	{
		HopLimit        = MLDQ_HOP;
		_SRC(RUT0_LLOCAL_UCAST);
		_DST(MCAST2_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_mcast2_m2n2any);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_mcast2_m2n2any);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = RUT_MLDQ_CODE;
		Checksum            = RUT_MLDQ_CHECKSUM;
		MaxResponseDelay   <= RUT_MLDQM_MRD;
		Reserved            = RUT_MLDQ_RESERVED;
		MulticastAddress    = MCAST2_ADDR;
		Resv                = RUT_MLDQ_RESV;
		SFlag               = RUT_MLDQ_S_FLAG;
		QRV                 = RUT_MLDQ_QRV;
		QQIC                = RUT_MLDQ_QQIC;
		NumOfSources        = 2;
		SourceAddress       = any;
		SourceAddress       = any;
	}
)

//-----------------------------------------------------------------------------
// RUT0 -> M2, MLDv2 Query (M2,{3 source})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2query_exth (
//	MLDv2Q_rut0l_mcast2_m2n3any,
//	_HETHER_rut0_to_mcast2,
//	{
//		HopLimit        = MLDQ_HOP;
//		_SRC(RUT0_LLOCAL_UCAST);
//		_DST(MCAST2_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_mcast2_m2n3any);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_mcast2_m2n3any);
//	},
//	{
//		Type                = MLDQ_TYPE;
//		Code                = RUT_MLDQ_CODE;
//		Checksum            = RUT_MLDQ_CHECKSUM;
//		MaxResponseDelay   <= RUT_MLDQM_MRD;
//		Reserved            = RUT_MLDQ_RESERVED;
//		MulticastAddress    = MCAST2_ADDR;
//		Resv                = RUT_MLDQ_RESV;
//		SFlag               = RUT_MLDQ_S_FLAG;
//		QRV                 = RUT_MLDQ_QRV;
//		QQIC                = RUT_MLDQ_QQIC;
//		NumOfSources        = 3;
//		SourceAddress       = any;
//		SourceAddress       = any;
//		SourceAddress       = any;
//	}
//)

//-----------------------------------------------------------------------------
// RUT0 -> M2, MLDv2 Query (M2,{4 source})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2query_exth (
//	MLDv2Q_rut0l_mcast2_m2n4any,
//	_HETHER_rut0_to_mcast2,
//	{
//		HopLimit        = MLDQ_HOP;
//		_SRC(RUT0_LLOCAL_UCAST);
//		_DST(MCAST2_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_mcast2_m2n4any);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_mcast2_m2n4any);
//	},
//	{
//		Type                = MLDQ_TYPE;
//		Code                = RUT_MLDQ_CODE;
//		Checksum            = RUT_MLDQ_CHECKSUM;
//		MaxResponseDelay   <= RUT_MLDQM_MRD;
//		Reserved            = RUT_MLDQ_RESERVED;
//		MulticastAddress    = MCAST2_ADDR;
//		Resv                = RUT_MLDQ_RESV;
//		SFlag               = RUT_MLDQ_S_FLAG;
//		QRV                 = RUT_MLDQ_QRV;
//		QQIC                = RUT_MLDQ_QQIC;
//		NumOfSources        = 4;
//		SourceAddress       = any;
//		SourceAddress       = any;
//		SourceAddress       = any;
//		SourceAddress       = any;
//	}
//)

//-----------------------------------------------------------------------------
// RUT0 -> M2, MLDv2 Query (M2,{5 source})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2query_exth (
//	MLDv2Q_rut0l_mcast2_m2n5any,
//	_HETHER_rut0_to_mcast2,
//	{
//		HopLimit        = MLDQ_HOP;
//		_SRC(RUT0_LLOCAL_UCAST);
//		_DST(MCAST2_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_mcast2_m2n5any);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_mcast2_m2n5any);
//	},
//	{
//		Type                = MLDQ_TYPE;
//		Code                = RUT_MLDQ_CODE;
//		Checksum            = RUT_MLDQ_CHECKSUM;
//		MaxResponseDelay   <= RUT_MLDQM_MRD;
//		Reserved            = RUT_MLDQ_RESERVED;
//		MulticastAddress    = MCAST2_ADDR;
//		Resv                = RUT_MLDQ_RESV;
//		SFlag               = RUT_MLDQ_S_FLAG;
//		QRV                 = RUT_MLDQ_QRV;
//		QQIC                = RUT_MLDQ_QQIC;
//		NumOfSources        = 5;
//		SourceAddress       = any;
//		SourceAddress       = any;
//		SourceAddress       = any;
//		SourceAddress       = any;
//		SourceAddress       = any;
//	}
//)

//-----------------------------------------------------------------------------
// RUT0 -> M2, MLDv2 Query (M2,{S1})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_rut0l_mcast2_m2n1s1,
	_HETHER_rut0_to_mcast2,
	{
		HopLimit        = MLDQ_HOP;
		_SRC(RUT0_LLOCAL_UCAST);
		_DST(MCAST2_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_rut0l_mcast2_m2n1s1);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_rut0l_mcast2_m2n1s1);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = RUT_MLDQ_CODE;
		Checksum            = RUT_MLDQ_CHECKSUM;
		MaxResponseDelay   <= RUT_MLDQM_MRD;
		Reserved            = RUT_MLDQ_RESERVED;
		MulticastAddress    = MCAST2_ADDR;
		Resv                = RUT_MLDQ_RESV;
		SFlag               = RUT_MLDQ_S_FLAG;
		QRV                 = RUT_MLDQ_QRV;
		QQIC                = RUT_MLDQ_QQIC;
		NumOfSources        = 1;
		SourceAddress       = MSRC_01;
	}
)

//-----------------------------------------------------------------------------
// RUT1 -> All Nodes Address, MLDv2 Query (G)
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2query_exth (
	MLDv2Q_rut1l_allnodes_m0,
	_HETHER_rut1_to_allnodes,
	{
		HopLimit        = MLDQ_HOP;
		_SRC(RUT1_LLOCAL_UCAST);
		_DST(ALL_NODES_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2Q_rut1l_allnodes_m0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2Q_rut1l_allnodes_m0);
	},
	{
		Type                = MLDQ_TYPE;
		Code                = RUT_MLDQ_CODE;
		Checksum            = RUT_MLDQ_CHECKSUM;
		MaxResponseDelay   <= RUT_MLDQG_MRD;
		Reserved            = RUT_MLDQ_RESERVED;
		MulticastAddress    = MLDQG_MCADDR;
		Resv                = RUT_MLDQ_RESV;
		SFlag               = RUT_MLDQ_S_FLAG;
		QRV                 = RUT_MLDQ_QRV;
		QQIC                = RUT_MLDQ_QQIC;
		NumOfSources        = 0;
	}
)

//=============================================================================
// Field Value in MLDv2 Report Message
//=============================================================================
//-----------------------------------------------------------------------------
// Field Value in IPv6 Header in MLDv2 Report
//-----------------------------------------------------------------------------
#ifndef MLDv2R_HOP          // Hop Limit
#define MLDv2R_HOP          1
#endif

#ifndef RUT_MLDv2R_HOP      // Hop Limit
#define RUT_MLDv2R_HOP      1
#endif

//-----------------------------------------------------------------------------
// Field Value in Hop-by-Hop Option Header in MLDv2 Report
//-----------------------------------------------------------------------------
#ifndef MLDv2R_NEXT_ICMP    // NextHeader
#define MLDv2R_NEXT_ICMP    58
#endif

//-----------------------------------------------------------------------------
// Field Value in MLDv2 Report
//-----------------------------------------------------------------------------
#ifndef MLDv2R_TYPE         // type
#define MLDv2R_TYPE         143
#endif

#ifndef MLDv2R_CODE         // as Reserved
#define MLDv2R_CODE         0
#endif

#ifndef RUT_MLDv2R_CODE     // as Reserved
#define RUT_MLDv2R_CODE     0
#endif

#ifndef MLDv2R_CHECKSUM     // Checksum
#define MLDv2R_CHECKSUM     auto
#endif

#ifndef RUT_MLDv2R_CHECKSUM // Checksum
#define RUT_MLDv2R_CHECKSUM auto
#endif

#ifndef MLDv2R_RESERVED     // Reserved
#define MLDv2R_RESERVED     0
#endif

#ifndef RUT_MLDv2R_RESERVED // Reserved
#define RUT_MLDv2R_RESERVED 0
#endif

//=============================================================================
// Multicast Address Record in MLDv2 Report
// Record Type 1   MODE_IS_INCLUDE
//             2   MODE_IS_EXCLUDE
//             3   CHANGE_TO_INCLUDE_MODE
//             4   CHANGE_TO_EXCLUDE_MODE
//             5   ALLOW_NEW_SOURCES
//             6   BLOCK_OLD_SOURCES
//=============================================================================
//-----------------------------------------------------------------------------
// MCAST1
//-----------------------------------------------------------------------------
// IS_IN(M1,{null})
MLDv2_AddrRecord mld2_rcd_t1m1n0 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 0;
	MulticastAddress    = MCAST1_ADDR;
}

// IS_IN(M1,{S1})
MLDv2_AddrRecord mld2_rcd_t1m1n1s1 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
}

// IS_IN(M1,{S2})
MLDv2_AddrRecord mld2_rcd_t1m1n1s2 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
}

// IS_IN(M1,{S3})
MLDv2_AddrRecord mld2_rcd_t1m1n1s3 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_03;
}

// IS_IN(M1,{S4})
MLDv2_AddrRecord mld2_rcd_t1m1n1s4 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
}

// IS_IN(M1,{S5})
MLDv2_AddrRecord mld2_rcd_t1m1n1s5 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_05;
}

// IS_IN(M1,{S1,S2})
MLDv2_AddrRecord mld2_rcd_t1m1n2s12 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
}

// IS_IN(M1,{S1,S3})
MLDv2_AddrRecord mld2_rcd_t1m1n2s13 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_03;
}

// IS_IN(M1,{S1,S4})
MLDv2_AddrRecord mld2_rcd_t1m1n2s14 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_04;
}

// IS_IN(M1,{S1,S5})
MLDv2_AddrRecord mld2_rcd_t1m1n2s15 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_05;
}

// IS_IN(M1,{S2,S3})
MLDv2_AddrRecord mld2_rcd_t1m1n2s23 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

// IS_IN(M1,{S2,S4})
MLDv2_AddrRecord mld2_rcd_t1m1n2s24 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_04;
}

// IS_IN(M1,{S2,S5})
MLDv2_AddrRecord mld2_rcd_t1m1n2s25 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_05;
}

// IS_IN(M1,{S3,S4})
MLDv2_AddrRecord mld2_rcd_t1m1n2s34 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_04;
}

// IS_IN(M1,{S3,S5})
MLDv2_AddrRecord mld2_rcd_t1m1n2s35 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_05;
}

// IS_IN(M1,{S4,S5})
MLDv2_AddrRecord mld2_rcd_t1m1n2s45 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_05;
}

// IS_IN(M1,{S1,S2,S3})
MLDv2_AddrRecord mld2_rcd_t1m1n3s123 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 3;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

// IS_IN(M1,{S1,S2,S3})
MLDv2_AddrRecord mld2_rcd_t1m1n3s135 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 3;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_05;
}

// IS_IN(M1,{S1,S2,S3,S4})
MLDv2_AddrRecord mld2_rcd_t1m1n4s1234 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 4;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_04;
}

//-----------------------------------------------------------------------------
// IS_EX(M1,{null})
MLDv2_AddrRecord mld2_rcd_t2m1n0 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 0;
	MulticastAddress    = MCAST1_ADDR;
}

// IS_EX(M1,{S1})
MLDv2_AddrRecord mld2_rcd_t2m1n1s1 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
}

// IS_EX(M1,{S2})
MLDv2_AddrRecord mld2_rcd_t2m1n1s2 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
}

// IS_EX(M1,{S3})
MLDv2_AddrRecord mld2_rcd_t2m1n1s3 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_03;
}

// IS_EX(M1,{S4})
MLDv2_AddrRecord mld2_rcd_t2m1n1s4 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
}

// IS_EX(M1,{S5})
MLDv2_AddrRecord mld2_rcd_t2m1n1s5 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_05;
}

// IS_EX(M1,{S1,S2})
MLDv2_AddrRecord mld2_rcd_t2m1n2s12 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
}

// IS_EX(M1,{S1,S3})
MLDv2_AddrRecord mld2_rcd_t2m1n2s13 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_03;
}

// IS_EX(M1,{S1,S4})
MLDv2_AddrRecord mld2_rcd_t2m1n2s14 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_04;
}

// IS_EX(M1,{S1,S5})
MLDv2_AddrRecord mld2_rcd_t2m1n2s15 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_05;
}

// IS_EX(M1,{S2,S3})
MLDv2_AddrRecord mld2_rcd_t2m1n2s23 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

// IS_EX(M1,{S2,S4})
MLDv2_AddrRecord mld2_rcd_t2m1n2s24 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_04;
}

// IS_EX(M1,{S2,S5})
MLDv2_AddrRecord mld2_rcd_t2m1n2s25 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_05;
}

// IS_EX(M1,{S3,S4})
MLDv2_AddrRecord mld2_rcd_t2m1n2s34 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_04;
}

// IS_EX(M1,{S3,S5})
MLDv2_AddrRecord mld2_rcd_t2m1n2s35 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_05;
}

// IS_EX(M1,{S4,S5})
MLDv2_AddrRecord mld2_rcd_t2m1n2s45 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_05;
}

// IS_EX(M1,{S1,S2,S3})
MLDv2_AddrRecord mld2_rcd_t2m1n3s123 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 3;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

//-----------------------------------------------------------------------------
// TO_IN(M1,{null})
MLDv2_AddrRecord mld2_rcd_t3m1n0 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 0;
	MulticastAddress    = MCAST1_ADDR;
}

// TO_IN(M1,{S1})
MLDv2_AddrRecord mld2_rcd_t3m1n1s1 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
}

// TO_IN(M1,{S2})
MLDv2_AddrRecord mld2_rcd_t3m1n1s2 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
}

// TO_IN(M1,{S3})
MLDv2_AddrRecord mld2_rcd_t3m1n1s3 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_03;
}

// TO_IN(M1,{S4})
MLDv2_AddrRecord mld2_rcd_t3m1n1s4 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
}

// TO_IN(M1,{S5})
MLDv2_AddrRecord mld2_rcd_t3m1n1s5 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_05;
}

// TO_IN(M1,{S1,S2})
MLDv2_AddrRecord mld2_rcd_t3m1n2s12 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
}

// TO_IN(M1,{S1,S3})
MLDv2_AddrRecord mld2_rcd_t3m1n2s13 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_03;
}

// TO_IN(M1,{S1,S4})
MLDv2_AddrRecord mld2_rcd_t3m1n2s14 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_04;
}

// TO_IN(M1,{S1,S5})
MLDv2_AddrRecord mld2_rcd_t3m1n2s15 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_05;
}

// TO_IN(M1,{S2,S3})
MLDv2_AddrRecord mld2_rcd_t3m1n2s23 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

// TO_IN(M1,{S2,S4})
MLDv2_AddrRecord mld2_rcd_t3m1n2s24 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_04;
}

// TO_IN(M1,{S2,S5})
MLDv2_AddrRecord mld2_rcd_t3m1n2s25 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_05;
}

// TO_IN(M1,{S3,S4})
MLDv2_AddrRecord mld2_rcd_t3m1n2s34 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_04;
}

// TO_IN(M1,{S3,S5})
MLDv2_AddrRecord mld2_rcd_t3m1n2s35 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_05;
}

// TO_IN(M1,{S4,S5})
MLDv2_AddrRecord mld2_rcd_t3m1n2s45 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_05;
}

// TO_IN(M1,{S1,S2,S3})
MLDv2_AddrRecord mld2_rcd_t3m1n3s123 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 3;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

//-----------------------------------------------------------------------------
// TO_EX(M1,{null})
MLDv2_AddrRecord mld2_rcd_t4m1n0 {
	Type = 4;
	AuxDataLen          = 0;
	NumOfSources        = 0;
	MulticastAddress    = MCAST1_ADDR;
}

// TO_EX(M1,{S1})
MLDv2_AddrRecord mld2_rcd_t4m1n1s1 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
}

// TO_EX(M1,{S2})
MLDv2_AddrRecord mld2_rcd_t4m1n1s2 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
}

// TO_EX(M1,{S3})
MLDv2_AddrRecord mld2_rcd_t4m1n1s3 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_03;
}

// TO_EX(M1,{S4})
MLDv2_AddrRecord mld2_rcd_t4m1n1s4 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
}

// TO_EX(M1,{S5})
MLDv2_AddrRecord mld2_rcd_t4m1n1s5 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_05;
}

// TO_EX(M1,{S1,S2})
MLDv2_AddrRecord mld2_rcd_t4m1n2s12 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
}

// TO_EX(M1,{S1,S3})
MLDv2_AddrRecord mld2_rcd_t4m1n2s13 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_03;
}

// TO_EX(M1,{S1,S4})
MLDv2_AddrRecord mld2_rcd_t4m1n2s14 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_04;
}

// TO_EX(M1,{S1,S5})
MLDv2_AddrRecord mld2_rcd_t4m1n2s15 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_05;
}

// TO_EX(M1,{S2,S3})
MLDv2_AddrRecord mld2_rcd_t4m1n2s23 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

// TO_EX(M1,{S2,S4})
MLDv2_AddrRecord mld2_rcd_t4m1n2s24 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_04;
}

// TO_EX(M1,{S2,S5})
MLDv2_AddrRecord mld2_rcd_t4m1n2s25 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_05;
}

// TO_EX(M1,{S3,S4})
MLDv2_AddrRecord mld2_rcd_t4m1n2s34 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_04;
}

// TO_EX(M1,{S3,S5})
MLDv2_AddrRecord mld2_rcd_t4m1n2s35 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_05;
}

// TO_EX(M1,{S4,S5})
MLDv2_AddrRecord mld2_rcd_t4m1n2s45 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_05;
}

// TO_EX(M1,{S1,S2,S3})
MLDv2_AddrRecord mld2_rcd_t4m1n3s123 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 3;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

//-----------------------------------------------------------------------------
// ALLOW(M1,{null})
MLDv2_AddrRecord mld2_rcd_t5m1n0 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 0;
	MulticastAddress    = MCAST1_ADDR;
}

// ALLOW(M1,{S1})
MLDv2_AddrRecord mld2_rcd_t5m1n1s1 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
}

// ALLOW(M1,{S2})
MLDv2_AddrRecord mld2_rcd_t5m1n1s2 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
}

// ALLOW(M1,{S3})
MLDv2_AddrRecord mld2_rcd_t5m1n1s3 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_03;
}

// ALLOW(M1,{S4})
MLDv2_AddrRecord mld2_rcd_t5m1n1s4 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
}

// ALLOW(M1,{S5})
MLDv2_AddrRecord mld2_rcd_t5m1n1s5 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_05;
}

// ALLOW(M1,{S1,S2})
MLDv2_AddrRecord mld2_rcd_t5m1n2s12 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
}

// ALLOW(M1,{S1,S3})
MLDv2_AddrRecord mld2_rcd_t5m1n2s13 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_03;
}

// ALLOW(M1,{S1,S4})
MLDv2_AddrRecord mld2_rcd_t5m1n2s14 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_04;
}

// ALLOW(M1,{S1,S5})
MLDv2_AddrRecord mld2_rcd_t5m1n2s15 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_05;
}

// ALLOW(M1,{S2,S3})
MLDv2_AddrRecord mld2_rcd_t5m1n2s23 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

// ALLOW(M1,{S2,S4})
MLDv2_AddrRecord mld2_rcd_t5m1n2s24 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_04;
}

// ALLOW(M1,{S2,S5})
MLDv2_AddrRecord mld2_rcd_t5m1n2s25 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_05;
}

// ALLOW(M1,{S3,S4})
MLDv2_AddrRecord mld2_rcd_t5m1n2s34 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_04;
}

// ALLOW(M1,{S3,S5})
MLDv2_AddrRecord mld2_rcd_t5m1n2s35 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_05;
}

// ALLOW(M1,{S4,S5})
MLDv2_AddrRecord mld2_rcd_t5m1n2s45 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_05;
}

// ALLOW(M1,{S1,S2,S3})
MLDv2_AddrRecord mld2_rcd_t5m1n3s123 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 3;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

//-----------------------------------------------------------------------------
// BLOCK(M1,{null})
MLDv2_AddrRecord mld2_rcd_t6m1n0 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 0;
	MulticastAddress    = MCAST1_ADDR;
}

// BLOCK(M1,{S1})
MLDv2_AddrRecord mld2_rcd_t6m1n1s1 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
}

// BLOCK(M1,{S2})
MLDv2_AddrRecord mld2_rcd_t6m1n1s2 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
}

// BLOCK(M1,{S3})
MLDv2_AddrRecord mld2_rcd_t6m1n1s3 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_03;
}

// BLOCK(M1,{S4})
MLDv2_AddrRecord mld2_rcd_t6m1n1s4 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
}

// BLOCK(M1,{S5})
MLDv2_AddrRecord mld2_rcd_t6m1n1s5 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_05;
}

// BLOCK(M1,{S1,S2})
MLDv2_AddrRecord mld2_rcd_t6m1n2s12 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
}

// BLOCK(M1,{S1,S3})
MLDv2_AddrRecord mld2_rcd_t6m1n2s13 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_03;
}

// BLOCK(M1,{S1,S4})
MLDv2_AddrRecord mld2_rcd_t6m1n2s14 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_04;
}

// BLOCK(M1,{S1,S5})
MLDv2_AddrRecord mld2_rcd_t6m1n2s15 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_05;
}

// BLOCK(M1,{S2,S3})
MLDv2_AddrRecord mld2_rcd_t6m1n2s23 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

// BLOCK(M1,{S2,S4})
MLDv2_AddrRecord mld2_rcd_t6m1n2s24 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_04;
}

// BLOCK(M1,{S2,S5})
MLDv2_AddrRecord mld2_rcd_t6m1n2s25 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_05;
}

// BLOCK(M1,{S3,S4})
MLDv2_AddrRecord mld2_rcd_t6m1n2s34 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_04;
}

// BLOCK(M1,{S3,S5})
MLDv2_AddrRecord mld2_rcd_t6m1n2s35 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_05;
}

// BLOCK(M1,{S4,S5})
MLDv2_AddrRecord mld2_rcd_t6m1n2s45 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_05;
}

// BLOCK(M1,{S1,S2,S3})
MLDv2_AddrRecord mld2_rcd_t6m1n3s123 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 3;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

// BLOCK(M1,{S1,S2,S3,S4,S5})
MLDv2_AddrRecord mld2_rcd_t6m1n5s12345 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 5;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_05;
}

//-----------------------------------------------------------------------------
// MCAST2
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// IS_IN(M2,{null})
MLDv2_AddrRecord mld2_rcd_t1m2n0 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST2_ADDR;
}

// IS_IN(M2,{S1})
MLDv2_AddrRecord mld2_rcd_t1m2n1s1 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
}

// IS_IN(M2,{S2})
MLDv2_AddrRecord mld2_rcd_t1m2n1s2 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_02;
}

// IS_IN(M2,{S3})
MLDv2_AddrRecord mld2_rcd_t1m2n1s3 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_03;
}

// IS_IN(M2,{S1,S2})
MLDv2_AddrRecord mld2_rcd_t1m2n2s12 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
}

// IS_IN(M2,{S1,S3})
MLDv2_AddrRecord mld2_rcd_t1m2n2s13 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_03;
}

// IS_IN(M2,{S2,S3})
MLDv2_AddrRecord mld2_rcd_t1m2n2s23 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

// IS_IN(M2,{S1,S2,S3})
MLDv2_AddrRecord mld2_rcd_t1m2n3s123 {
	Type                = 1;
	AuxDataLen          = 0;
	NumOfSources        = 3;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

//-----------------------------------------------------------------------------
// IS_EX(M2,{null})
MLDv2_AddrRecord mld2_rcd_t2m2n0 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 0;
	MulticastAddress    = MCAST2_ADDR;
}

// IS_EX(M2,{S1})
MLDv2_AddrRecord mld2_rcd_t2m2n1s1 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
}

// IS_EX(M2,{S2})
MLDv2_AddrRecord mld2_rcd_t2m2n1s2 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_02;
}

// IS_EX(M2,{S3})
MLDv2_AddrRecord mld2_rcd_t2m2n1s3 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_03;
}

// IS_EX(M2,{S1,S2})
MLDv2_AddrRecord mld2_rcd_t2m2n2s12 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
}

// IS_EX(M2,{S1,S3})
MLDv2_AddrRecord mld2_rcd_t2m2n2s13 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_03;
}

// IS_EX(M2,{S2,S3})
MLDv2_AddrRecord mld2_rcd_t2m2n2s23 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

// IS_EX(M2,{S3,S4})
MLDv2_AddrRecord mld2_rcd_t2m2n2s34 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_04;
}

// IS_EX(M2,{S1,S3,S5})
MLDv2_AddrRecord mld2_rcd_t2m2n3s135 {
	Type                = 2;
	AuxDataLen          = 0;
	NumOfSources        = 3;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_05;
}

//-----------------------------------------------------------------------------
// TO_IN(M2,{null})
MLDv2_AddrRecord mld2_rcd_t3m2n0 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 0;
	MulticastAddress    = MCAST2_ADDR;
}

// TO_IN(M2,{S1})
MLDv2_AddrRecord mld2_rcd_t3m2n1s1 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
}

// TO_IN(M2,{S2})
MLDv2_AddrRecord mld2_rcd_t3m2n1s2 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_02;
}

// TO_IN(M2,{S3})
MLDv2_AddrRecord mld2_rcd_t3m2n1s3 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_03;
}

// TO_IN(M2,{S1,S2})
MLDv2_AddrRecord mld2_rcd_t3m2n2s12 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
}

// TO_IN(M2,{S1,S3})
MLDv2_AddrRecord mld2_rcd_t3m2n2s13 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_03;
}

// TO_IN(M2,{S2,S3})
MLDv2_AddrRecord mld2_rcd_t3m2n2s23 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

// TO_IN(M2,{S1,S2,S3})
MLDv2_AddrRecord mld2_rcd_t3m2n3s123 {
	Type                = 3;
	AuxDataLen          = 0;
	NumOfSources        = 3;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

//-----------------------------------------------------------------------------
// TO_EX(M2,{null})
MLDv2_AddrRecord mld2_rcd_t4m2n0 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 0;
	MulticastAddress    = MCAST2_ADDR;
}

// TO_EX(M2,{S1})
MLDv2_AddrRecord mld2_rcd_t4m2n1s1 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
}

// TO_EX(M2,{S2})
MLDv2_AddrRecord mld2_rcd_t4m2n1s2 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_02;
}

// TO_EX(M2,{S3})
MLDv2_AddrRecord mld2_rcd_t4m2n1s3 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_03;
}

// TO_EX(M2,{S1,S2})
MLDv2_AddrRecord mld2_rcd_t4m2n2s12 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
}

// TO_EX(M2,{S1,S3})
MLDv2_AddrRecord mld2_rcd_t4m2n2s13 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_03;
}

// TO_EX(M2,{S2,S3})
MLDv2_AddrRecord mld2_rcd_t4m2n2s23 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

// TO_EX(M2,{S1,S2,S3})
MLDv2_AddrRecord mld2_rcd_t4m2n3s123 {
	Type                = 4;
	AuxDataLen          = 0;
	NumOfSources        = 3;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

//-----------------------------------------------------------------------------
// ALLOW(M2,{null})
MLDv2_AddrRecord mld2_rcd_t5m2n0 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 0;
	MulticastAddress    = MCAST2_ADDR;
}

// ALLOW(M2,{S1})
MLDv2_AddrRecord mld2_rcd_t5m2n1s1 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
}

// ALLOW(M2,{S2})
MLDv2_AddrRecord mld2_rcd_t5m2n1s2 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_02;
}

// ALLOW(M2,{S3})
MLDv2_AddrRecord mld2_rcd_t5m2n1s3 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_03;
}

// ALLOW(M2,{S1,S2})
MLDv2_AddrRecord mld2_rcd_t5m2n2s12 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
}

// ALLOW(M2,{S1,S3})
MLDv2_AddrRecord mld2_rcd_t5m2n2s13 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_03;
}

// ALLOW(M2,{S2,S3})
MLDv2_AddrRecord mld2_rcd_t5m2n2s23 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

// ALLOW(M2,{S1,S2,S3})
MLDv2_AddrRecord mld2_rcd_t5m2n3s123 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

//-----------------------------------------------------------------------------
// BLOCK(M2,{null})
MLDv2_AddrRecord mld2_rcd_t6m2n0 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 0;
	MulticastAddress    = MCAST2_ADDR;
}

// BLOCK(M2,{S1})
MLDv2_AddrRecord mld2_rcd_t6m2n1s1 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
}

// BLOCK(M2,{S2})
MLDv2_AddrRecord mld2_rcd_t6m2n1s2 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_02;
}

// BLOCK(M2,{S3})
MLDv2_AddrRecord mld2_rcd_t6m2n1s3 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_03;
}

// BLOCK(M2,{S1,S2})
MLDv2_AddrRecord mld2_rcd_t6m2n2s12 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
}

// BLOCK(M2,{S1,S3})
MLDv2_AddrRecord mld2_rcd_t6m2n2s13 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_03;
}

// BLOCK(M2,{S2,S3})
MLDv2_AddrRecord mld2_rcd_t6m2n2s23 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 2;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

// BLOCK(M2,{S1,S2,S3})
MLDv2_AddrRecord mld2_rcd_t6m2n3s123 {
	Type                = 6;
	AuxDataLen          = 0;
	NumOfSources        = 3;
	MulticastAddress    = MCAST2_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
}

//=============================================================================
// ICMPv6 MLDv2 Report (Message Type 143)
//=============================================================================
//-----------------------------------------------------------------------------
// any -> any, MLDv2 Report any
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_any_any,
	_HETHER_any,
	{
		//  Version         = 6;
		//  TrafficClass    = any;
		//  FlowLabel       = any;
		//  PayloadLength   = any;
		//  NextHeader      = 0;
		//  HopLimit        = any;
		_SRC(any);
		_DST(any);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_any_any);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_any_any);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = stop; // as Reserved
		//  Checksum                = any;
		//  Reserved                = any;
		//  NumOfMcastAddrRecords   = stop;
		//  MLDv2_AddrRecord        = any;
	}
)

//-----------------------------------------------------------------------------
// RUT0 -> any, MLDv2 Report any
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_rut0l_any,
	_HETHER_rut0_to_any,
	{
		//  Version         = 6;
		//  TrafficClass    = any;
		//  FlowLabel       = any;
		//  PayloadLength   = any;
		//  NextHeader      = 0;
		//  HopLimit        = any;
		_SRC(RUT0_LLOCAL_UCAST);
		_DST(any);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_rut0l_any);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_rut0l_any);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = stop; // as Reserved
		//  Checksum                = any;
		//  Reserved                = any;
		//  NumOfMcastAddrRecords   = stop;
		//  MLDv2_AddrRecord        = any;
	}
)

//-----------------------------------------------------------------------------
// RUT1 -> any, MLDv2 Report any
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_rut1l_any,
	_HETHER_rut1_to_any,
	{
		//  Version         = 6;
		//  TrafficClass    = any;
		//  FlowLabel       = any;
		//  PayloadLength   = any;
		//  NextHeader      = 0;
		//  HopLimit        = any;
		_SRC(RUT1_LLOCAL_UCAST);
		_DST(any);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_rut1l_any);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_rut1l_any);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = stop; // as Reserved
		//  Checksum                = any;
		//  Reserved                = any;
		//  NumOfMcastAddrRecords   = stop;
		//  MLDv2_AddrRecord        = any;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M1,{null})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t1m1n0,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n0);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		Reserved                = MLDv2R_RESERVED;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t1m1n0;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M1,{S1})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t1m1n1s1,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n1s1);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n1s1);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		Reserved                = MLDv2R_RESERVED;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t1m1n1s1;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M1,{S2})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t1m1n1s2,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n1s2);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n1s2);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t1m1n1s2;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M1,{S3})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t1m1n1s3,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n1s3);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n1s3);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t1m1n1s3;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M1,{S4})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t1m1n1s4,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n1s4);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n1s4);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t1m1n1s4;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M1,{S5})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t1m1n1s5,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n1s5);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n1s5);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t1m1n1s5;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M1,{S1,S2})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t1m1n2s12,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n2s12);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n2s12);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t1m1n2s12;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M1,{S1,S3})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t1m1n2s13,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n2s13);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n2s13);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t1m1n2s13;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M1,{S1,S4})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t1m1n2s14,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n2s14);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n2s14);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t1m1n2s14;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M1,{S1,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t1m1n2s15,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n2s15);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n2s15);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t1m1n2s15;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M1,{S2,S3})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t1m1n2s23,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n2s23);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n2s23);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t1m1n2s23;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M1,{S2,S4})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t1m1n2s24,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n2s24);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n2s24);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t1m1n2s24;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M1,{S2,S5})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t1m1n2s25,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n2s25);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n2s25);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t1m1n2s25;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M1,{S3,S4})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t1m1n2s34,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n2s34);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n2s34);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t1m1n2s34;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M1,{S3,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t1m1n2s35,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n2s35);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n2s35);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t1m1n2s35;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M1,{S4,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t1m1n2s45,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n2s45);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n2s45);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t1m1n2s45;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M1,{S1,S2,S3})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t1m1n3s123,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n3s123);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t1m1n3s123);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t1m1n3s123;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(M1,{null})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t2m1n0,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n0);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t2m1n0;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(M1,{S1})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t2m1n1s1,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n1s1);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n1s1);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t2m1n1s1;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(M1,{S2})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t2m1n1s2,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n1s2);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n1s2);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t2m1n1s2;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(M1,{S3})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t2m1n1s3,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n1s3);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n1s3);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t2m1n1s3;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(M1,{S4})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t2m1n1s4,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n1s4);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n1s4);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t2m1n1s4;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(M1,{S5})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t2m1n1s5,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n1s5);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n1s5);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t2m1n1s5;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(M1,{S1,S2})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t2m1n2s12,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n2s12);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n2s12);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t2m1n2s12;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(M1,{S1,S3})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t2m1n2s13,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n2s13);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n2s13);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t2m1n2s13;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(M1,{S1,S4})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t2m1n2s14,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n2s14);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n2s14);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t2m1n2s14;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(M1,{S1,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t2m1n2s15,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n2s15);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n2s15);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t2m1n2s15;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(M1,{S2,S3})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t2m1n2s23,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n2s23);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n2s23);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t2m1n2s23;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(M1,{S2,S4})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t2m1n2s24,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n2s24);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n2s24);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t2m1n2s24;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(M1,{S2,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t2m1n2s25,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n2s25);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n2s25);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t2m1n2s25;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(M1,{S3,S4})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t2m1n2s34,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n2s34);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n2s34);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t2m1n2s34;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(M1,{S3,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t2m1n2s35,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n2s35);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n2s35);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t2m1n2s35;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(M1,{S4,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t2m1n2s45,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n2s45);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n2s45);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t2m1n2s45;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(M1,{S1,S2,S3})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t2m1n3s123,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n3s123);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t2m1n3s123);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t2m1n3s123;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M1,{null})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t3m1n0,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n0);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t3m1n0;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M1,{S1})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t3m1n1s1,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n1s1);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n1s1);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t3m1n1s1;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M1,{S2})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t3m1n1s2,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n1s2);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n1s2);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t3m1n1s2;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M1,{S3})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t3m1n1s3,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n1s3);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n1s3);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t3m1n1s3;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M1,{S4})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t3m1n1s4,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n1s4);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n1s4);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t3m1n1s4;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M1,{S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t3m1n1s5,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n1s5);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n1s5);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t3m1n1s5;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M1,{S1,S2})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t3m1n2s12,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n2s12);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n2s12);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t3m1n2s12;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M1,{S1,S3})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t3m1n2s13,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n2s13);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n2s13);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t3m1n2s13;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M1,{S1,S4})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t3m1n2s14,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n2s14);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n2s14);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t3m1n2s14;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M1,{S1,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t3m1n2s15,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n2s15);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n2s15);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t3m1n2s15;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M1,{S2,S3})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t3m1n2s23,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n2s23);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n2s23);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t3m1n2s23;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M1,{S2,S4})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t3m1n2s24,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n2s24);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n2s24);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t3m1n2s24;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M1,{S2,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t3m1n2s25,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n2s25);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n2s25);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t3m1n2s25;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M1,{S3,S4})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t3m1n2s34,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n2s34);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n2s34);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t3m1n2s34;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M1,{S3,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t3m1n2s35,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n2s35);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n2s35);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t3m1n2s35;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M1,{S4,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t3m1n2s45,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n2s45);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n2s45);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t3m1n2s45;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M1,{S1,S2,S3})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t3m1n3s123,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n3s123);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m1n3s123);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t3m1n3s123;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_EX(M1,{null})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t4m1n0,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n0);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t4m1n0;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_EX(M1,{S1})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t4m1n1s1,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n1s1);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n1s1);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t4m1n1s1;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_EX(M1,{S2})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t4m1n1s2,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n1s2);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n1s2);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t4m1n1s2;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_EX(M1,{S3})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t4m1n1s3,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n1s3);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n1s3);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t4m1n1s1;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_EX(M1,{S4})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t4m1n1s4,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n1s4);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n1s4);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t4m1n1s4;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_EX(M1,{S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t4m1n1s5,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n1s5);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n1s5);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t4m1n1s5;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_EX(M1,{S1,S2})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t4m1n2s12,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n2s12);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n2s12);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t4m1n2s12;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_EX(M1,{S1,S3})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t4m1n2s13,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n2s13);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n2s13);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t4m1n2s13;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_EX(M1,{S1,S4})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t4m1n2s14,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n2s14);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n2s14);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t4m1n2s14;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_EX(M1,{S1,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t4m1n2s15,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n2s15);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n2s15);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t4m1n2s15;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_EX(M1,{S2,S3})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t4m1n2s23,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n2s23);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n2s23);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t4m1n2s23;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_EX(M1,{S2,S4})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t4m1n2s24,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n2s24);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n2s24);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t4m1n2s24;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_EX(M1,{S2,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t4m1n2s25,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n2s25);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n2s25);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t4m1n2s25;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_EX(M1,{S3,S4})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t4m1n2s34,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n2s34);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n2s34);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t4m1n2s34;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_EX(M1,{S3,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t4m1n2s35,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n2s35);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n2s35);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t4m1n2s35;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_EX(M1,{S4,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t4m1n2s45,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n2s45);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n2s45);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t4m1n2s45;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_EX(M1,{S1,S2,S3})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t4m1n3s123,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n3s123);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t4m1n3s123);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t4m1n3s123;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S1})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t5m1n1s1,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n1s1);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n1s1);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t5m1n1s1;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{null})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t5m1n0,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n0);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t5m1n0;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S2})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t5m1n1s2,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n1s2);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n1s2);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t5m1n1s2;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S3})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t5m1n1s3,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n1s3);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n1s3);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t5m1n1s3;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S4})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t5m1n1s4,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n1s4);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n1s4);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t5m1n1s4;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t5m1n1s5,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n1s5);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n1s5);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t5m1n1s5;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S1,S2})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t5m1n2s12,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n2s12);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n2s12);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t5m1n2s12;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S1,S3})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t5m1n2s13,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n2s13);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n2s13);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t5m1n2s13;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S1,S4})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t5m1n2s14,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n2s14);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n2s14);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t5m1n2s14;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S1,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t5m1n2s15,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n2s15);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n2s15);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t5m1n2s15;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S2,S3})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t5m1n2s23,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n2s23);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n2s23);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t5m1n2s23;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S2,S4})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t5m1n2s24,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n2s24);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n2s24);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t5m1n2s24;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S2,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t5m1n2s25,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n2s25);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n2s25);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t5m1n2s25;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S3,S4})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t5m1n2s34,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n2s34);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n2s34);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t5m1n2s34;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S3,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t5m1n2s35,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n2s35);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n2s35);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t5m1n2s35;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S4,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t5m1n2s45,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n2s45);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n2s45);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t5m1n2s45;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S1,S2,S3})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t5m1n3s123,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n3s123);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n3s123);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t5m1n3s123;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report BLOCK(M1,{null})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t6m1n0,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n0);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t6m1n0;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report BLOCK(M1,{S1})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t6m1n1s1,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n1s1);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n1s1);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t6m1n1s1;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report BLOCK(M1,{S2})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t6m1n1s2,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n1s2);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n1s2);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t6m1n1s2;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report BLOCK(M1,{S3})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t6m1n1s3,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n1s3);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n1s3);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t6m1n1s3;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report BLOCK(M1,{S4})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t6m1n1s4,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n1s4);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n1s4);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t6m1n1s4;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report BLOCK(M1,{S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t6m1n1s5,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n1s5);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n1s5);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t6m1n1s5;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report BLOCK(M1,{S1,S2})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t6m1n2s12,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n2s12);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n2s12);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t6m1n2s12;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report BLOCK(M1,{S1,S3})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t6m1n2s13,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n2s13);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n2s13);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t6m1n2s13;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report BLOCK(M1,{S1,S4})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t6m1n2s14,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n2s14);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n2s14);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t6m1n2s14;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report BLOCK(M1,{S1,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t6m1n2s15,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n2s15);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n2s15);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t6m1n2s15;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report BLOCK(M1,{S2,S3})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t6m1n2s23,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n2s23);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n2s23);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t6m1n2s23;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report BLOCK(M1,{S2,S4})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t6m1n2s24,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n2s24);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n2s24);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t6m1n2s24;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report BLOCK(M1,{S2,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t6m1n2s25,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n2s25);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n2s25);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t6m1n2s25;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report BLOCK(M1,{S3,S4})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t6m1n2s34,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n2s34);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n2s34);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t6m1n2s34;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report BLOCK(M1,{S3,S5})
//-----------------------------------------------------------------------------
//FEM_icmp6_mldv2report_exth(
//	MLDv2R_tn1l_mld2r_r1_t6m1n2s35,
//	_HETHER_tn1_to_mld2r,
//	{
//		HopLimit        = MLDv2R_HOP;
//		_SRC(TN1_LLOCAL_UCAST);
//		_DST(MLDv2_ROUTERS_ADDR);
//	},
//	{
//		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n2s35);
//		exthdr  = ext_hbh_rtalert_mld;
//		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n2s35);
//	},
//	{
//		Type                    = MLDv2R_TYPE;
//		Code                    = MLDv2R_CODE;  // as Reserved
//		Checksum                = MLDv2R_CHECKSUM;
//		NumOfMcastAddrRecords   = 1;
//		MLDv2_AddrRecord        = mld2_rcd_t6m1n2s35;
//	}
//)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report BLOCK(M1,{S4,S5})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t6m1n2s45,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n2s45);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n2s45);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t6m1n2s45;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report BLOCK(M1,{S1,S2,S3})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t6m1n3s123,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n3s123);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n3s123);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t6m1n3s123;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report BLOCK(M1,{S1,S2,S3,S4,S5})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t6m1n5s12345,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n5s12345);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t6m1n5s12345);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t6m1n5s12345;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M2,{null})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t3m2n0,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m2n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t3m2n0);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t3m2n0;
	}
)

//--------------------------------------------------------------------------
// TN1 -> M1, MLDv1 Report (M1)
//--------------------------------------------------------------------------
FEM_icmp6_mldreport_exth(
	MLDv1R_tn1l_mcast1_m1,
	_HETHER_tn1_to_mcast1,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MCAST1_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv1R_tn1l_mcast1_m1);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv1R_tn1l_mcast1_m1);
	},
	{
		MulticastAddress    = MCAST1_ADDR;
	}
)

//--------------------------------------------------------------------------
// TN1 -> M1, MLDv1 Done (M1)
//--------------------------------------------------------------------------
FEM_icmp6_mlddone_exth(
	MLDv1D_tn1l_mcast1_m1,
	_HETHER_tn1_to_mcast1,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MCAST1_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv1D_tn1l_mcast1_m1);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv1D_tn1l_mcast1_m1);
	},
	{
		MulticastAddress    = MCAST1_ADDR;
	}
)

//-----------------------------------------------------------------------------
// TN2 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M1,{null})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn2l_mld2r_r1_t3m1n0,
	_HETHER_tn2_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN2_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn2l_mld2r_r1_t3m1n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn2l_mld2r_r1_t3m1n0);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		Reserved                = MLDv2R_RESERVED;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t3m1n0;
	}
)

//-----------------------------------------------------------------------------
// TN2 -> All MLDv2-capable routers, MLDv2 Report TO_IN(M2,{null})
//-----------------------------------------------------------------------------
FEM_icmp6_mldv2report_exth(
	MLDv2R_tn2l_mld2r_r1_t3m2n0,
	_HETHER_tn2_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN2_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn2l_mld2r_r1_t3m2n0);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn2l_mld2r_r1_t3m2n0);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		Reserved                = MLDv2R_RESERVED;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t3m2n0;
	}
)

// EOF
