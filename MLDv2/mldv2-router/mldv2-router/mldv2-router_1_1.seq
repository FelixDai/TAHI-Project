#!/usr/bin/perl
# 
# Copyright (C) IPv6 Promotion Council, NTT Advanced Technology Corporation
# (NTT-AT), Yokogwa Electoric Corporation and YASKAWA INFORMATION SYSTEMS
# Corporation All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with
# or without modification, are permitted provided that the following
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which
# is related to this software (hereinafter referred to as "project") nor
# the names of the contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
# notification to the copyrighters. However, using this software for the
# purpose of testing or evaluating any products including merchantable
# products may be permitted without any notification to the copyrighters.
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.
# 
###############################################################################
BEGIN {}
END   {}

#------------------------------------------------------------------------------
# Include
#------------------------------------------------------------------------------
# Include Module
use strict;
use warnings;
use V6evalTool;
use MLDv2R;

#------------------------------------------------------------------------------
vLog2("Setup");
#------------------------------------------------------------------------------
# Variable
my $stp = 0;
my $rtn;
my $wk;

# Requirement configuration
%T_REQ = ();

# Specification configuration
%T_CONF = (
	RV  => 2,
	QI  => 125,
	QRI => 10,
);

# Topology
@T_LINK = ("Link0");
@T_NODE = ();

# Setup Tester
$rtn = Setup();
if ($rtn != $RES_OK) {
	goto TERM;
}

#------------------------------------------------------------------------------
vLog2("Procedure");
#------------------------------------------------------------------------------
# Sequence
%T_SEQ = (
	$stp++ => {
		caption => [ "Step 1. Configure the standard value of RFC on the RUT." ],
		func    => "ConfProc",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 2. Boot the RUT.",
		             "Step 3. Enable MLDv2 on the RUT." ],
		func    => "BootProc",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 4. Observe the packets on all networks." ],
		qg_int  => $CONF_DATA{SQI},
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{ENABLE_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2Q_rut0l_allnodes_m0" ],
		status  => 0,
		stack   => "L0SQG",
	},
	$stp++ => {
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{SQI} + $CONF_DATA{MARGIN_TIME} ],
		count   => ($CONF_DATA{SQC} - 1),
		msgs    => [ "MLDv2Q_rut0l_allnodes_m0" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 5. Wait [QI] ($CONF_DATA{QI}) seconds.",
		             "Step 6. Observe the packets on all networks." ],
		qg_int  => $CONF_DATA{QI},
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{QI} + $CONF_DATA{MARGIN_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2Q_rut0l_allnodes_m0" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 7. Wait [QI] ($CONF_DATA{QI}) seconds.",
		             "Step 8. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{QI} + $CONF_DATA{MARGIN_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2Q_rut0l_allnodes_m0" ],
		status  => 0,
	},
);

# Execute
for ($stp = 0; $T_SEQ{$stp}; $stp++) {
	no strict 'refs';
	$rtn = &{$T_SEQ{$stp}{func}}($stp);
	if ($rtn != $RES_OK) {
		last;
	}
}

#------------------------------------------------------------------------------
vLog2("Complement Judgement");
#------------------------------------------------------------------------------
$wk = JudgeCommon();
if (($wk != $RES_OK) && ($rtn == $RES_OK)) {
	$rtn = $wk;
}

TERM:
#------------------------------------------------------------------------------
vLog2("Termination");
#------------------------------------------------------------------------------
# 
Term($rtn);

###############################################################################
__END__


=head1 Test Label

=begin html
MLD.1.1 General Query

=end html

=head1 Purpose

=begin html
To verify that an MLDv2 router properly accepts Query Interval configurations and to ensure an MLDv2 router transmits General Queries as expected.

=end html

=head1 References

=begin html
RFC3810 7.  Description of the Protocol for Multicast Routers<BR>

=cut
<PRE>
                       Multicast routers may themselves become multicast
   address listeners, and therefore also perform the multicast listener
   part of MLDv2, described in section 6.
</PRE>

=pod

=end html

=begin html
RFC3810 7.1.  Conditions for MLD Queries<BR>

=cut
<PRE>
   The Querier periodically sends General Queries to request Multicast
   Address Listener information from an attached link.  These queries
   are used to build and refresh the Multicast Address Listener state of
   routers on attached links.
</PRE>

=pod

=end html

=begin html
RFC3810 7.6.2.  Querier Election<BR>

=cut
<PRE>
             When a router starts operating on a subnet, by default it
   considers itself as being the Querier.  Thus, it sends several
   General Queries separated by a small time interval (see sections 9.6
   and 9.7 for details).
</PRE>

=pod

=end html

=begin html
RFC3810 9.6.  Startup Query Interval<BR>

=cut
<PRE>
   The Startup Query Interval is the interval between General Queries
   sent by a Querier on startup.  Default value: 1/4 the [Query
   Interval].
</PRE>

=pod

=end html

=begin html
RFC3810 9.7.  Startup Query Count<BR>

=cut
<PRE>
   The Startup Query Count is the number of Queries sent out on startup,
   separated by the Startup Query Interval.  Default value: [Robustness
   Variable].
</PRE>

=pod

=end html

=head1 Discussion

=begin html
None

=end html

=head1 Test Requirement

=begin html
None

=end html

=head1 Test Setup

=begin html
<UL><LI><FONT SIZE="+1"><B>Common Topology</B></FONT></UL>
<PRE><FONT SIZE="+1">
   RUT
    |(I/F: Link0)
    |
   -+-------+-------+-------+---- Network 0
            |       |       |
           TR1     TR2     TN1
</FONT></PRE>
<BLOCKQUOTE><TABLE BORDER>
<TR><TD><TT>ID</TT></TD>
    <TD><TT>attribute</TT></TD>
    <TD><TT>value</TT></TD>
    <TD><TT>memo</TT></TD></TR>
<TR><TD><TT>Network 0</TT></TD>
    <TD><TT>prefix</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>I/F Link0 is connected.</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:01</TT></TD>
    <TD ROWSPAN="3"><TT>Lower IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:1</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:1</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR2</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>fc:fc:fc:fc:fc:fc</TT></TD>
    <TD ROWSPAN="3"><TT>Higher IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::fefc:fcff:fefc:fcfc</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:fefc:fcff:fefc:fcfc</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TN1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:11:11:11</TT></TD>
    <TD ROWSPAN="3"><TT>&nbsp;</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe11:1111</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe11:1111</TT></TD></TR>
</TABLE></BLOCKQUOTE>
<UL><LI><B><FONT SIZE="+1">Common Test Setup</FONT></B>
    <OL><LI>Configure RUT to have:
        <UL><LI>Robustness Variable of 2
            <LI>Query Interval of 125 (seconds)
            <LI>Query Response Interval of 10 (seconds)
            <LI>Last Listener Query Interval of 1 (second)</UL>
        <LI>Configure TR1, TR2, TR3 and TR4 to have:
        <UL><LI>Robustness Variable of 2
            <LI>Query Interval of 125 (seconds)
            <LI>Query Response Interval of 10 (seconds)
            <LI>Last Listener Query Interval of 1 (second)</UL></OL><BR>
    <LI><B><FONT SIZE="+1">Common Test Cleanup</FONT></B>
    <OL><LI>Disable MLD on all devices.
        <LI>Return all timers and variables to their defaults values.
        <LI>The Query Interval of RUT can be shortened to decrease time.</OL></UL>

=end html

=head1 Procedure

=begin html
<PRE>
Step 1. Configure the default values of RFC as each variable on the RUT.
Step 2. Boot the RUT.
Step 3. Enable MLDv2 on the RUT.
Step 4. Observe the packets on all networks.
Step 5. Wait [QI] seconds.
Step 6. Observe the packets on all networks.
Step 7. Wait [QI] seconds.
Step 8. Observe the packets on all networks.
</PRE>

=end html

=head1 Observable Results

=begin html
<PRE>
Step 4: The RUT must transmit 2 Reports with Multicast Address Record for RUT Solicited-Node Multicast address, T0_EX(), one second apart.
        The RUT must transmit 2 Reports with Multicast Address Record for FF02::2, TO_EX(), one second apart.
        The RUT must transmit 2 Reports with Multicast Address Record for FF02::16, TO_EX(), one second apart.
        Then, the RUT must transmit 2 General Queries 31.25 seconds apart with a Max Response Code 10000 or less, a QRV of 2 and a QQIC of 125.
Step 6: The RUT must transmit a General Query with a Max Response Code 10000 or less a QRV of 2 and QQIC of 125.
Step 8: The RUT must transmit a General Query with a Max Response Code 10000 or less a QRV of 2 and QQIC of 125.
<BR>
   RUT     TR1     TR2     TN1
    |       |       |       |
    |       |       |       | 1. Configure the default values of RFC as each variable on the RUT.
    |       |       |       | 2. Boot the RUT.
    |       |       |       | 3. Enable MLDv2 on the RUT.
    |       |       |       | 4. Observe the packets on all networks.
    |---------------------->|    RUT transmits TO_EX(Solicited-Node Multicast,{null}), [RV] times, [URI] seconds
    |---------------------->|    RUT transmits TO_EX(FF02::2,{null}), [RV] times, [URI] seconds
    |---------------------->|    RUT transmits TO_EX(FF02::16,{null}), [RV] times, [URI] seconds
    |---------------------->|    RUT transmits Q(G), [SQC] times, [SQI] seconds
    |       |       |       | 5. Wait [QI] seconds.
    |       |       |       | 6. Observe the packets on all networks.
    |---------------------->|    RUT transmits Q(G)
    |       |       |       | 7. Wait [QI] seconds.
    |       |       |       | 8. Observe the packets on all networks.
    |---------------------->|    RUT transmits Q(G)
    |       |       |       |
</PRE>

=end html

=head1 Possible Problems

=begin html
None

=end html
