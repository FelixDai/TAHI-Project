#!/usr/bin/perl
# 
# Copyright (C) IPv6 Promotion Council, NTT Advanced Technology Corporation
# (NTT-AT), Yokogwa Electoric Corporation and YASKAWA INFORMATION SYSTEMS
# Corporation All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with
# or without modification, are permitted provided that the following
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which
# is related to this software (hereinafter referred to as "project") nor
# the names of the contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
# notification to the copyrighters. However, using this software for the
# purpose of testing or evaluating any products including merchantable
# products may be permitted without any notification to the copyrighters.
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.
# 
###############################################################################
BEGIN {}
END   {}

#------------------------------------------------------------------------------
# Include
#------------------------------------------------------------------------------
# Include Module
use strict;
use warnings;
use V6evalTool;
use MLDv2R;

#------------------------------------------------------------------------------
vLog2("Setup");
#------------------------------------------------------------------------------
# Variable
my $stp = 0;
my $rtn;
my $wk;

# Requirement configuration
%T_REQ = ();

# Specification configuration
%T_CONF = ();

# Topology
@T_LINK = ("Link0");
@T_NODE = ("TN1");

# Setup Tester
$rtn = Setup();
if ($rtn != $RES_OK) {
	goto TERM;
}

#------------------------------------------------------------------------------
vLog2("Procedure");
#------------------------------------------------------------------------------
# Sequence
%T_SEQ = (
	$stp++ => {
		caption => [ "Step 0. Configure on the RUT." ],
		func    => "ConfProc",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 41. Enable MLDv2 on the RUT." ],
		func    => "EnableProc",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 42. Observe the packets on all networks." ],
		qg_int  => $CONF_DATA{SQI},
		func    => $CONF_DATA{FUNC_ENABLE_QUERY} ? "RecvProc" : "BaseProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{ENABLE_TIME}, $CONF_DATA{SQI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{SQC},
		msgs    => [ "MLDv2Q_rut0l_allnodes_m0" ],
		status  => 0,
		stack   => "L0SQG",
	},
	$stp++ => {
		caption => [ "Step 43. TN1 transmits Report F." ],
		func    => "SendProc",
		link    => "Link0",
		msgs    => [ "MLDv2R_tn1l_mld2r_r2_t2m1n2s34_t2m2n2s34" ],
		status  => 0,
		stack   => "L0S1",
	},
	$stp++ => {
		caption => [ "Step 44. Observe the packets on all networks.",
		             "Step 45. Wait [QI / 2] (" . ($CONF_DATA{QI} / 2) . ") seconds after Step 43." ],
		qg_int  => $CONF_DATA{QI},
		func    => "RecvProc",
		link    => "Link0",
		stime   => [ "L0S1", 0 ],
		wtime   => [ ($CONF_DATA{QI} / 2) ],
		count   => 1,
		msgs    => [ "MLDv2Q_any_any_except_qg" ],
		status  => 1,
	},
	$stp++ => {
		caption => [ "Step 45. TN1 transmits Report G." ],
		func    => "SendProc",
		link    => "Link0",
		msgs    => [ "MLDv2R_tn1l_mld2r_r2_t5m1n2s12_t5m2n2s12" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 46. Observe the packets on all networks.",
		             "Step 47. Wait [QI] ($CONF_DATA{QI}) seconds after Step 43." ],
		func    => "RecvProc",
		link    => "Link0",
		stime   => [ "L0S1", 0 ],
		wtime   => [ $CONF_DATA{QI} ],
		count   => 1,
		msgs    => [ "MLDv2Q_any_any_except_qg" ],
		status  => 1,
	},
	$stp++ => {
		caption => [ "Step 47. TN1 transmits Report H." ],
		func    => "SendProc",
		link    => "Link0",
		msgs    => [ "MLDv2R_tn1l_mld2r_r2_t1m1n3s135_t2m2n3s135" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 48. Observe the packets on all networks.",
		             "Step 49. Wait [MALI] ($CONF_DATA{MALI}) seconds after Step 43." ],
		func    => "RecvProc",
		link    => "Link0",
		stime   => [ "L0S1", 0 ],
		wtime   => [ $CONF_DATA{MALI} ],
		count   => 1,
		msgs    => [ "MLDv2Q_any_any_except_qg" ],
		status  => 1,
	},
	$stp++ => {
		caption => [ "Step 49. TN1 transmits Report I." ],
		func    => "SendProc",
		link    => "Link0",
		msgs    => [ "MLDv2R_tn1l_mld2r_r1_t3m1n0" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 50. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{LLQI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{LLQC},
		msgs    => [ "MLDv2Q_rut0l_mcast1_m1n4any" ],
		status  => 0,
		stack   => "L0R1",
	},
	$stp++ => {
		caption => [ "Step 51. Wait [LLQI] seconds." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{LLQI} ],
		count   => 1,
		msgs    => [ "MLDv2Q_any_any_except_qg" ],
		status  => 1,
	},
	$stp++ => {
		caption => [ "Step 51. TN1 transmits Report I." ],
		func    => "SendProc",
		link    => "Link0",
		msgs    => [ "MLDv2R_tn1l_mld2r_r1_t3m1n0" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 52. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{LLQI} + $CONF_DATA{MARGIN_TIME} + $CONF_DATA{CHECK_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2Q_any_any_except_qg" ],
		status  => 1,
	},
	$stp++ => {
		caption => [ "Step 53. TN1 transmits Report J." ],
		func    => "SendProc",
		link    => "Link0",
		msgs    => [ "MLDv2R_tn1l_mld2r_r1_t3m2n0" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 54. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{LLQI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{LLQC} * 2,
		msgs    => [ "MLDv2Q_rut0l_mcast2_m2n2any", "MLDv2Q_rut0l_mcast2_m2n0" ],
		status  => 0,
		stack   => "L0R2",
	},
	$stp++ => {
		caption => [ "Step 55. Wait [LLQI] seconds." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{LLQI} + $CONF_DATA{EXPIRE_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2Q_any_any_except_qg" ],
		status  => 1,
	},
	$stp++ => {
		caption => [ "Step 55. TN1 transmits Report J." ],
		func    => "SendProc",
		link    => "Link0",
		msgs    => [ "MLDv2R_tn1l_mld2r_r1_t3m2n0" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 56. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{LLQI} + $CONF_DATA{MARGIN_TIME} + $CONF_DATA{CHECK_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2Q_any_any_except_qg" ],
		status  => 1,
	},
);

# local packet
$pktdesc{MLDv2R_tn1l_mld2r_r2_t2m1n2s34_t2m2n2s34}  = "Send: TN1 -> All MLDv2-capable routers, MLDv2 Report IS_EX(M1,{S3,S4}) IS_EX(M2,{S3,S4})";
$pktdesc{MLDv2R_tn1l_mld2r_r2_t5m1n2s12_t5m2n2s12}  = "Send: TN1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S1,S2}) ALLOW(M1,{S1,S2})";
$pktdesc{MLDv2R_tn1l_mld2r_r2_t1m1n3s135_t2m2n3s135}  = "Send: TN1 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M1,{S1,S2}) IS_EX(M1,{S1,S2})";

# Execute
for ($stp = 0; $T_SEQ{$stp}; $stp++) {
	no strict 'refs';
	$rtn = &{$T_SEQ{$stp}{func}}($stp);
	if ($rtn != $RES_OK) {
		last;
	}
}

#------------------------------------------------------------------------------
vLog2("Complement Judgement");
#------------------------------------------------------------------------------
$wk = JudgeCommon();
if (($wk != $RES_OK) && ($rtn == $RES_OK)) {
	$rtn = $wk;
}

#------------------------------------------------------------------------------
vLog1("Check: Source list of Multicast Address and Source Specific Query in Step 50.");
#------------------------------------------------------------------------------
$wk = JudgeStackQuerySeclist("L0R1", "S1235");
if (($wk != $RES_OK) && ($rtn == $RES_OK)) {
	$rtn = $wk;
}

#------------------------------------------------------------------------------
vLog1("Check: Number of MLDv2 Specific Query in Step 54.");
#------------------------------------------------------------------------------
$wk = JudgeStackMsgIDandNum("L0R2", $CONF_DATA{LLQC}, "MLDv2Q_rut0l_mcast2_m2n2any", "MLDv2Q_rut0l_mcast2_m2n0");
if (($wk != $RES_OK) && ($rtn == $RES_OK)) {
	$rtn = $wk;
}

#------------------------------------------------------------------------------
vLog1("Check: Source list of Multicast Address and Source Specific Query in Step 54.");
#------------------------------------------------------------------------------
$wk = JudgeStackQuerySeclist("L0R2_MLDv2Q_rut0l_mcast2_m2n2any", "S15");
if (($wk != $RES_OK) && ($rtn == $RES_OK)) {
	$rtn = $wk;
}

TERM:
#------------------------------------------------------------------------------
vLog2("Termination");
#------------------------------------------------------------------------------
Term($rtn);

###############################################################################
__END__


=head1 Test Label

=begin html
MLD.4.27: Multiple Records<BR>
Part D: Current State is Exclude Source, receiving multiple record

=end html

=head1 Purpose

=begin html
To verify that an MLDv2 router properly process a report message with multiple records.

=end html

=head1 References

=begin html
RFC3810 7.4.1.  Reception of Current State Records<BR>

=cut
<PRE>
   When receiving Current State Records, a router updates both its
   Filter Timer and its source timers.  In some circumstances, the
   reception of a type of multicast address record will cause the Router
   Filter Mode for that multicast address to change.  The table below
   describes the actions, with respect to state and timers, that occur
   to a router's state upon reception of Current State Records.
</PRE>

=pod

=end html

=head1 Discussion

=begin html
None

=end html

=head1 Test Requirement

=begin html
None

=end html

=head1 Test Setup

=begin html
<UL><LI><FONT SIZE="+1"><B>Common Topology</B></FONT></UL>
<PRE><FONT SIZE="+1">
   RUT
    |(I/F: Link0)
    |
   -+-------+-------+-------+---- Network 0
            |       |       |
           TR1     TR2     TN1
</FONT></PRE>
<BLOCKQUOTE><TABLE BORDER>
<TR><TD><TT>ID</TT></TD>
    <TD><TT>attribute</TT></TD>
    <TD><TT>value</TT></TD>
    <TD><TT>memo</TT></TD></TR>
<TR><TD><TT>Network 0</TT></TD>
    <TD><TT>prefix</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>I/F Link0 is connected.</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:01</TT></TD>
    <TD ROWSPAN="3"><TT>Lower IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:1</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:1</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR2</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>fc:fc:fc:fc:fc:fc</TT></TD>
    <TD ROWSPAN="3"><TT>Higher IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::fefc:fcff:fefc:fcfc</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:fefc:fcff:fefc:fcfc</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TN1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:11:11:11</TT></TD>
    <TD ROWSPAN="3"><TT>&nbsp;</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe11:1111</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe11:1111</TT></TD></TR>
</TABLE></BLOCKQUOTE>
<UL><LI><B><FONT SIZE="+1">Common Test Setup</FONT></B>
    <OL><LI>Configure RUT to have:
        <UL><LI>Robustness Variable of 2
            <LI>Query Interval of 125 (seconds)
            <LI>Query Response Interval of 10 (seconds)
            <LI>Last Listener Query Interval of 1 (second)</UL>
        <LI>Configure TR1, TR2, TR3 and TR4 to have:
        <UL><LI>Robustness Variable of 2
            <LI>Query Interval of 125 (seconds)
            <LI>Query Response Interval of 10 (seconds)
            <LI>Last Listener Query Interval of 1 (second)</UL></OL><BR>
    <LI><B><FONT SIZE="+1">Common Test Cleanup</FONT></B>
    <OL><LI>Disable MLD on all devices.
        <LI>Return all timers and variables to their defaults values.
        <LI>The Query Interval of RUT can be shortened to decrease time.</OL></UL>

=end html

=head1 Procedure

=begin html
<PRE>
Step 41. Enable MLDv2 on the RUT.
Step 42. Observe the packets on all networks.
Step 43. TN1 transmits Report F.
    -----
    IPv6 Header
        IPv6 Hop Limit                  = 1
        IPv6 Source Address             = TN1 link-local address
        IPv6 Destination Address        = All MLDv2-capable routers
    Hop-by-Hop Options Header
        Router Alert Option
    ICMPv6 Header (MLDv2 Report)
        Number of Mcast Address Records = 2
        Multicast Address Record [1]
            Type                            = 2 (IS_EX)
            Num of Sources                  = 2
            Multicast Address               = M1
            Source Address                  = S3
            Source Address                  = S4
        Multicast Address Record [2]
            Type                            = 2 (IS_EX)
            Num of Sources                  = 2
            Multicast Address               = M2
            Source Address                  = S3
            Source Address                  = S4
    -----
Step 44. Observe the packets on all networks.
Step 45. Wait [QI / 2] seconds after Step 43. TN1 transmits Report G.
    -----
    IPv6 Header
        IPv6 Hop Limit                  = 1
        IPv6 Source Address             = TN1 link-local address
        IPv6 Destination Address        = All MLDv2-capable routers
    Hop-by-Hop Options Header
        Router Alert Option
    ICMPv6 Header (MLDv2 Report)
        Number of Mcast Address Records = 2
        Multicast Address Record [1]
            Type                            = 5 (ALLOW)
            Num of Sources                  = 2
            Multicast Address               = M1
            Source Address                  = S1
            Source Address                  = S2
        Multicast Address Record [2]
            Type                            = 5 (ALLOW)
            Num of Sources                  = 2
            Multicast Address               = M2
            Source Address                  = S1
            Source Address                  = S2
    -----
Step 46. Observe the packets on all networks.
Step 47. Wait [QI] seconds after Step 43.  TN1 transmits Report H.
    -----
    IPv6 Header
        IPv6 Hop Limit                  = 1
        IPv6 Source Address             = TN1 link-local address
        IPv6 Destination Address        = All MLDv2-capable routers
    Hop-by-Hop Options Header
        Router Alert Option
    ICMPv6 Header (MLDv2 Report)
        Number of Mcast Address Records = 2
        Multicast Address Record [1]
            Type                            = 1 (IS_IN)
            Num of Sources                  = 3
            Multicast Address               = M1
            Source Address                  = S1
            Source Address                  = S3
            Source Address                  = S5
        Multicast Address Record [2]
            Type                            = 1 (IS_EX)
            Num of Sources                  = 3
            Multicast Address               = M2
            Source Address                  = S1
            Source Address                  = S3
            Source Address                  = S5
    -----
Step 48. Observe the packets on all networks.
Step 49. Wait [MALI] seconds after Step 43.  TN1 transmits Report I.
    -----
    IPv6 Header
        IPv6 Hop Limit                  = 1
        IPv6 Source Address             = TN1 link-local address
        IPv6 Destination Address        = All MLDv2-capable routers
    Hop-by-Hop Options Header
        Router Alert Option
    ICMPv6 Header (MLDv2 Report)
        Number of Mcast Address Records = 1
        Multicast Address Record [1]
            Type                            = 3 (TO_IN)
            Num of Sources                  = 0
            Multicast Address               = M1
    -----
Step 50. Observe the packets on all networks.
Step 51. Wait [LLQI] seconds.  TN1 transmits Report I.
Step 52. Observe the packets on all networks.
Step 53. TN1 transmits Report J.
    -----
    IPv6 Header
        IPv6 Hop Limit                  = 1
        IPv6 Source Address             = TN1 link-local address
        IPv6 Destination Address        = All MLDv2-capable routers
    Hop-by-Hop Options Header
        Router Alert Option
    ICMPv6 Header (MLDv2 Report)
        Number of Mcast Address Records = 1
        Multicast Address Record [1]
            Type                            = 3 (TO_IN)
            Num of Sources                  = 0
            Multicast Address               = M2
    -----
Step 54. Observe the packets on all networks.
Step 55. Wait [LLQI] seconds.  TN1 transmits Report J.
Step 56. Observe the packets on all networks.
</PRE>

=end html

=head1 Observable Results

=begin html
<PRE>
Step 42: The RUT must transmit 2 MLDv2 General Queries.
Step 44: The RUT must not transmit Queries other then periodic General Queries.
Step 46: The RUT must not transmit Queries other then periodic General Queries.
Step 48: The RUT must not transmit Queries other then periodic General Queries.
Step 50: The RUT must transmit 2 Multicast Address and Source Specific Query with a Multicast Address of M1 and Source Addresses of S1, S2, S3, and S5.
Step 52: The RUT must not transmit Queries other then periodic General Queries.
Step 54: The RUT must transmit 2 Multicast Address and Source Specific Query with a Multicast Address of M2 and Source Addresses of S1 and S5.
         The RUT must transmit 2 Multicast Address Specific Query with a Multicast Address of M2.
Step 56: The RUT must not transmit Queries other then periodic General Queries.
<BR>
   RUT     TR1     TR2     TN1
    |       |       |       |
    |       |       |       | 41. Enable MLDv2 on the RUT.
    |       |       |       | 42. Observe the packets on all networks.
    |- - - - - - - - - - - >|     RUT transmits TO_EX(FF02::16,{null}), [RV] times, [URI] seconds.
    |---------------------->|     RUT transmits Q(G), [SQC] times, [SQI] seconds.
    |<----------------------| 43. TN1 transmits Report F.
    |       |       |       | 44. Observe the packets on all networks.
    |       |       |       |     (no response)
    |       |       |       | 45. Wait [QI / 2] seconds after Step 43.
    |<----------------------|     TN1 transmits Report G.
    |       |       |       | 46. Observe the packets on all networks.
    |       |       |       |     (no response)
    |       |       |       | 47. Wait [QI] seconds after Step 43.
    |<----------------------|     TN1 transmits Report H.
    |       |       |       | 48. Observe the packets on all networks.
    |       |       |       |     (no response)
    |       |       |       | 49. Wait [MALI] seconds after Step 43.
    |<----------------------|     TN1 transmits Report I.
    |       |       |       | 50. Observe the packets on all networks.
    |---------------------->|     RUT transmits Q(M1,{S1,S2,S3,S5}), [LLQC] times, [LLQI] seconds.
    |       |       |       | 51. Wait [LLQI] seconds.
    |<----------------------|     TN1 transmits Report I.
    |       |       |       | 52. Observe the packets on all networks.
    |       |       |       |     (no response)
    |<----------------------| 53. TN1 transmits Report J.
    |       |       |       | 54. Observe the packets on all networks.
    |---------------------->|     RUT transmits Q(M2,{S1,S5}), [LLQC] times, [LLQI] seconds.
    |---------------------->|     RUT transmits Q(M2), [LLQC] times, [LLQI] seconds.
    |       |       |       | 55. Wait [LLQI] seconds.
    |<----------------------|     TN1 transmits Report J.
    |       |       |       | 56. Observe the packets on all networks.
    |       |       |       |     (no response)
    |       |       |       |
</PRE>

=end html

=head1 Possible Problems

=begin html
None

=end html
