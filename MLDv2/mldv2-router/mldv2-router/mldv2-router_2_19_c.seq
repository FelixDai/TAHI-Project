#!/usr/bin/perl
# 
# Copyright (C) IPv6 Promotion Council, NTT Advanced Technology Corporation
# (NTT-AT), Yokogwa Electoric Corporation and YASKAWA INFORMATION SYSTEMS
# Corporation All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with
# or without modification, are permitted provided that the following
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which
# is related to this software (hereinafter referred to as "project") nor
# the names of the contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
# notification to the copyrighters. However, using this software for the
# purpose of testing or evaluating any products including merchantable
# products may be permitted without any notification to the copyrighters.
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.
# 
###############################################################################
BEGIN {}
END   {}

#------------------------------------------------------------------------------
# Include
#------------------------------------------------------------------------------
# Include Module
use strict;
use warnings;
use V6evalTool;
use MLDv2R;

#------------------------------------------------------------------------------
vLog2("Setup");
#------------------------------------------------------------------------------
# Variable
my $stp = 0;
my $rtn;
my $wk;

# Requirement configuration
%T_REQ = ();

# Specification configuration
%T_CONF = ();

# Topology
@T_LINK = ("Link0");
@T_NODE = ("TR2", "TN1");

# Setup Tester
$rtn = Setup();
if ($rtn != $RES_OK) {
	goto TERM;
}

#------------------------------------------------------------------------------
vLog2("Procedure");
#------------------------------------------------------------------------------
# Sequence
%T_SEQ = (
	$stp++ => {
		caption => [ "Step 19. TR2 has a higher IP address then the RUT." ],
		func    => "ConfProc",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 20. Enable MLDv2 on the RUT." ],
		func    => "EnableProc",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 21. Observe the packets on all networks." ],
		qg_int  => $CONF_DATA{SQI},
		func    => $CONF_DATA{FUNC_ENABLE_QUERY} ? "RecvProc" : "BaseProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{ENABLE_TIME}, $CONF_DATA{SQI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{SQC},
		msgs    => [ "MLDv2Q_rut0l_allnodes_m0" ],
		status  => 0,
		stack   => "L0SQG",
	},
	$stp++ => {
		caption => [ "Step 22. TN1 transmits Report C." ],
		func    => "SendProc",
		link    => "Link0",
		msgs    => [ "MLDv2R_tn1l_mld2r_r1_t1m1n2s12" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 23. Observe the packets on all networks." ],
		qg_int  => $CONF_DATA{QI},
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{LLQI} + $CONF_DATA{MARGIN_TIME} + $CONF_DATA{CHECK_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2Q_any_any_except_qg" ],
		status  => 1,
	},
	$stp++ => {
		caption => [ "Step 24. TR2 transmits Query C with the Number of Sources set to 1." ],
		func    => "SendProc",
		link    => "Link0",
		msgs    => [ "MLDv2Q_tr2l_mcast1_m1n1s12" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 25. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{LLQI} + $CONF_DATA{MARGIN_TIME} + $CONF_DATA{CHECK_TIME} ],
		count   => 1,
		msgs    => [ ],
		status  => 1,
	},
	$stp++ => {
		caption => [ "Step 26. TN1 transmits Report B." ],
		func    => "SendProc",
		link    => "Link0",
		msgs    => [ "MLDv2R_tn1l_mld2r_r1_t3m1n0" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 27. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{LLQI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{LLQC},
		msgs    => [ "MLDv2Q_rut0l_mcast1_m1n1s2" ],
		status  => 0,
	},
	$stp++ => {
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{LLQI} + $CONF_DATA{MARGIN_TIME} + $CONF_DATA{CHECK_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2Q_any_any_except_qg" ],
		status  => 1,
	},
);

# local packet
$pktdesc{MLDv2Q_tr2l_mcast1_m1n1s12} = "Send: TR2 -> M1, MLDv2 Query (M1,{S1,S2}) with the Number of Sources set to 1";

# Execute
for ($stp = 0; $T_SEQ{$stp}; $stp++) {
	no strict 'refs';
	$rtn = &{$T_SEQ{$stp}{func}}($stp);
	if ($rtn != $RES_OK) {
		last;
	}
}

#------------------------------------------------------------------------------
vLog2("Complement Judgement");
#------------------------------------------------------------------------------
$wk = JudgeCommon();
if (($wk != $RES_OK) && ($rtn == $RES_OK)) {
	$rtn = $wk;
}

TERM:
#------------------------------------------------------------------------------
vLog2("Termination");
#------------------------------------------------------------------------------
# 
Term($rtn);

###############################################################################
__END__


=head1 Test Label

=begin html
MLD.2.19: Query Number of Sources<BR>
Part C: One, Two source included

=end html

=head1 Purpose

=begin html
To verify that an MLDv2 router properly processes Number of Source Addresses in Query messages.

=end html

=head1 References

=begin html
RFC3810 5.1.10.  Number of Sources (N)<BR>

=cut
<PRE>
   The Number of Sources (N) field specifies how many source addresses
   are present in the Query.  This number is zero in a General Query or
   a Multicast Address Specific Query, and non-zero in a Multicast
   Address and Source Specific Query.  This number is limited by the MTU
   of the link over which the Query is transmitted.  For example, on an
   Ethernet link with an MTU of 1500 octets, the IPv6 header (40 octets)
   together with the Hop-By-Hop Extension Header (8 octets) that
   includes the Router Alert option consume 48 octets; the MLD fields up
   to the Number of Sources (N) field consume 28 octets; thus, there are
   1424 octets left for source addresses, which limits the number of
   source addresses to 89 (1424/16).
</PRE>

=pod

=end html

=head1 Discussion

=begin html
<PRE>
   The specific question from low-priority MLDv2 router also receives.
   A querier processes the query after verifying the validity of the
   message.
</PRE>

=end html

=head1 Test Requirement

=begin html
None

=end html

=head1 Test Setup

=begin html
<UL><LI><FONT SIZE="+1"><B>Common Topology</B></FONT></UL>
<PRE><FONT SIZE="+1">
   RUT
    |(I/F: Link0)
    |
   -+-------+-------+-------+---- Network 0
            |       |       |
           TR1     TR2     TN1
</FONT></PRE>
<BLOCKQUOTE><TABLE BORDER>
<TR><TD><TT>ID</TT></TD>
    <TD><TT>attribute</TT></TD>
    <TD><TT>value</TT></TD>
    <TD><TT>memo</TT></TD></TR>
<TR><TD><TT>Network 0</TT></TD>
    <TD><TT>prefix</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>I/F Link0 is connected.</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:01</TT></TD>
    <TD ROWSPAN="3"><TT>Lower IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:1</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:1</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR2</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>fc:fc:fc:fc:fc:fc</TT></TD>
    <TD ROWSPAN="3"><TT>Higher IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::fefc:fcff:fefc:fcfc</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:fefc:fcff:fefc:fcfc</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TN1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:11:11:11</TT></TD>
    <TD ROWSPAN="3"><TT>&nbsp;</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe11:1111</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe11:1111</TT></TD></TR>
</TABLE></BLOCKQUOTE>
<UL><LI><B><FONT SIZE="+1">Common Test Setup</FONT></B>
    <OL><LI>Configure RUT to have:
        <UL><LI>Robustness Variable of 2
            <LI>Query Interval of 125 (seconds)
            <LI>Query Response Interval of 10 (seconds)
            <LI>Last Listener Query Interval of 1 (second)</UL>
        <LI>Configure TR1, TR2, TR3 and TR4 to have:
        <UL><LI>Robustness Variable of 2
            <LI>Query Interval of 125 (seconds)
            <LI>Query Response Interval of 10 (seconds)
            <LI>Last Listener Query Interval of 1 (second)</UL></OL><BR>
    <LI><B><FONT SIZE="+1">Common Test Cleanup</FONT></B>
    <OL><LI>Disable MLD on all devices.
        <LI>Return all timers and variables to their defaults values.
        <LI>The Query Interval of RUT can be shortened to decrease time.</OL></UL>

=end html

=head1 Procedure

=begin html
<PRE>
Step 19. TR2 has a higher IP address then the RUT.
Step 20. Enable MLDv2 on the RUT.
Step 21. Observe the packets on all networks.
Step 22. TN1 transmits Report C.
    -----
    IPv6 Header
        IPv6 Hop Limit                  = 1
        IPv6 Source Address             = TN1 link-local address
        IPv6 Destination Address        = All MLDv2-capable routers
    Hop-by-Hop Options Header
        Router Alert Option
    ICMPv6 Header (MLDv2 Report)
        Number of Mcast Address Records = 1
        Multicast Address Record [1]
            Type                            = 1 (IS_IN)
            Num of Sources                  = 2
            Multicast Address               = M1
            Source Address                  = S1
            Source Address                  = S2
    -----
Step 23. Observe the packets on all networks.
Step 24. TR2 transmits Query C with the Number of Sources set to 1.
    -----
    (This message is received by the receiving node as Multicast Address and Source Specific Query + Additional Data.)
    IPv6 Header
        IPv6 Hop Limit                  = 1
        IPv6 Source Address             = TR2 link-local address
        IPv6 Destination Address        = M1
    Hop-by-Hop Options Header
        Router Alert Option
    ICMPv6 Header (MLD Query)
        Maximum Response Code           = 1000
        Multicast Address               = M1
        S Flag                          = 0
        QRV                             = 2
        QQIC                            = 125
        <FONT COLOR="#FF0000">Number of Sources               = 1 (unusual)</FONT>
        IPv6 Source Address             = S1
        IPv6 Source Address             = S2
    -----
Step 25. Observe the packets on all networks.
Step 26. TN1 transmits Report B.
    -----
    IPv6 Header
        IPv6 Hop Limit                  = 1
        IPv6 Source Address             = TN1 link-local address
        IPv6 Destination Address        = All MLDv2-capable routers
    Hop-by-Hop Options Header
        Router Alert Option
    ICMPv6 Header (MLDv2 Report)
        Number of Mcast Address Records = 1
        Multicast Address Record [1]
            Type                            = 3 (TO_IN)
            Num of Sources                  = 0
            Multicast Address               = M1
    -----
Step 27. Observe the packets on all networks.
</PRE>

=end html

=head1 Observable Results

=begin html
<PRE>
Step 21: The RUT must transmit 2 MLDv2 General Queries.
Step 23: The RUT must not transmit Queries other then periodic General Queries.
Step 25: The RUT must not crash or generate invalid packets.
         The RUT must not transmit Queries other then periodic General Queries.
Step 27: The RUT must transmit 2 Multicast Address and Source Specific Query with a Multicast Address of M1 and a Source Address of S2.
<BR>
   RUT     TR1     TR2     TN1
    |       |       |       |
    |       |       |       | 19. TR2 has a higher IP address then the RUT.
    |       |       |       | 20. Enable MLDv2 on the RUT.
    |       |       |       | 21. Observe the packets on all networks.
    |- - - - - - - - - - - >|     RUT transmits TO_EX(FF02::16,{null}), [RV] times, [URI] seconds
    |---------------------->|     RUT transmits Q(G), [SQC] times, [SQI] seconds
    |<----------------------| 22. TN1 transmits Report C.
    |       |       |       | 23. Observe the packets on all networks.
    |       |       |       |     (no response)
    |<--------------|       | 24. TR2 transmits Query C with the Number of Sources set to 1.
    |       |       |       | 25. Observe the packets on all networks.
    |       |       |       |     (no response)
    |<----------------------| 26. TN1 transmits Report B.
    |       |       |       | 27. Observe the packets on all networks.
    |---------------------->|     RUT transmits Q(M1,{S2}), [LLQC] times, [LLQI] seconds
    |       |       |       |
</PRE>

=end html

=head1 Possible Problems

=begin html
None

=end html
