#!/usr/bin/perl
# 
# Copyright (C) IPv6 Promotion Council, NTT Advanced Technology Corporation
# (NTT-AT), Yokogwa Electoric Corporation and YASKAWA INFORMATION SYSTEMS
# Corporation All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with
# or without modification, are permitted provided that the following
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which
# is related to this software (hereinafter referred to as "project") nor
# the names of the contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
# notification to the copyrighters. However, using this software for the
# purpose of testing or evaluating any products including merchantable
# products may be permitted without any notification to the copyrighters.
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.
# 
###############################################################################
BEGIN {}
END   {}

#------------------------------------------------------------------------------
# Include
#------------------------------------------------------------------------------
# Include Module
use strict;
use warnings;
use V6evalTool;
use MLDv2R;

#------------------------------------------------------------------------------
vLog2("Setup");
#------------------------------------------------------------------------------
# Variable
my $stp = 0;
my $rtn;
my $wk;

# Requirement configuration
%T_REQ = ();

# Specification configuration
%T_CONF = ();

# Topology
@T_LINK = ("Link0");
@T_NODE = ("TR1", "TN1");

# Setup Tester
$rtn = Setup();
if ($rtn != $RES_OK) {
	goto TERM;
}

#------------------------------------------------------------------------------
vLog2("Procedure");
#------------------------------------------------------------------------------
# Sequence
%T_SEQ = (
	$stp++ => {
		caption => [ "Step 28. TR1 has a lower IP address then the RUT." ],
		func    => "ConfProc",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 29. Enable MLDv2 on the RUT." ],
		func    => "EnableProc",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 30. Observe the packets on all networks." ],
		qg_int  => $CONF_DATA{SQI},
		func    => $CONF_DATA{FUNC_ENABLE_QUERY} ? "RecvProc" : "BaseProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{ENABLE_TIME}, $CONF_DATA{SQI} + $CONF_DATA{MARGIN_TIME} ],
		count   => $CONF_DATA{SQC},
		msgs    => [ "MLDv2Q_rut0l_allnodes_m0" ],
		status  => 0,
		stack   => "L0SQG",
	},
	$stp++ => {
		caption => [ "Step 31. TN1 transmits Report A." ],
		func    => "SendProc",
		link    => "Link0",
		msgs    => [ "MLDv2R_tn1l_mld2r_r1_t1m1n1s1" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 32. Observe the packets on all networks." ],
		qg_int  => $CONF_DATA{QI},
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{LLQI} + $CONF_DATA{MARGIN_TIME} + $CONF_DATA{CHECK_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2Q_any_any_except_qg" ],
		status  => 1,
	},
	$stp++ => {
		caption => [ "Step 33. TR1 transmits Query A with a Multicast Address of M2." ],
		qg_int  => -1,
		qg_str  => 1,
		func    => "SendProc",
		link    => "Link0",
		msgs    => [ "MLDv2Q_tr1l_mcast2_m2n1s1" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 34. Observe the packets on all networks." ],
		qg_int  => $CONF_DATA{OQPT},
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ ($CONF_DATA{MLDQM_MRD} / 1000) + $CONF_DATA{MARGIN_TIME} + $CONF_DATA{CHECK_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2R_rut0l_mld2r_r1_t1m2n1s1" ],
		status  => 1,
	},
	$stp++ => {
		caption => [ "Step 35. TN1 transmits Report B." ],
		func    => "SendProc",
		link    => "Link0",
		msgs    => [ "MLDv2R_tn1l_mld2r_r1_t3m1n0" ],
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 36. Observe the packets on all networks." ],
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{LLQI} + $CONF_DATA{MARGIN_TIME} + $CONF_DATA{CHECK_TIME} ],
		count   => 1,
		msgs    => [ "MLDv2Q_rut0l_mcast1_m1n1s1" ],
		status  => 1,
	},
);

# local packet
$pktdesc{MLDv2Q_tr1l_mcast2_m2n1s1}          = "Send: TR1 -> M2, MLDv2 Query (M2,{S1})";
$pktdesc{MLDv2R_rut0l_mld2r_r1_t1m2n1s1}    = "Recv: RUT0 -> All MLDv2-capable routers, MLDv2 Report IS_IN(M2,{S1})";

# Execute
for ($stp = 0; $T_SEQ{$stp}; $stp++) {
	no strict 'refs';
	$rtn = &{$T_SEQ{$stp}{func}}($stp);
	if ($rtn != $RES_OK) {
		last;
	}
}

#------------------------------------------------------------------------------
vLog2("Complement Judgement");
#------------------------------------------------------------------------------
$wk = JudgeCommon();
if (($wk != $RES_OK) && ($rtn == $RES_OK)) {
	$rtn = $wk;
}

TERM:
#------------------------------------------------------------------------------
vLog2("Termination");
#------------------------------------------------------------------------------
# 
Term($rtn);

###############################################################################
__END__


=head1 Test Label

=begin html
MLD.2.18: Query Multicast Address Field<BR>
Part D: No Previous Multicast Address

=end html

=head1 Purpose

=begin html
To verify that an MLDv2 router properly processes Multicast Address Field in Query messages.

=end html

=head1 References

=begin html
RFC3810 5.1.5.  Multicast Address<BR>

=cut
<PRE>
   For a General Query, the Multicast Address field is set to zero.  For
   a Multicast Address Specific Query or Multicast Address and Source
   Specific Query, it is set to the multicast address being queried (see
   section 5.1.10, below).
</PRE>

=pod

=end html

=begin html
RFC3810 5.1.7.  S Flag (Suppress Router-Side Processing)<BR>

=cut
<PRE>
                       the normal "host-side" processing of a Query that
   a router may be required to perform as a consequence of itself being
   a multicast listener.
</PRE>

=pod

=end html

=begin html
RFC3810 5.1.13.  Query Variants<BR>

=cut
<PRE>
   o  A "General Query" is sent by the Querier to learn which multicast
      addresses have listeners on an attached link.  In a General Query,
      both the Multicast Address field and the Number of Sources (N)
      field are zero.
      
   o  A "Multicast Address Specific Query" is sent by the Querier to
      learn if a particular multicast address has any listeners on an
      attached link.  In a Multicast Address Specific Query, the
      Multicast Address field contains the multicast address of
      interest, while the Number of Sources (N) field is set to zero.
      
   o  A "Multicast Address and Source Specific Query" is sent by the
      Querier to learn if any of the sources from the specified list for
      the particular multicast address has any listeners on an attached
      link or not.  In a Multicast Address and Source Specific Query the
      Multicast Address field contains the multicast address of
      interest, while the Source Address [i] field(s) contain(s) the
      source address(es) of interest.
</PRE>

=pod

=end html

=begin html
RFC3810 6.  Protocol Description for Multicast Address Listeners<BR>

=cut
<PRE>
   The link-scope all-nodes multicast address, (FF02::1), is handled as
   a special case.  On all nodes -- that is all hosts and routers,
   including multicast routers -- listening to packets destined to the
   all-nodes multicast address, from all sources, is permanently enabled
   on all interfaces on which multicast listening is supported.  No MLD
   messages are ever sent regarding neither the link-scope all-nodes
   multicast address, nor any multicast address of scope 0 (reserved) or
   1 (node-local).
</PRE>

=pod

=end html

=begin html
RFC3810 7.  Description of the Protocol for Multicast Routers<BR>

=cut
<PRE>
   This section describes the part of MLDv2 that is performed by
   multicast routers.  Multicast routers may themselves become multicast
   address listeners, and therefore also perform the multicast listener
   part of MLDv2, described in section 6.
   
   (snip)
   
   On each interface over which this protocol is being run, the router
   MUST enable reception of the link-scope "all MLDv2-capable routers"
   multicast address from all sources, and MUST perform the multicast
   address listener part of MLDv2 for that address on that interface.
</PRE>

=pod

=end html

=head1 Discussion

=begin html
<PRE><FONT COLOR='#FF0000'>
   The IP destination address in a Query has some addresses (RFC3810
   5.1.15).  * However *, some listening information may be broken.  In
   real use, be careful of the IP destination address in a Query.
   
   o  When the IP destination address in General Query is not all-nodes
      multicast address, some nodes do not receive the Query and send
      the Report.  Such General Query is not a perfect Querier's Query.
      Therefore, such a Query should not be applied to a Querier
      election mechanism (RFC3810 7.6.2).  Moreover, QRV and QQIC in
      such a Query should not be adopted as RV and QI (RFC3810 5.1.8,
      5.1.9).  (Since a Specific Query cannot guarantee all Reports, it
      is the same.)
      
   o  When the IP destination address in a Specific Query is not equal
      to the multicast address of interest, some Multicast Listeners
      do not receive the Query and reply the Report.  Such a Specific
      Query is not enough for timer updates in listening information.
      Therefore, such a Query should not be applied to timer updates
      (RFC3810 7.6.1).
</FONT></PRE>

=end html

=head1 Test Requirement

=begin html
None

=end html

=head1 Test Setup

=begin html
<UL><LI><FONT SIZE="+1"><B>Common Topology</B></FONT></UL>
<PRE><FONT SIZE="+1">
   RUT
    |(I/F: Link0)
    |
   -+-------+-------+-------+---- Network 0
            |       |       |
           TR1     TR2     TN1
</FONT></PRE>
<BLOCKQUOTE><TABLE BORDER>
<TR><TD><TT>ID</TT></TD>
    <TD><TT>attribute</TT></TD>
    <TD><TT>value</TT></TD>
    <TD><TT>memo</TT></TD></TR>
<TR><TD><TT>Network 0</TT></TD>
    <TD><TT>prefix</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>I/F Link0 is connected.</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:01</TT></TD>
    <TD ROWSPAN="3"><TT>Lower IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:1</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:1</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR2</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>fc:fc:fc:fc:fc:fc</TT></TD>
    <TD ROWSPAN="3"><TT>Higher IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::fefc:fcff:fefc:fcfc</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:fefc:fcff:fefc:fcfc</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TN1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:11:11:11</TT></TD>
    <TD ROWSPAN="3"><TT>&nbsp;</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe11:1111</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe11:1111</TT></TD></TR>
</TABLE></BLOCKQUOTE>
<UL><LI><B><FONT SIZE="+1">Common Test Setup</FONT></B>
    <OL><LI>Configure RUT to have:
        <UL><LI>Robustness Variable of 2
            <LI>Query Interval of 125 (seconds)
            <LI>Query Response Interval of 10 (seconds)
            <LI>Last Listener Query Interval of 1 (second)</UL>
        <LI>Configure TR1, TR2, TR3 and TR4 to have:
        <UL><LI>Robustness Variable of 2
            <LI>Query Interval of 125 (seconds)
            <LI>Query Response Interval of 10 (seconds)
            <LI>Last Listener Query Interval of 1 (second)</UL></OL><BR>
    <LI><B><FONT SIZE="+1">Common Test Cleanup</FONT></B>
    <OL><LI>Disable MLD on all devices.
        <LI>Return all timers and variables to their defaults values.
        <LI>The Query Interval of RUT can be shortened to decrease time.</OL></UL>

=end html

=head1 Procedure

=begin html
<PRE>
Step 28. TR1 has a lower IP address then the RUT.
Step 29. Enable MLDv2 on the RUT.
Step 30. Observe the packets on all networks.
Step 31. TN1 transmits Report A.
    -----
    IPv6 Header
        IPv6 Hop Limit                  = 1
        IPv6 Source Address             = TN1 link-local address
        IPv6 Destination Address        = All MLDv2-capable routers
    Hop-by-Hop Options Header
        Router Alert Option
    ICMPv6 Header (MLDv2 Report)
        Number of Mcast Address Records = 1
        Multicast Address Record [1]
            Type                            = 1 (IS_IN)
            Num of Sources                  = 1
            Multicast Address               = M1
            Source Address                  = S1
    -----
Step 32. Observe the packets on all networks.
Step 33. TR1 transmits Query A with a Multicast Address of M2.
    -----
    IPv6 Header
        IPv6 Hop Limit                  = 1
        IPv6 Source Address             = TR1 link-local address
        <FONT COLOR="#FF0000">IPv6 Destination Address        = All MLDv2-capable multicast routers (unusual)</FONT>
    Hop-by-Hop Options Header
        Router Alert Option
    ICMPv6 Header (MLD Query)
        Maximum Response Code           = 1000
        <FONT COLOR="#FF0000">Multicast Address               = M2 (unusual)</FONT>
        S Flag                          = 0
        QRV                             = 2
        QQIC                            = 125
        Number of Sources               = 1
        Multicast Source Address        = S1
    -----
Step 34. Observe the packets on all networks.
Step 35. TN1 transmits Report B.
    -----
    IPv6 Header
        IPv6 Hop Limit                  = 1
        IPv6 Source Address             = TN1 link-local address
        IPv6 Destination Address        = All MLDv2-capable routers
    Hop-by-Hop Options Header
        Router Alert Option
    ICMPv6 Header (MLDv2 Report)
        Number of Mcast Address Records = 1
        Multicast Address Record [1]
            Type                            = 3 (TO_IN)
            Num of Sources                  = 0
            Multicast Address               = M1
    -----
Step 36. Observe the packets on all networks.
</PRE>

=end html

=head1 Observable Results

=begin html
<PRE>
Step 30: The RUT must transmit 2 MLDv2 General Queries.
Step 32: The RUT must not transmit Queries other then periodic General Queries.
Step 34: The RUT must not transmit Queries.
Step 36: The RUT must not transmit Queries.
<BR>
   RUT     TR1     TR2     TN1
    |       |       |       |
    |       |       |       | 28. TR1 has a lower IP address then the RUT.
    |       |       |       | 29. Enable MLDv2 on the RUT.
    |       |       |       | 30. Observe the packets on all networks.
    |- - - - - - - - - - - >|     RUT transmits TO_EX(FF02::16,{null}), [RV] times, [URI] seconds
    |---------------------->|     RUT transmits Q(G), [SQC] times, [SQI] seconds
    |<----------------------| 31. TN1 transmits Report A.
    |       |       |       | 32. Observe the packets on all networks.
    |       |       |       |     (no response)
    |<------|       |       | 33. TR1 transmits Query A with a Multicast Address of M2.
    |       |       |       | 34. Observe the packets on all networks.
    |       |       |       |     (no response)
    |<----------------------| 35. TN1 transmits Report B.
    |       |       |       | 36. Observe the packets on all networks.
    |       |       |       |     (no response)
    |       |       |       |
</PRE>

=end html

=head1 Possible Problems

=begin html
None

=end html
