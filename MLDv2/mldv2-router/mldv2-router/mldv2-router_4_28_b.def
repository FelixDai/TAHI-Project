// 
// Copyright (C) IPv6 Promotion Council, NTT Advanced Technology Corporation
// (NTT-AT), Yokogwa Electoric Corporation and YASKAWA INFORMATION SYSTEMS
// Corporation All rights reserved.
// 
// Redistribution and use of this software in source and binary forms, with
// or without modification, are permitted provided that the following
// conditions and disclaimer are agreed and accepted by the user:
// 
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project which
// is related to this software (hereinafter referred to as "project") nor
// the names of the contributors may be used to endorse or promote products
// derived from this software without specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
// notification to the copyrighters. However, using this software for the
// purpose of testing or evaluating any products including merchantable
// products may be permitted without any notification to the copyrighters.
// 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
// THE POSSIBILITY OF SUCH DAMAGE.
// 
///////////////////////////////////////////////////////////////////////////////
//=============================================================================
// Include
//=============================================================================
#include "MLDv2R.def"

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S1,S2,..S89})
//-----------------------------------------------------------------------------
// ALLOW(M1,{S1,S2,..S89})
MLDv2_AddrRecord mld2_rcd_t5m1n89 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 89;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_01;
	SourceAddress       = MSRC_02;
	SourceAddress       = MSRC_03;
	SourceAddress       = MSRC_04;
	SourceAddress       = MSRC_05;
	SourceAddress       = MSRC_06;
	SourceAddress       = MSRC_07;
	SourceAddress       = MSRC_08;
	SourceAddress       = MSRC_09;
	SourceAddress       = MSRC_10;
	SourceAddress       = MSRC_11;
	SourceAddress       = MSRC_12;
	SourceAddress       = MSRC_13;
	SourceAddress       = MSRC_14;
	SourceAddress       = MSRC_15;
	SourceAddress       = MSRC_16;
	SourceAddress       = MSRC_17;
	SourceAddress       = MSRC_18;
	SourceAddress       = MSRC_19;
	SourceAddress       = MSRC_20;
	SourceAddress       = MSRC_21;
	SourceAddress       = MSRC_22;
	SourceAddress       = MSRC_23;
	SourceAddress       = MSRC_24;
	SourceAddress       = MSRC_25;
	SourceAddress       = MSRC_26;
	SourceAddress       = MSRC_27;
	SourceAddress       = MSRC_28;
	SourceAddress       = MSRC_29;
	SourceAddress       = MSRC_30;
	SourceAddress       = MSRC_31;
	SourceAddress       = MSRC_32;
	SourceAddress       = MSRC_33;
	SourceAddress       = MSRC_34;
	SourceAddress       = MSRC_35;
	SourceAddress       = MSRC_36;
	SourceAddress       = MSRC_37;
	SourceAddress       = MSRC_38;
	SourceAddress       = MSRC_39;
	SourceAddress       = MSRC_40;
	SourceAddress       = MSRC_41;
	SourceAddress       = MSRC_42;
	SourceAddress       = MSRC_43;
	SourceAddress       = MSRC_44;
	SourceAddress       = MSRC_45;
	SourceAddress       = MSRC_46;
	SourceAddress       = MSRC_47;
	SourceAddress       = MSRC_48;
	SourceAddress       = MSRC_49;
	SourceAddress       = MSRC_50;
	SourceAddress       = MSRC_51;
	SourceAddress       = MSRC_52;
	SourceAddress       = MSRC_53;
	SourceAddress       = MSRC_54;
	SourceAddress       = MSRC_55;
	SourceAddress       = MSRC_56;
	SourceAddress       = MSRC_57;
	SourceAddress       = MSRC_58;
	SourceAddress       = MSRC_59;
	SourceAddress       = MSRC_60;
	SourceAddress       = MSRC_61;
	SourceAddress       = MSRC_62;
	SourceAddress       = MSRC_63;
	SourceAddress       = MSRC_64;
	SourceAddress       = MSRC_65;
	SourceAddress       = MSRC_66;
	SourceAddress       = MSRC_67;
	SourceAddress       = MSRC_68;
	SourceAddress       = MSRC_69;
	SourceAddress       = MSRC_70;
	SourceAddress       = MSRC_71;
	SourceAddress       = MSRC_72;
	SourceAddress       = MSRC_73;
	SourceAddress       = MSRC_74;
	SourceAddress       = MSRC_75;
	SourceAddress       = MSRC_76;
	SourceAddress       = MSRC_77;
	SourceAddress       = MSRC_78;
	SourceAddress       = MSRC_79;
	SourceAddress       = MSRC_80;
	SourceAddress       = MSRC_81;
	SourceAddress       = MSRC_82;
	SourceAddress       = MSRC_83;
	SourceAddress       = MSRC_84;
	SourceAddress       = MSRC_85;
	SourceAddress       = MSRC_86;
	SourceAddress       = MSRC_87;
	SourceAddress       = MSRC_88;
	SourceAddress       = MSRC_89;
}

FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t5m1n89,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n89);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n89);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		Reserved                = MLDv2R_RESERVED;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t5m1n89;
	}
)

//-----------------------------------------------------------------------------
// TN1 -> All MLDv2-capable routers, MLDv2 Report ALLOW(M1,{S90})
//-----------------------------------------------------------------------------
// IS_IN(M1,{S90})
MLDv2_AddrRecord mld2_rcd_t5m1n1s90 {
	Type                = 5;
	AuxDataLen          = 0;
	NumOfSources        = 1;
	MulticastAddress    = MCAST1_ADDR;
	SourceAddress       = MSRC_90;
}

FEM_icmp6_mldv2report_exth(
	MLDv2R_tn1l_mld2r_r1_t5m1n1s90,
	_HETHER_tn1_to_mld2r,
	{
		HopLimit        = MLDv2R_HOP;
		_SRC(TN1_LLOCAL_UCAST);
		_DST(MLDv2_ROUTERS_ADDR);
	},
	{
		header  = _HDR_IPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n1s90);
		exthdr  = ext_hbh_rtalert_mld;
		upper   = _ICMPV6_NAME(MLDv2R_tn1l_mld2r_r1_t5m1n1s90);
	},
	{
		Type                    = MLDv2R_TYPE;
		Code                    = MLDv2R_CODE;  // as Reserved
		Checksum                = MLDv2R_CHECKSUM;
		Reserved                = MLDv2R_RESERVED;
		NumOfMcastAddrRecords   = 1;
		MLDv2_AddrRecord        = mld2_rcd_t5m1n1s90;
	}
)

// EOF
