#!/usr/bin/perl
# 
# Copyright (C) IPv6 Promotion Council, NTT Advanced Technology Corporation
# (NTT-AT), Yokogwa Electoric Corporation and YASKAWA INFORMATION SYSTEMS
# Corporation All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with
# or without modification, are permitted provided that the following
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which
# is related to this software (hereinafter referred to as "project") nor
# the names of the contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
# notification to the copyrighters. However, using this software for the
# purpose of testing or evaluating any products including merchantable
# products may be permitted without any notification to the copyrighters.
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.
# 
###############################################################################
BEGIN {}
END   {}

#------------------------------------------------------------------------------
# Include
#------------------------------------------------------------------------------
# Include Module
use strict;
use warnings;
use V6evalTool;
use MLDv2R;

#------------------------------------------------------------------------------
vLog2("Setup");
#------------------------------------------------------------------------------
# Variable
my $stp = 0;
my $rtn;
my $wk;

# Requirement configuration
%T_REQ = ();

# Specification configuration
%T_CONF = (
	RV  => 2,
	QI  => 125,
	QRI => 10,
);

# Topology
@T_LINK = ("Link0");
@T_NODE = ("TN1");

# Setup Tester
$rtn = Setup();
if ($rtn != $RES_OK) {
	goto TERM;
}

#------------------------------------------------------------------------------
vLog2("Procedure");
#------------------------------------------------------------------------------
# Sequence
%T_SEQ = (
	$stp++ => {
		caption => [ "Step 1. Configure the RUT to use Default Variables for all fields." ],
		func    => "ConfProc",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 2. Enable MLDv2 on the RUT." ],
		func    => "EnableProc",
		status  => 0,
	},
	$stp++ => {
		caption => [ "Step 3. Observe the packets on all networks." ],
		qg_int  => $CONF_DATA{SQI},
		func    => "RecvProc",
		link    => "Link0",
		wtime   => [ $CONF_DATA{FUNC_ENABLE_QUERY} ? $CONF_DATA{ENABLE_TIME} : $CONF_DATA{QI} ],
		count   => 1,
		msgs    => [ "MLDv2Q_rut0l_allnodes_m0" ],
		status  => 0,
		stack   => "L0SQG",
	},
);

# Execute
for ($stp = 0; $T_SEQ{$stp}; $stp++) {
	no strict 'refs';
	$rtn = &{$T_SEQ{$stp}{func}}($stp);
	if ($rtn != $RES_OK) {
		last;
	}
}

#------------------------------------------------------------------------------
vLog2("Complement Judgement");
#------------------------------------------------------------------------------
$wk = JudgeCommon();
if (($wk != $RES_OK) && ($rtn == $RES_OK)) {
	$rtn = $wk;
}

#------------------------------------------------------------------------------
vLog1("Check: Fields of General Query.");
#------------------------------------------------------------------------------
my @check_fld = (
	"IPv6 Payload Length     ",
	"IPv6 Next Header        ",
	"IPv6 Hop Limit          ",
	"IPv6 Source Address     ",
	"IPv6 Destination Address",
	"Hop-By-Hop Next Header  ",
	"Router Alert Option Type",
	"Type                    ",
	"Code                    ",
	"Checksum                ",
	"Maximum Response Code   ",
	"Reserved                ",
	"Multicast Address       ",
	"Resv                    ",
	"S Flag                  ",
	"QRV                     ",
	"QQIC                    ",
	"Number of Sources       ",
);

my %check_frame = (
	"IPv6 Payload Length     " => "Frame_Ether.Packet_IPv6.Hdr_IPv6.PayloadLength",
	"IPv6 Next Header        " => "Frame_Ether.Packet_IPv6.Hdr_IPv6.NextHeader",
	"IPv6 Hop Limit          " => "Frame_Ether.Packet_IPv6.Hdr_IPv6.HopLimit",
	"IPv6 Source Address     " => "Frame_Ether.Packet_IPv6.Hdr_IPv6.SourceAddress",
	"IPv6 Destination Address" => "Frame_Ether.Packet_IPv6.Hdr_IPv6.DestinationAddress",
	"Hop-By-Hop Next Header  " => "Frame_Ether.Packet_IPv6.Hdr_HopByHop.NextHeader",
	"Router Alert Option Type" => "Frame_Ether.Packet_IPv6.Hdr_HopByHop.Opt_RouterAlert.OptionType",
	"Type                    " => "Frame_Ether.Packet_IPv6.ICMPv6_MLDv2Query.Type",
	"Code                    " => "Frame_Ether.Packet_IPv6.ICMPv6_MLDv2Query.Code",
	"Checksum                " => "Frame_Ether.Packet_IPv6.ICMPv6_MLDv2Query.Checksum",
	"Maximum Response Code   " => "Frame_Ether.Packet_IPv6.ICMPv6_MLDv2Query.MaxResponseDelay",
	"Reserved                " => "Frame_Ether.Packet_IPv6.ICMPv6_MLDv2Query.Reserved",
	"Multicast Address       " => "Frame_Ether.Packet_IPv6.ICMPv6_MLDv2Query.MulticastAddress",
	"Resv                    " => "Frame_Ether.Packet_IPv6.ICMPv6_MLDv2Query.Resv",
	"S Flag                  " => "Frame_Ether.Packet_IPv6.ICMPv6_MLDv2Query.SFlag",
	"QRV                     " => "Frame_Ether.Packet_IPv6.ICMPv6_MLDv2Query.QRV",
	"QQIC                    " => "Frame_Ether.Packet_IPv6.ICMPv6_MLDv2Query.QQIC",
	"Number of Sources       " => "Frame_Ether.Packet_IPv6.ICMPv6_MLDv2Query.NumOfSources",
);

my %check_value = (
	"IPv6 Payload Length     " => "36",
	"IPv6 Next Header        " => "0",
	"IPv6 Hop Limit          " => "1",
	"IPv6 Destination Address" => "ff02::1",
	"Hop-By-Hop Next Header  " => "58",
	"Router Alert Option Type" => "5",
	"Type                    " => "130",
	"Code                    " => "0",
	"Maximum Response Code   " => "10000",
	"Reserved                " => "0",
	"Multicast Address       " => "::",
	"Resv                    " => "0",
	"S Flag                  " => "0",
	"QRV                     " => "2",
	"QQIC                    " => "125",
	"Number of Sources       " => "0",
);

my $vref;
my %vref;
my $chk;
foreach $vref (@{$STACK_S{L0SQG}}) {
	%vref = %{$vref};
	vLog0("	<A HREF=\"#vRecvPKT$vref{PKTNO}\">Received MLD Query.</A>");
	foreach $wk (@check_fld) {
		unless (defined $check_value{$wk}) {
			vLogBlue("	$wk = $vref{$check_frame{$wk}}");
			next;
		}
		$chk = $check_value{$wk};

		if ($wk eq "Maximum Response Code   ") {
			if ($chk < $vref{$check_frame{$wk}}) {
				vLogRed("	$wk = $vref{$check_frame{$wk}}");
				$wk =~ s/ +$//;
				vLogRed("		FAIL: $wk is not below $chk");
				$rtn = $RES_NG;
			}
			else {
				vLogBlue("	$wk = $vref{$check_frame{$wk}}");
			}
		}
		elsif ($chk ne $vref{$check_frame{$wk}}) {
			vLogRed("	$wk = $vref{$check_frame{$wk}}");
			$wk =~ s/ +$//;
			vLogRed("		FAIL: $wk is not $chk");
			$rtn = $RES_NG;
		}
		else {
			vLogBlue("	$wk = $vref{$check_frame{$wk}}");
		}
	}
}

TERM:
#------------------------------------------------------------------------------
vLog2("Termination");
#------------------------------------------------------------------------------
Term($rtn);

###############################################################################
__END__


=head1 Test Label

=begin html
MLD.2.1: Transmitting General Query

=end html

=head1 Purpose

=begin html
To verify that an MLDv2 router properly transmits MLDv2 General Query.

=end html

=head1 References

=begin html
RFC3810 5.  Message Formats<BR>

=cut
<PRE>
   MLDv2 is a sub-protocol of ICMPv6, that is, MLDv2 message types are a
   subset of ICMPv6 messages, and MLDv2 messages are identified in IPv6
   packets by a preceding Next Header value of 58.  All MLDv2 messages
   described in this document MUST be sent with a link-local IPv6 Source
   Address, an IPv6 Hop Limit of 1, and an IPv6 Router Alert option
   [RFC2711] in a Hop-by-Hop Options header.  (The Router Alert option
   is necessary to cause routers to examine MLDv2 messages sent to IPv6
   multicast addresses in which the routers themselves have no
   interest.)
   
   (snip)
   
      o  Multicast Listener Query (Type = decimal 130)
</PRE>

=pod

=end html

=begin html
RFC3810 5.1.1.  Code<BR>

=cut
<PRE>
   Initialized to zero by the sender; ignored by receivers.
</PRE>

=pod

=end html

=begin html
RFC3810 5.1.2.  Checksum<BR>

=cut
<PRE>
   The standard ICMPv6 checksum; it covers the entire MLDv2 message,
   plus a "pseudo-header" of IPv6 header fields [RFC2463].  For
   computing the checksum, the Checksum field is set to zero.  When a
   packet is received, the checksum MUST be verified before processing
   it.
</PRE>

=pod

=end html

=begin html
RFC3810 5.1.3.  Maximum Response Code<BR>

=cut
<PRE>
   The Maximum Response Code field specifies the maximum time allowed
   before sending a responding Report.  The actual time allowed, called
   the Maximum Response Delay, is represented in units of milliseconds,
   and is derived from the Maximum Response Code as follows:
</PRE>

=pod

=end html

=begin html
RFC3810 5.1.4.  Reserved<BR>

=cut
<PRE>
   Initialized to zero by the sender; ignored by receivers.
</PRE>

=pod

=end html

=begin html
RFC3810 5.1.5.  Multicast Address<BR>

=cut
<PRE>
   For a General Query, the Multicast Address field is set to zero.  For
   a Multicast Address Specific Query or Multicast Address and Source
   Specific Query, it is set to the multicast address being queried (see
   section 5.1.10, below).
</PRE>

=pod

=end html

=begin html
RFC3810 5.1.8.  QRV (Querier's Robustness Variable)<BR>

=cut
<PRE>
   If non-zero, the QRV field contains the [Robustness Variable] value
   used by the Querier.  If the Querier's [Robustness Variable] exceeds
   7 (the maximum value of the QRV field), the QRV field is set to zero.
</PRE>

=pod

=end html

=begin html
RFC3810 5.1.9.  QQIC (Querier's Query Interval Code)<BR>

=cut
<PRE>
   The Querier's Query Interval Code field specifies the [Query
   Interval] used by the Querier.  The actual interval, called the
   Querier's Query Interval (QQI), is represented in units of seconds,
   and is derived from the Querier's Query Interval Code as follows:
</PRE>

=pod

=end html

=begin html
RFC3810 5.1.10.  Number of Sources (N)<BR>

=cut
<PRE>
   The Number of Sources (N) field specifies how many source addresses
   are present in the Query.  This number is zero in a General Query or
   a Multicast Address Specific Query, and non-zero in a Multicast
   Address and Source Specific Query.
</PRE>

=pod

=end html

=begin html
RFC3810 5.1.12.  Additional Data<BR>

=cut
<PRE>
                                                   When sending a Query,
   an MLDv2 implementation MUST NOT include additional octets beyond the
   fields described above.
</PRE>

=pod

=end html

=begin html
RFC3810 5.1.13.  Query Variants<BR>

=cut
<PRE>
   o  A "General Query" is sent by the Querier to learn which multicast
      addresses have listeners on an attached link.  In a General Query,
      both the Multicast Address field and the Number of Sources (N)
      field are zero.
</PRE>

=pod

=end html

=begin html
5.1.14.  Source Addresses for Queries<BR>

=cut
<PRE>
   All MLDv2 Queries MUST be sent with a valid IPv6 link-local source
   address.
</PRE>

=pod

=end html

=begin html
RFC3810 5.1.15.  Destination Addresses for Queries<BR>

=cut
<PRE>
   In MLDv2, General Queries are sent to the link-scope all-nodes
   multicast address (FF02::1).
</PRE>

=pod

=end html

=begin html
RFC3810 7.6.2.  Querier Election<BR>

=cut
<PRE>
   All MLDv2 queries MUST be sent with the FE80::/64 link-local source
   address prefix.
</PRE>

=pod

=end html

=begin html
RFC3810 9.1.  Robustness Variable<BR>

=cut
<PRE>
                                             Default value: 2.
</PRE>

=pod

=end html

=begin html
RFC3810 9.2.  Query Interval<BR>

=cut
<PRE>
                                 Default value: 125 seconds.
</PRE>

=pod

=end html

=begin html
RFC3810 9.3.  Query Response Interval<BR>

=cut
<PRE>
                                                     Default value:
   10000 (10 seconds)
</PRE>

=pod

=end html

=begin html
RFC3810 9.14.3.  Maximum Response Delay<BR>

=cut
<PRE>
   The burstiness of MLD traffic is inversely proportional to the
   Maximum Response Delay.  A longer Maximum Response Delay will spread
   Report messages over a longer interval.  However, a longer Maximum
   Response Delay in Multicast Address Specific and Multicast Address
   And Source Specific Queries extends the leave latency (the time
   between when the last listener stops listening to a source or
   multicast address and when the traffic stops flowing.)  The expected
   rate of Report messages can be calculated by dividing the expected
   number of Reporters by the Maximum Response Delay.  The Maximum
   Response Delay may be dynamically calculated per Query by using the
   expected number of Reporters for that Query as follows:
</PRE>

=pod

=end html

=head1 Discussion

=begin html
None

=end html

=head1 Test Requirement

=begin html
None

=end html

=head1 Test Setup

=begin html
<UL><LI><FONT SIZE="+1"><B>Common Topology</B></FONT></UL>
<PRE><FONT SIZE="+1">
   RUT
    |(I/F: Link0)
    |
   -+-------+-------+-------+---- Network 0
            |       |       |
           TR1     TR2     TN1
</FONT></PRE>
<BLOCKQUOTE><TABLE BORDER>
<TR><TD><TT>ID</TT></TD>
    <TD><TT>attribute</TT></TD>
    <TD><TT>value</TT></TD>
    <TD><TT>memo</TT></TD></TR>
<TR><TD><TT>Network 0</TT></TD>
    <TD><TT>prefix</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>I/F Link0 is connected.</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:00:00:01</TT></TD>
    <TD ROWSPAN="3"><TT>Lower IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe00:1</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe00:1</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TR2</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>fc:fc:fc:fc:fc:fc</TT></TD>
    <TD ROWSPAN="3"><TT>Higher IP Address</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::fefc:fcff:fefc:fcfc</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:fefc:fcff:fefc:fcfc</TT></TD></TR>
<TR><TD ROWSPAN="3"><TT>TN1</TT></TD>
    <TD><TT>ether</TT></TD>
    <TD><TT>00:00:00:11:11:11</TT></TD>
    <TD ROWSPAN="3"><TT>&nbsp;</TT></TD></TR>
<TR><TD><TT>link-local</TT></TD>
    <TD><TT>fe80::200:ff:fe11:1111</TT></TD></TR>
<TR><TD><TT>global</TT></TD>
    <TD><TT>3ffe:501:ffff:100:200:ff:fe11:1111</TT></TD></TR>
</TABLE></BLOCKQUOTE>
<UL><LI><B><FONT SIZE="+1">Common Test Setup</FONT></B>
    <OL><LI>Configure RUT to have:
        <UL><LI>Robustness Variable of 2
            <LI>Query Interval of 125 (seconds)
            <LI>Query Response Interval of 10 (seconds)
            <LI>Last Listener Query Interval of 1 (second)</UL>
        <LI>Configure TR1, TR2, TR3 and TR4 to have:
        <UL><LI>Robustness Variable of 2
            <LI>Query Interval of 125 (seconds)
            <LI>Query Response Interval of 10 (seconds)
            <LI>Last Listener Query Interval of 1 (second)</UL></OL><BR>
    <LI><B><FONT SIZE="+1">Common Test Cleanup</FONT></B>
    <OL><LI>Disable MLD on all devices.
        <LI>Return all timers and variables to their defaults values.
        <LI>The Query Interval of RUT can be shortened to decrease time.</OL></UL>

=end html

=head1 Procedure

=begin html
<PRE>
Step 1. Configure the RUT to use Default Variables for all fields.
Step 2. Enable MLDv2 on the RUT.
Step 3. Observe the packets on all networks.
</PRE>

=end html

=head1 Observable Results

=begin html
<PRE>
Step 3: The RUT must transmit a Query with the following values:
    -----
    IPv6 Header
        IPv6 Payload Length             = 36
        IPv6 Next Header                = 0
        IPv6 Hop Limit                  = 1
        IPv6 Source Address             = RUT link-local address
        IPv6 Destination Address        = All Nodes Address
    Hop-by-Hop Options Header
        Next Header                     = 58
        Router Alert Option
    ICMPv6 Header (MLD Query)
        Type                            = 130
        Code                            = 0
        Checksum                        = Valid
        Maximum Response Code           = 1000 or less
        Reserved                        = 0
        Multicast Address               = ::
        Resv                            = 0
        S Flag                          = 0
        QRV                             = 2
        QQIC                            = 125
        Number of Sources               = 0
    -----
<BR>
   RUT     TR1     TR2     TN1
    |       |       |       |
    |       |       |       | 1. Configure on the RUT.
    |       |       |       | 2. Enable MLDv2 on the RUT.
    |       |       |       | 3. Observe the packets on all networks.
    |- - - - - - - - - - - >|    RUT transmits TO_EX(FF02::16,{null}), [RV] times, [URI] seconds
    |---------------------->|    RUT transmits Q(G), [SQC] times, [SQI] seconds
    |       |       |       |
</PRE>

=end html

=head1 Possible Problems

=begin html
None

=end html
