#!/usr/bin/perl

# Copyright(C) IPv6 Promotion Council (2004-2010). All Rights Reserved.
# 
# This documentation is produced by SIP SWG members of Certification WG in 
# IPv6 Promotion Council.
# The SWG members currently include NIPPON TELEGRAPH AND TELEPHONE CORPORATION (NTT), 
# Yokogawa Electric Corporation and NTT Advanced Technology Corporation (NTT-AT).
# 
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.

BEGIN { 
    sub BSDversion {
	my($result);local(*STATUS);
	eval {unless( open(STATUS,  'uname -s -r |') ){return} $result = <STATUS>;close(STATUS)};
	$result =~ s/[\r\n]//;
	return $result;
    };
    $V6evalTool::TestVersion = '$Name: ' . 'ct-ims-ipv6-ue-3_0_0' .' ['. BSDversion(). ']  $';
}


# IMS
# 
# CHANGES
#   10/21 REGISTER-SUBSCRIBE
#   10/24 IPSec
#   11/04 SUBSCRIBE-NOTIFY
#         Via,Record-Route,Max-Forwards
#
# 
#         
# 
#            200
#            
#            401
#            200
#            INVITE200
#            ACK
#            BYE
#            BYE200
#            INVITE
# (09/2/10 suyama)
# 
# 
# 
# 
#   REGISTER
#     UEa1 
#   SUBSCRIBE
#     UEa1 
#   INVITE
#     UEa1 
#
# 
#  CtAuthAlgAgreement()
#  username(impi)
#    $impi = CtTbPrm('IMPI');
#  

#use strict;

use ImsScenario;

#----------------------------
# 
#----------------------------
CtScIMSScenario(
    [	# Node Information
	{'node' => 'UEa1',     'nxtNode' => ['P-CSCFa1','DHCP'],     'logPos' => 1,'regFlg' => 1},
	{'node' => 'P-CSCFa1', 'nxtNode' => ['UEa1','I-CSCFa1'],     'logPos' => 2},
	{'node' => 'S-CSCFa1', 'nxtNode' => ['P-CSCFa1','I-CSCFa1'], 'logPos' => 3,'regFlg' => 1},
	{'node' => 'I-CSCFa1', 'nxtNode' => ['S-CSCFa1','S-CSCFa2'], 'logPos' => 4,'regFlg' => 1},
	{'node' => 'S-CSCFa2', 'nxtNode' => ['I-CSCFa1','P-CSCFa2'], 'logPos' => 5,'regFlg' => 1},
	{'node' => 'P-CSCFa2', 'nxtNode' => ['S-CSCFa2','UEa2'],     'logPos' => 6,'regFlg' => 1},
	{'node' => 'UEa2',     'nxtNode' => ['P-CSCFa2'],            'logPos' => 7,'regFlg' => 1},
	{'node' => 'DHCP',     'nxtNode' => ['UEa1'],                'logPos' => 8,'regFlg' => 1},
    ], 
    ['UE-SYNTAX-COMMON-RULES'],
    'UEa1','','clear'
    );

#-------------------
# P-CSCFa1 
#-------------------
sub IMS_PCSCF {
    my ($node, $func, $tbl, $result,@branches,@callids,$reg_ini);
    my ($SndMsg_401_REGISTER, $SndMsg_200_REGISTER_AUTH, $SndMsg_200_SUBSCRIBE, $SndMsg_NOTIFY,
	$SndMsg_100_INVITE, $SndMsg_180_INVITE, $SndMsg_200_INVITE, $SndMsg_BYE,$RecvMsg_INVITE);

    # 
    $node = CtNDDef('P-CSCFa1', '', ['UEa1'], CtCnRecvAny());

    ######################
    # 
    ######################
    CtAddMessagePath('SubscribePath', ['UEa1', 'P-CSCFa1', 'S-CSCFa1']);
    CtAddMessagePath('InvitePath', ['UEa1', 'P-CSCFa1', 'S-CSCFa1', 'I-CSCFa2', 'S-CSCFa2', 'P-CSCFa2', 'UEa2']);
    CtAddMessagePath('InvitePath2', ['UEa2', 'P-CSCFa2', 'S-CSCFa2', 'I-CSCFa1', 'S-CSCFa1', 'P-CSCFa1', 'UEa1']);

    # SA
    CtMkSecNego($node,
		{'name'=>'SA1',%{CtSecNego('','',$node)},
		 'spi_lc'=>CtSecNego('','spi_lc',$node)+10,
		 'spi_ls'=>CtSecNego('','spi_ls',$node)+10,
		 'port_lc'=>CtSecNego('','port_lc',$node)+2});

    # Registration
    # 
    CtSvRegCreate('reg0', 'S-CSCFa1', $node);
    my ($reg_name) = 'reg0'; 

    ###########################################################
    # 1st REGISTER
    ###########################################################
    WaitUntilKeyPress2('Press Enter Key and send REGISTER',$node);

    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	# 
	CtRlJudgeSeq($actSts, 'Receive REGISTER.', 'Can\'t receive REGISTER.');
	
	# 
	CtSvCreateDlgFromReq('dlg0', $rcvPkt, 'S-CSCFa1', $node);	# 
	
	# IPSec 
	if (CtAuthAlgAgreement($node,$rcvPkt)) {
	    MsgPrint(WAR,"Auth algorithm invalid\n");
	    return 'END';
	}

	# REGISTER
	CtRlJudgeSyntax('SS.Request.REGISTER',
			'',			        # 
			'',				# 
			'dlg0',			      	# 
			$rcvPkt,		      	# 
			{				# SYNTAX
			    'branches' => \@branches,
			    'callids' => \@callids,
			});
	
	# S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));

	# S.RFC3261-10.2-6 CallID
	push (@callids, CtFlv('HD,#Call-ID,call-id', $rcvPkt));

	# 
	$reg_ini=$rcvPkt;
	
	#-----------------------------
	# 401(REGISTER)
	#-----------------------------
	{
	    ($result, $SndMsg_401_REGISTER) = 
		CtIoSendMsg( $conn, 						# 
			     'ES.Response.401-REGISTER',    	# ENCODE
			     '',				# 
			     '',			       	# 
			     'dlg0', 		      		# ENCODE
			     $rcvPkt,	       			# ENCODE
			     {
				 'status_code' => '401'
			     }	       	# ENCODE
			     # 
		);
	}
	# 
	CtSvDlgUpdate('dlg0', $SndMsg_401_REGISTER);

	# 
	$reg_nego = $SndMsg_401_REGISTER;

	# REGISTER
	CtCnClose($conn);

	# 
	IMSSetkeySetup(CtTbPrm('IMPI'));	# CtAuthAgreement
	
	# 
	return 'NEXT';
    };
    # REGISTER
    $tbl = CtScAddRcvReqAct($node, $func, 'REGISTER');


    ###########################################################
    # 2nd REGISTER
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;
	my ($regflag) = 1; # 1:
	# 2:
	# 3:

	# 
	CtRlJudgeSeq($actSts, 'Receive REGISTER.', 'Can\'t receive REGISTER.');

	#
	$pre_req = $reg_ini;

	# REGISTER
	CtRlJudgeSyntax('SS.Request.Auth_REGISTER',                     # 
			SvRl226_257_RuleSet($regflag),                  # 
			'',						# 
			'dlg0',						# 
			$rcvPkt,					# 
			{						# SYNTAX
			    'branches' => \@branches,
			    'callids' => \@callids,
			    'reg_ini' => $reg_ini,
			    'reg_nego' => $reg_nego,
			    'regflag' => $regflag,
			    'pre_req' => $pre_req
			});

	# 
	CtSvDlgUpdate('dlg0', $rcvPkt);
	
        #SYNTAX
        $reg_auth = $rcvPkt;

	# 
	# 
	CtSvRegUpdate('reg0', $rcvPkt, 'S-CSCFa1');

	# S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));

	# S.RFC3261-10.2-6 CallID
	push (@callids, CtFlv('HD,#Call-ID,call-id', $rcvPkt));

	#-----------------------------
	# 200(REGISTER)
	#-----------------------------
	{
	    ($result, $SndMsg_200_REGISTER_AUTH) = 
		CtIoSendMsg( $conn,
			     'ES.Response.200-REGISTER',
			     '',
			     '',
			     'dlg0', 	      	# ENCODE
			     $rcvPkt, 	      	# ENCODE
			     {
				 'status_code' => '200',
				 'reg_name' => $reg_name,
				 'protected' => CtEnableIpsec(),# IPSec
			     }      	        # ENCODE
			     # 
		);
	}
	# 
	CtSvDlgUpdate('dlg0', $SndMsg_200_REGISTER_AUTH);
	
	# REGISTER
	CtCnClose($conn);

	return 'NEXT';
    };

    # REGISTER
    $tbl = CtScAddRcvReqAct($node, $func, 'REGISTER');

    ###########################################################
    # SUBSCRIBE
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	# 
	CtRlJudgeSeq($actSts, 'Receive SUBSCRIBE.', 'Can\'t receive SUBSCRIBE.');

	# 
	CtSvCreateDlgFromReq('dlg1', $rcvPkt, 'S-CSCFa1', $node);	# Subscribe

	# SUBSCRIBE
	CtRlJudgeSyntax('SS.Request.SUBSCRIBE',
			'',                         # 
			'',                         # 
			'dlg1',                     # 
			$rcvPkt,                    # 
			{                           # SYNTAX
			    'reg_dlg' => 'dlg0',        # 
			    'branches' => \@branches
			});

	# 
	# 
	CtSvDlgUpdate('dlg1', $rcvPkt, $node, 'reg0');

	# S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));

	#------------------------------
	# 200(SUBSCRIBE)
	#------------------------------
	{
	    ($result, $SndMsg_200_SUBSCRIBE) = 
		CtIoSendMsg( $conn,
			     'ES.Response.200-SUBSCRIBE',
			     '',
			     '',
			     'dlg1', 			  # ENCODE
			     $rcvPkt,			  # ENCODE
			     {				  # ENCODE
				 # 
				 ## RecordRoute
				 'msg_path'  => 'SubscribePath',	# 
				 'emu_node'  => 'P-CSCFa1',		# 
				 'term_node' => 'S-CSCFa1',		# 
				 'protected' => CtEnableIpsec(),			# IPSec
				 'status_code' => '200',
			     });
	}

	# 
	CtSvDlgUpdate('dlg1', $SndMsg_200_SUBSCRIBE);

	# SUBSCRIBE
	CtCnClose($conn);

	# 
	return 'NEXT';
    };
    # SUBSCRIBE
    $tbl = CtScAddRcvReqAct($node, $func, 'SUBSCRIBE');

    ###########################################################
    # NOTIFY
    ###########################################################
    $func = sub {
	my ($conn); 

	$conn = CtCnCreate($node);

	#----------------------
	# NOTIFY
	#----------------------
	{
	    ($result, $SndMsg_NOTIFY) = 
		CtIoSendMsg( $conn,								# 
			     'ES.Request.NOTIFY',	        	# ENCODE
			     '', 			        # 
			     '',				# 
			     'dlg1',				# ENCODE
			     '',				# ENCODE
			                                        # (
			     {					# ENCODE
				 'msg_type'  => 'NOTIFY',
				 # Via
				 'msg_path'  => 'SubscribePath',	# 
				 'emu_node'  => 'P-CSCFa1',     	# 
				 'term_node' => 'S-CSCFa1',	# 
				 'with_dlg'  => 1,		# 
				 'protected' => CtEnableIpsec(),		# IPSec
			     });
	}
	
	# 
	CtSvDlgUpdate('dlg1', $SndMsg_NOTIFY);
	
	# 
	CtSvRegUpdate('reg0');

	# 
	return 'NEXT';
    };
    # NOTIFY
    $tbl = CtScAddImmediateAct($node, $func);


    ###########################################################
    # 200(NOTIFY)
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	# 
	CtRlJudgeSeq($actSts, 'Receive 200.', 'Can\'t receive 200');

	# 200
	CtRlJudgeSyntax('SS.Response.200_NOTIFY',
			'',                         # 
			'',                         # 
			'dlg1',                     # 
			'',                         # 
			{                           # SYNTAX
			    'pre_req' => $SndMsg_NOTIFY
			});
	
	# 
	CtSvDlgUpdate('dlg1', $rcvPkt);

	# NOTIFY
	CtCnClose($conn);

	return 'NEXT';
    };
    # 200(NOTIFY)
    $tbl = CtScAddRcvResAct($node, $func, '200', 'NOTIFY');               


    ###########################################################
    # 
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	# 
	CtRlJudgeSeq($actSts, 'Receive INVITE.', 'Can\'t receive INVITE.');

	# INVITE
	CtSvCreateDlgFromReq('dlg2', $rcvPkt, 'UEa2', $node);
	$RecvMsg_INVITE = $rcvPkt;
	
	# REGISTER
	CtRlJudgeSyntax('SS.Request.INVITE',		
			'',				# 
			'',				# 
			'dlg2',				# 
			$rcvPkt,			# 
			{				 # SYNTAX
			    'branches' => \@branches
			});
	
	# S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));

	#-----------------------------
	# 100(INVITE)
	#-----------------------------
	{
	    ($result, $SndMsg_100_INVITE) = 
		CtIoSendMsg( $conn, 		
			     'ES.Response.100-INVITE',	
			     '',	# 
			     '',	# 
			     'dlg2', 	# ENCODE
			     $rcvPkt,	# ENCODE
			     {
				 'status_code' => '100',
			     }		# ENCODE
			     # 
		);
	}
	# 
	CtSvDlgUpdate('dlg2', $SndMsg_100_INVITE);
	
	#---------------------------
	# 180(INVITE)
	#---------------------------
	{
	    ($result, $SndMsg_180_INVITE) = 
		CtIoSendMsg( $conn, 		
			     'ES.Response.180-INVITE',      
			     '',	# 
			     '',	# 
			     'dlg2', 	# ENCODE
			     $rcvPkt,	# ENCODE
			     {
				 'msg_path'  => 'InvitePath',
				 'emu_node'  => 'P-CSCFa1',
				 'term_node' => 'UEa2',
				 'with_dlg'  => 0,
				 'protected' => CtEnableIpsec(), 
				 'status_code' => '180',
			     }		             # SYNTAX
			     # 
		);
	}
	# 
	CtSvDlgUpdate('dlg2', $SndMsg_180_INVITE);

	# 
	return 'NEXT';
    };
    # INVITE
    $tbl = CtScAddRcvReqAct($node, $func, 'INVITE');

    ###########################################################
    # NOTIFY-ReAuth
    ###########################################################
    $func = sub {
	my ($conn); 

	$conn = CtCnCreate($node);

	# For contact directive => "shorten".
	# 
	{
	    my ($aor,$contact);
	    $aor = CtTbl('UC,UserProfile,PublicUserIdentity','UEa1');   
	    $contact = CtSvDlg('dlg0', 'LocalURI,Contact');
	    CtSvRegShortenContact ('reg0', $aor, $contact, '60', $node);
            CtSvDlgRegInfoSet('dlg1','Event','shortened'); 
            CtSvDlgRegInfoSet('dlg1','ExpireTime',time()+60);
	}
	
	#----------------------
	# NOTIFY
	#----------------------
	{
	    ($result, $SndMsg_NOTIFY) = 
		CtIoSendMsg( $conn,						    # 
			     'ES.Request.NOTIFY',	        	    # ENCODE
			     '', 				    # 
			     '',				    # 
			     'dlg1',				    # ENCODE
			     '',					    # ENCODE
			     # (
			     {					    # ENCODE
				 'msg_type'  => 'NOTIFY',
				 # Viae
				 'msg_path'  => 'SubscribePath',	# 
				 'emu_node'  => 'P-CSCFa1',	# 
				 'term_node' => 'S-CSCFa1',	# 
				 'with_dlg'  => 1,	        # 
				 'protected' => CtEnableIpsec(),		# IPSec
			     }
		);
	}
	# 
	CtSvDlgUpdate('dlg1', $SndMsg_NOTIFY);

	# 
	CtSvRegUpdate('reg0');

	# 
	CtMsgDisplay("Expiration time of registraion was set to 60 seconds.");

	return 'NEXT';
    };	
    # NOTIFY
    $tbl = CtScAddImmediateAct($node, $func);


    ###########################################################
    # 200(NOTIFY-ReAuth)
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	# 
	CtRlJudgeSeq($actSts, 'Receive 200.', 'Can\'t receive 200');

	# 200
	CtRlJudgeSyntax('SS.Response.200_NOTIFY',
			'',                         # 
			'',                         # 
			'dlg1',                     # 
			'',                         # 
			{                           # SYNTAX
			    'pre_req' => $SndMsg_NOTIFY
			});

	# 
	CtSvDlgUpdate('dlg1', $rcvPkt);

	# NOTIFY
	CtCnClose($conn);

	return 'NEXT';
    };
    # 200(NOTIFY)
    $tbl = CtScAddRcvResAct($node, $func, '200', 'NOTIFY','','',35);


    ###########################################################
    # 3rd REGISTER
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	# 
	CtRlJudgeSeq($actSts, 'Receive REGISTER.', 'Can\'t receive REGISTER.');

	# IPSec 
	if (CtAuthAlgAgreement($node,$rcvPkt,'SA1')) {
	    MsgPrint(WAR,"Auth algorithm invalid\n");
	    return 'END';
	}

	# REGISTER
	CtRlJudgeSyntax('SS.Request.Re_REGISTER',
			'',		            	# 
			'',				# 
			'dlg0',				# 
			$rcvPkt,			# 
			{				# SYNTAX
			    'branches' => \@branches,
			    'callids' => \@callids,
			    'reg_nego' => $reg_nego,                    #401
			    'reg_ini' => $reg_ini,                      #
			    'reg_auth' => $reg_auth,                    #
			});

	# 
	CtSvDlgUpdate('dlg0', $rcvPkt);

	# S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));

	# S.RFC3261-10.2-6 CallID
	push (@callids, CtFlv('HD,#Call-ID,call-id', $rcvPkt));

	# 
	$reg_ini=$rcvPkt;

	#-----------------------------
	# 401(REGISTER)
	#-----------------------------
	{
	    ($result, $SndMsg_401_REGISTER) = 
		CtIoSendMsg( $conn, 				       	# 
			     'ES.Response.401-REGISTER',	# ENCODE
			     '',		 	# 
			     '',			# 
			     'dlg0', 			# ENCODE
			     $rcvPkt,			# ENCODE
			     {'status_code' => '401','security_nego'=>'SA1'}	# ENCODE
			     # 
		);
	}
	# 
	CtSvDlgUpdate('dlg0', $SndMsg_401_REGISTER);

	# REGISTER
	$reg_nego = $SndMsg_401_REGISTER;

	# REGISTER
	CtCnClose($conn);

	# 
	IMSSetkeySetup(CtTbPrm('IMPI'),'SA1');	# CtAuthAgreement

	return 'NEXT';
    };
    # REGISTER
    $tbl = CtScAddRcvReqAct($node, $func, 'REGISTER');


    ###########################################################
    # 4th REGISTER
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;
	my ($regflag) = 2; # 2:

	# 
	CtRlJudgeSeq($actSts, 'Receive REGISTER.', 'Can\'t receive REGISTER.');

	#
	$pre_req = $reg_ini;

	# REGISTER
        $Addrules = SvRl226_257_RuleSet($regflag);
        push(@$Addrules, 'S.TS24229-5.1-189');
	CtRlJudgeSyntax('SS.Request.Auth_REGISTER',                     # 
			$Addrules,
			'',						# 
			'dlg0',						# 
			$rcvPkt,					# 
			{						# SYNTAX
			    'branches' => \@branches,
			    'callids' => \@callids,
			    'reg_ini' => $reg_ini,
			    'reg_nego' => $reg_nego,
			    'regflag' => $regflag,
			    'security_nego'=>'SA1',
			    'pre_req' => $pre_req
			});

	# 
	CtSvDlgUpdate('dlg0', $rcvPkt);

	# 
	# 
	CtSvRegUpdate('reg0', $rcvPkt, 'S-CSCFa1');

	# S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));

	# S.RFC3261-10.2-6 CallID
	push (@callids, CtFlv('HD,#Call-ID,call-id', $rcvPkt));

	#-----------------------------
	# 200(REGISTER)
	#-----------------------------
	{
	    ($result, $SndMsg_200_REGISTER_AUTH) = 
		CtIoSendMsg( $conn,
			     'ES.Response.200-REGISTER',
			     '',
			     '',
			     'dlg0', 	      	# ENCODE
			     $rcvPkt, 	      	# ENCODE
			     {
				 'status_code' => '200',
				 'reg_name' => $reg_name,
				 'protected' => CtEnableIpsec(),# IPSec
			     }		       	# ENCODE
			     # 
		);
	}
	# 
	CtSvDlgUpdate('dlg0', $SndMsg_200_REGISTER_AUTH);

	# REGISTER
	CtCnClose($conn);
	
	return 'NEXT';
    };
    # REGISTER
    $tbl = CtScAddRcvReqAct($node, $func, 'REGISTER');


    ###########################################################
    # 200(INVITE)
    ###########################################################
    $func = sub {
	$conn = CtCnCreate($node);

	#########################
	#  SDP
	#########################

	# SDP
	{
	    my ($sdp_ver) = time() + 2208988800;
	    my ($address, $rtp_port);
	    my ($count_a, $sdp_fqdn, @tmp);

	    $rtp_port = CtTbUsr('UEa2', 'rtp-port');
	    $address = CtGetHostFromSecContactURI('UEa2');
	    
	    CtSvSDPCreate('sdp0',
			  {
			      'session-inf' => {
				  'session-id'   => $sdp_ver,
				  'username'     => 'UEa2',
				  'version'      => $sdp_ver,
				  'address-type' => 'IP6',
				  'host'         => $host,
				  'address' => $address,
			      },
			      'media-inf' => [
				  {
				      'media' => 'audio',
				      'port'  => $rtp_port,
				      'fmt-list' => {
					  'fmt' => 0,
					  'rtpmap' => 'rtpmap:0 PCMU/8000'
				      },
					      'bandwidth' => 'AS:75',
				  },
				  ],
			  }, $node);
	    
	    # media-inf
	    # 
            {
                my ($sdp);
                $sdp = CtSvSDPGet('sdp0', CtNDFromName('P-CSCF1'));
                if('ARRAY' ne ref($sdp->{'media-inf'})) {
                    $sdp->{'media-inf'} = [$sdp->{'media-inf'}];
                }
                foreach(@{$sdp->{'media-inf'}}) {
                    $_->{'connection-address'} = $address;
                }
                CtSvSDPSet('sdp0', $sdp, CtNDFromName('P-CSCF1'));
            }
        }
	    @Addrules = ('E.P:U-To-13-Res_DLG');
	    @Delrules = ('E.P:U-To-7-200INVITE');

	($result, $SndMsg_200_INVITE) = 
	    CtIoSendMsg( $conn, 		 
			 'ES.Response.200-INVITE',	
			 \@Addrules,	
			 \@Delrules,	
			 'dlg2', 	# ENCODE
			 $RecvMsg_INVITE,	# ENCODE
			 {
			     'sdp_id'    => 'sdp0',
			     'msg_path'  => 'InvitePath',
			     'emu_node'  => 'P-CSCFa1',
			     'term_node' => 'UEa2',
			     'with_dlg'  => 1,
			     'protected' => CtEnableIpsec(), 
			     'status_code' => '200',     
			 }	                     # ENCODE
			 # 
	    );
	
	# 
	CtSvDlgUpdate('dlg2', $SndMsg_200_INVITE);
	
	CtCnClose($conn);
	
	# 
	return 'NEXT';
    };
    # 200(INVITE)
    $tbl = CtScAddImmediateAct($node, $func);
    

    ####################################################
    #   ACK
    ####################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;
	my (@Addrules);

	# 
	CtRlJudgeSeq($actSts, 'Receive ACK.', 'Can\'t receive ACK.');

	# ACK
	@Addrules = ('S.TS33203-7.4-1', 'S.TS33203-7.4-2');
        if(CtSecurityScheme() eq 'aka'){push(@Addrules,'S.TS24229-5.1-237')}

	CtRlJudgeSyntax('SS.Request.ACK', 
			\@Addrules,                 # 
			'',                         # 
			'dlg2',                     # 
			$rcvPkt,                    # 
			{
			    'pre_req' => $SndMsg_200_INVITE,
			    'branches' => \@branches,
			    'security_nego'=>'SA1'
			});
	
	# 
	CtSvDlgUpdate('dlg2', $rcvPkt);
	
	# S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));

	CtCnClose($conn);

	return 'NEXT';
    };
    # ACK
    $tbl = CtScAddRcvReqAct($node, $func, 'ACK');


    ###########################################################
    #  BYE
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn_bye, $usrInf) = @_;
	my (@Addrules);

	# 
	CtRlJudgeSeq($actSts, 'Receive BYE.', 'Can\'t receive BYE.');

	# BYE
        if(CtSecurityScheme() eq 'aka'){push(@Addrules,'S.TS24229-5.1-237')}
	CtRlJudgeSyntax('SS.Request.BYE',
			\@Addrules,                     # 
			'',                             # 
			'dlg2',                         # 
			$rcvPkt,                        # 
			{                               # SYNTAX
			    'branches' => \@branches,
			    'security_nego'=>'SA1'
			});

	# 
	CtSvDlgUpdate('dlg2', $rcvPkt);

	# S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));

	#-----------------------------
	# 200(BYE)
	#-----------------------------
	{
	    ($result, $SndMsg_200_BYE) =
		CtIoSendMsg( $conn_bye,                 
			     'ES.Response.200-BYE',     
			     '',        # add rule
			     '',        # del rule
			     'dlg2',    # ENCODE
			     $rcvPkt,   # ENCODE
			     {
				 'sdp_id'    => 'sdp0',
				 'msg_path'  => 'InvitePath2',
				 'emu_node'  => 'P-CSCFa1',
				 'term_node' => 'UEa2',
				 'with_dlg'  => 1,
				 'protected' => CtEnableIpsec(),
				 'status_code' => '200'
			     }          # ENCODE
			     # 
		);
	}
	# 
	CtSvDlgUpdate('dlg2', $SndMsg_200_BYE);

	CtCnClose($conn);

	return 'NEXT';
    };
    # BYE
    $tbl = CtScAddRcvReqAct($node, $func, 'BYE');


    ######################
    # 
    ######################
    $func = sub {
	my ($conn);
	
	#########################
	# Create SDP information
	#########################

	# SDP
	{
	    my ($sdp_ver) = time() + 2208988800;
	    my ($address, $rtp_port);
	    my ($count_a, $sdp_fqdn, @tmp);

	    $rtp_port = CtTbUsr('UEa2', 'rtp-port');
	    $address = CtGetHostFromSecContactURI('UEa2');

	    CtSvSDPCreate('sdp1',
			  {
			      'session-inf' => {
				  'session-id'   => $sdp_ver,
				  'username'     => 'UEa2',
				  'version'      => $sdp_ver,
				  'address-type' => 'IP6',
				  'host'         => $host,
				  'address' => $address,
			      },
			      'media-inf' => [
				  {
				      'media' => 'audio',
				      'port'  => $rtp_port,
				      'fmt-list' => {
					  'fmt' => 0,
					  'rtpmap' => 'rtpmap:0 PCMU/8000'
				      },
					      'bandwidth' => 'AS:75',
				  },
				  ],
			  }, $node);
	    
	    # media-inf
	    # 
	    {
		my ($sdp);
		$sdp = CtSvSDPGet('sdp1', CtNDFromName('P-CSCF1'));
		if('ARRAY' ne ref($sdp->{'media-inf'})) {
		    $sdp->{'media-inf'} = [$sdp->{'media-inf'}];
		}
		foreach(@{$sdp->{'media-inf'}}) {
#			$_->{'connection-address'} = CtTbUsr('UE2', 'address');
		    $_->{'connection-address'} = $address;
		}
		CtSvSDPSet('sdp1', $sdp, CtNDFromName('P-CSCF1'));
	    }
	}

	# 
	$conn = CtCnCreate($node);

	#-----------------------------
	# INVITE
	#-----------------------------
	{
	    ($result, $SndMsg_INVITE) = 
		CtIoSendMsg( $conn, 		 
			     'ES.Request.Initial-INVITE',	
			     '',	# 
			     '',	# 
			     'dlg3', 	# ENCODE
			     '',	        # ENCODE
			     {
				 'msg_type'  => 'INVITE',
				 'sdp_id'    => 'sdp1',
				 'msg_path'  => 'InvitePath2',
				 'emu_node'  => 'P-CSCFa1',
				 'term_node' => 'UEa2',
				 'with_dlg'  => 0,
				 'protected' => CtEnableIpsec(), 
			     }      # ENCODE
			     # 
		);
	}

	# 
	return 'NEXT';
    };
    # INVITE
    $tbl = CtScAddImmediateAct($node, $func);


    ###########################################################
    # INVITE
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn_invite, $usrInf) = @_;

	### 
	## CtLgJudgeMsg('S.###TS24229-5.1-130',CtIsUnReceived($actSts),$rcvPkt);
	CtLgJudgeMsg('S.TS24229-5.1-240',CtIsUnReceived($actSts),$rcvPkt);

	# 
	CtRlJudgeSeq(CtIsUnReceived($actSts),'No Status','Receive Status');

	return 'END';
    };
    $tbl = CtScAddRcvResAct($node, $func, '', 'INVITE');

    # 
    CtNDDefEnd($node);
}

#---------------
# 
#---------------
IMS_PCSCF();

#--------------------------
# 
#--------------------------
CtScRunScenario();

#--------------------------------
# 
#--------------------------------
CtScFin();





