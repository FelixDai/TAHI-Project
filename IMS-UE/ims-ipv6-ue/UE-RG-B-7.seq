#!/usr/bin/perl

# Copyright(C) IPv6 Promotion Council (2004-2010). All Rights Reserved.
# 
# This documentation is produced by SIP SWG members of Certification WG in 
# IPv6 Promotion Council.
# The SWG members currently include NIPPON TELEGRAPH AND TELEPHONE CORPORATION (NTT), 
# Yokogawa Electric Corporation and NTT Advanced Technology Corporation (NTT-AT).
# 
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.

BEGIN { 
    sub BSDversion {
	my($result);local(*STATUS);
	eval {unless( open(STATUS,  'uname -s -r |') ){return} $result = <STATUS>;close(STATUS)};
	$result =~ s/[\r\n]//;
	return $result;
    };
    $V6evalTool::TestVersion = '$Name: ' . 'ct-ims-ipv6-ue-3_0_0' .' ['. BSDversion(). ']  $';
}


# IMS
# 
# CHANGES
#   10/21 REGISTER-SUBSCRIBE
#   10/24 IPSec
#   11/04 SUBSCRIBE-NOTIFY
#         Via,Record-Route,Max-Forwards
#
# 
# 
#            200
# (09/2/10 suyama)
#
# 
# 
# 
#   REGISTER
#     UEa1 
#   SUBSCRIBE
#     UEa1 
#
# 
#  CtAuthAlgAgreement()
#  username(impi)
#    $impi = CtTbPrm('IMPI');
#  

#use strict;

use ImsScenario;

#----------------------------
# 
#----------------------------
CtScIMSScenario(
    [	# Node Information
	{'node' => 'UEa1',     'nxtNode' => ['P-CSCFa1','DHCP'],     'logPos' => 1,'regFlg' => 1},
	{'node' => 'P-CSCFa1', 'nxtNode' => ['UEa1','I-CSCFa1'],     'logPos' => 2},
	{'node' => 'S-CSCFa1', 'nxtNode' => ['P-CSCFa1','I-CSCFa1'], 'logPos' => 3,'regFlg' => 1},
	{'node' => 'I-CSCFa1', 'nxtNode' => ['S-CSCFa1','S-CSCFa2'], 'logPos' => 4,'regFlg' => 1},
	{'node' => 'S-CSCFa2', 'nxtNode' => ['I-CSCFa1','P-CSCFa2'], 'logPos' => 5,'regFlg' => 1},
	{'node' => 'P-CSCFa2', 'nxtNode' => ['S-CSCFa2','UEa2'],     'logPos' => 6,'regFlg' => 1},
	{'node' => 'UEa2',     'nxtNode' => ['P-CSCFa2'],            'logPos' => 7,'regFlg' => 1},
	{'node' => 'DHCP',     'nxtNode' => ['UEa1'],                'logPos' => 8,'regFlg' => 1},
    ], 
    ['UE-SYNTAX-COMMON-RULES'],
    'UEa1','','clear'
);


#-------------------
# P-CSCFa1 
#-------------------
sub IMS_PCSCF {
    my ($node, $func, $tbl, $result,@branches,@callids,$reg_ini);
    my ($SndMsg_401_REGISTER, $SndMsg_200_REGISTER_AUTH, $SndMsg_423_REGISTER);


    # 
    $node = CtNDDef('P-CSCFa1', '', ['UEa1'], CtCnRecvAny());


    ######################
    # 
    ######################
    CtAddMessagePath('SubscribePath', ['UEa1', 'P-CSCFa1', 'S-CSCFa1']);
    CtAddMessagePath('InvitePath', ['UEa1', 'P-CSCFa1', 'S-CSCFa1', 'I-CSCFa2', 'S-CSCFa2', 'P-CSCFa2', 'UEa2']);

    # Registration
    # 
    CtSvRegCreate('reg0', 'S-CSCFa1', $node);
    my($reg_name) = 'reg0';

    ###########################################################
    # 1st REGISTER
    ###########################################################
    WaitUntilKeyPress2('Press Enter Key and send REGISTER',$node);

    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;
	my (@addrules);

	# 
	CtRlJudgeSeq($actSts, 'Receive REGISTER.', 'Can\'t receive REGISTER.');
	
	#----------------------------------------------------------------
	# 
	#----------------------------------------------------------------
	CtSvCreateDlgFromReq('dlg0', $rcvPkt, 'S-CSCFa1', $node);	# 
	
	# REGISTER
	CtRlJudgeSyntax('SS.Request.REGISTER',	                    	# SYNTAX
			\@addrules,			# 
			'',				# 
			'dlg0',			      	# 
			$rcvPkt,		      	# 
			{				# SYNTAX
			    'branches' => \@branches,
			    'callids' => \@callids,
			});

	# RFC3261-21.4-1
	$pre_req = $rcvPkt;

	# S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));

	# S.RFC3261-10.2-6 CallID
	push (@callids, CtFlv('HD,#Call-ID,call-id', $rcvPkt));

	#----------------------------------------
	# 423(Interval Too Brief)
	#----------------------------------------
	{
	    my (@addRules);

	    @addRules = ('E.P:U-Min-Expires-1-Res_BS');

	    ($result, $SndMsg_423_REGISTER) = 
		CtIoSendMsg( $conn, 				# 
			     'ES.Response.3XX-6XX-ERROR',   	# ENCODE
			     \@addRules,			# 
			     '',		        # 
			     'dlg0', 		      		# ENCODE
			     $rcvPkt,	       			# ENCODE
			     {'status_code' => '423'}	        # ENCODE
			     # 
		);
	}
	# 
	CtSvDlgUpdate('dlg0', $SndMsg_423_REGISTER);

	# REGISTER
	CtCnClose($conn);

	# 
	return 'NEXT';
    };
    # REGISTER
    $tbl = CtScAddRcvReqAct($node, $func, 'REGISTER');


    ###########################################################
    # Resend 1st REGISTER
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;
	my (@Addrules);

	#REGISTER
	if (CtIsReceived($actSts) ne ''){
	    @Addrules = ('S.TS24229-5.1-61','S.RFC3261-21.4-1');
	}else{
       	CtLgJudgeMsg('S.TS24229-5.1-61',CtIsReceived($actSts),$rcvPkt);
    }
	# 
	CtRlJudgeSeq($actSts, 'Receive REGISTER.', 'Can\'t receive REGISTER.');

	# IPSec 
	if (CtAuthAlgAgreement($node,$rcvPkt)) {
	    MsgPrint(WAR,"Auth algorithm invalid\n");
	    return 'END';
	}

	# REGISTER
	CtRlJudgeSyntax('SS.Request.REGISTER',	                    	# SYNTAX
			\@Addrules,			# 
			'',				# 
			'dlg0',			      	# 
			$rcvPkt,		      	# 
			{				# SYNTAX
			    'branches' => \@branches,
			    'callids' => \@callids,
			    'pre_req' => $pre_req
			});
	
	# S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));

	# S.RFC3261-10.2-6 CallID
	push (@callids, CtFlv('HD,#Call-ID,call-id', $rcvPkt));

	# 
	$reg_ini=$rcvPkt;
	
	#-----------------------------
	# 401(REGISTER)
	#-----------------------------
	{
	    my (@addRules, @delRules);

	    ($result, $SndMsg_401_REGISTER) = 
		CtIoSendMsg( $conn, 				# 
			     'ES.Response.401-REGISTER',    	# ENCODE
			     \@addRules,				# 
			     \@delRules,			       	# 
			     'dlg0', 		      		# ENCODE
			     $rcvPkt,	       			# ENCODE
			     {'status_code' => '401'}		# ENCODE
			     # 
		);
	}
	# 
	CtSvDlgUpdate('dlg0', $SndMsg_401_REGISTER);

	# 
	$reg_nego = $SndMsg_401_REGISTER;

	# REGISTER
	CtCnClose($conn);

	# 
	IMSSetkeySetup(CtTbPrm('IMPI'));

	# For MAC address :SvIms.pm
	IMSSetupTargetAD('UEa1',$rcvPkt);

	# 
	return 'NEXT';
    };

    # REGISTER
    $tbl = CtScAddRcvReqAct($node, $func, 'REGISTER');

    ###########################################################
    # 2nd REGISTER
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;
	my ($regflag) = 1; # 1:
	# 2:
	# 3:

	# 
	CtRlJudgeSeq($actSts, 'Receive REGISTER.', 'Can\'t receive REGISTER.');

	#
	$pre_req = $reg_ini;

	# REGISTER
	CtRlJudgeSyntax('SS.Request.Auth_REGISTER',                     # 
			SvRl226_257_RuleSet($regflag),                  # 
			'',						# 
			'dlg0',						# 
			$rcvPkt,					# 
			{						# SYNTAX
			    'branches' => \@branches,
			    'callids' => \@callids,
			    'reg_ini' => $reg_ini,
			    'reg_nego' => $reg_nego,
			    'regflag' => $regflag,
			    'pre_req' => $pre_req
			});

	# 
	CtSvDlgUpdate('dlg0', $rcvPkt);

	# 
	# 
	CtSvRegUpdate('reg0', $rcvPkt, 'S-CSCFa1');

	#-----------------------------
	# 200(REGISTER)
	#-----------------------------
	{
	    ($result, $SndMsg_200_REGISTER_AUTH) = 
		CtIoSendMsg( $conn,
			     'ES.Response.200-REGISTER',
			     '',
			     '',
			     'dlg0', 	      	# ENCODE
			     $rcvPkt, 	      	# ENCODE
			     {		       	# ENCODE
				 'status_code' => '200',
				 'reg_name' => $reg_name,
				 'protected' => CtEnableIpsec(),# IPSec
			     } 
			     # 
		);
	}
	# 
	CtSvDlgUpdate('dlg0', $SndMsg_200_REGISTER_AUTH);

	# REGISTER
	CtCnClose($conn);

	return 'END';
    };

    # REGISTER
    $tbl = CtScAddRcvReqAct($node, $func, 'REGISTER');

    # 
    CtNDDefEnd($node);
}


#---------------
# 
#---------------
IMS_PCSCF();

#--------------------------
# 
#--------------------------
CtScRunScenario();

#--------------------------------
# 
#--------------------------------
CtScFin();


