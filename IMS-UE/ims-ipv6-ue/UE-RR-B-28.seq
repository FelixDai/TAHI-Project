#!/usr/bin/perl

# Copyright(C) IPv6 Promotion Council (2004-2010). All Rights Reserved.
# 
# This documentation is produced by SIP SWG members of Certification WG in 
# IPv6 Promotion Council.
# The SWG members currently include NIPPON TELEGRAPH AND TELEPHONE CORPORATION (NTT), 
# Yokogawa Electric Corporation and NTT Advanced Technology Corporation (NTT-AT).
# 
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.

BEGIN { 
    sub BSDversion {
	my($result);local(*STATUS);
	eval {unless( open(STATUS,  'uname -s -r |') ){return} $result = <STATUS>;close(STATUS)};
	$result =~ s/[\r\n]//;
	return $result;
    };
    $V6evalTool::TestVersion = '$Name: ' . 'ct-ims-ipv6-ue-3_0_0' .' ['. BSDversion(). ']  $';
}


# IMS
# 
#
# 
#       ACK
#
# 
# 


use ImsScenario;

#------------------------------
# Initialize dispatch scenario 
#------------------------------
CtScIMSScenario(
    [	# Node Information
        {'node' => 'UEa1',     'nxtNode' => ['P-CSCFa1','DHCP'],     'logPos' => 1,'regFlg' => 1},
        {'node' => 'P-CSCFa1', 'nxtNode' => ['UEa1','I-CSCFa1'],     'logPos' => 2},
        {'node' => 'S-CSCFa1', 'nxtNode' => ['P-CSCFa1','I-CSCFa2'], 'logPos' => 3,'regFlg' => 1},
        {'node' => 'I-CSCFa2', 'nxtNode' => ['S-CSCFa1','S-CSCFa2'], 'logPos' => 4,'regFlg' => 1},
        {'node' => 'S-CSCFa2', 'nxtNode' => ['I-CSCFa2','P-CSCFa2'], 'logPos' => 5,'regFlg' => 1},
        {'node' => 'P-CSCFa2', 'nxtNode' => ['S-CSCFa2','UEa2'],     'logPos' => 6,'regFlg' => 1},
        {'node' => 'UEa2',     'nxtNode' => ['P-CSCFa2'],            'logPos' => 7,'regFlg' => 1},
        {'node' => 'DHCP',     'nxtNode' => ['UEa1'],                'logPos' => 8,'regFlg' => 1},
    ], 
    ['UE-SYNTAX-COMMON-RULES'],
    'UEa1'	# Test Target Node Name
    );

#-------------------
# Define scenario of P-CSCFa1 
#-------------------
sub IMS_PCSCF {
    my ($node, $func, $tbl, $result, @branches, @callids);
    my ($SndMsg_400_INVITE);

    # start to define the node
    $node = CtNDDef('P-CSCFa1', '', ['UEa1'], CtCnRecvAny());

    # Define message_pass
    CtAddMessagePath('SubscribePath', ['UEa1', 'P-CSCFa1', 'S-CSCFa1']);
    CtAddMessagePath('InvitePath', ['UEa1', 'P-CSCFa1', 'S-CSCFa1', 'I-CSCFa2', 'S-CSCFa2', 'P-CSCFa2', 'UEa2']);

    # SA
    CtMkSecNego($node,
		{'name'=>'SA1',%{CtSecNego('','',$node)},
		 'spi_lc'=>CtSecNego('','spi_lc',$node)+10,
		 'spi_ls'=>CtSecNego('','spi_ls',$node)+10,
		 'port_lc'=>CtSecNego('','port_lc',$node)+2});


    # Wait and Print.(## This function shuold be written outside of the sub function.)
    WaitUntilKeyPress2('Press Enter Key and send INVITE',$node);

    ##########################################################
    # Define 1st Receiving INVITE function 
    ###########################################################
    $func = sub { 
        my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

        # save Connecsion ID and received packt.
        $rcvPkt_g  = $rcvPkt;  #Save rcvPkt of INVITE

        # display the receiving message
        CtRlJudgeSeq($actSts, 'Receive INVITE.', 'Can\'t receive INVITE.');

        # Receive INVITE
        CtSvCreateDlgFromReq('dlg0', $rcvPkt, 'UEa2', $node); #UEa2 is the End point

        ## This Scenario is CANCEL Judgment,but need  INVITE judgment.
        CtRlJudgeSyntax('SS.Request.INVITE',		# SYNTAX rule ID
                        '',				# add rule
                        '',				# del rule
                        'dlg0',				# dialog name
                        $rcvPkt,			# target message
                        {				# parameter to use in SYNTAX 
                            'pre_req'  => '', # $rcvPkt, 20090303
                            #	'branches' => \@branches
                        });
        
	#-----------------------------
	# send 100 Trying
	#-----------------------------
	{
	    ($result, $SndMsg_100_INVITE) = 
		CtIoSendMsg( $conn, 		# connection 
			     'ES.Response.100-INVITE',	# ENCODE rule ID
			     '',	# add rule
			     '',	# del rule
			     'dlg0', 	# dlg reference to use dlg in ENCODE rule (used by CtRlCxDlg )
			     $rcvPkt,	# msg reference to use message in ENCODE rule (used by CtRlCxPkt)
			     {
				 'status_code'=> '100',
			     }		# parameter to use in ENCODE rule (used by CtRlCxUsr)
			     # caution: don't need message path name for via, because copy from reference request 
		);
	}
	# prenew dialog information
	CtSvDlgUpdate('dlg0', $SndMsg_100_INVITE);

        #-----------------------------
        # send 504 Server Time-out [3]
        #-----------------------------
        CtTbSet('UC,AssertedIdentity,DisplayName','term',$node);
        {
            my (@addRules, @delRules);

            ($result, $SndMsg_504_INVITE) = 
                CtIoSendMsg( $conn, 		# connection 
                             'ES.Response.3XX-6XX-ERROR',	# ENCODE rule ID
                             ['E.P:U-Any-XML-Body','E.P:U-P-Asserted-Identity-3','E.P:U-Content-Type-2-application_3gpp-ims+xml'],	# add rule
                             \@delRules,	# del rule
                             'dlg0', 	# dlg reference to use dlg in ENCODE rule (used by CtRlCxDlg )
                             $rcvPkt,	# msg reference to use message in ENCODE rule (used by CtRlCxPkt)
                             {
                                 'msg_path'  => 'InvitePath',
                                 'emu_node'  => 'P-CSCFa1',
                                 'term_node' => 'P-CSCFa1',
                                 'with_dlg'  => 0,
                                 'protected' => CtEnableIpsec(),
                                 'status_code'=> '504',
                                 'body_xml' =>{'ims-3gpp'=>{'_version'=>1,
                                                            'alternative-service'=>{'type'=>'%x72.65.73.74.6F.72.61.74.69.6F.6E',
                                                                                    'reason'=>'operator configurable reason',
                                                                                    'action'=>'%x69.6E.69.74.69.61.6C.2D.72.65.67.69.73.74.72.61.74.69.6F.6E'}}},
                             }		# parameter to use in ENCODE rule (used by CtRlCxUsr)
                             # caution: don't need message path name for via, because copy from reference request 
                );
        }
        # renew dialog information
        CtSvDlgUpdate('dlg0', $SndMsg_504_INVITE);

        # go to Next State
        return 'NEXT';
    };
    # regist the function for receiving INVITE
    $tbl = CtScAddRcvReqAct($node, $func, 'INVITE');


    ##########################################################
    # ACK (INVITE)
    ##########################################################
    $func = sub{
        my ($actSts, $rcvPkt, $conn, $usrInf) =@_;
        # load saved prm
        my $rcvPkt_org = $rcvPkt_g; # INVITE

        #
        CtRlJudgeSeq($actSts, 'Receive ACK.', 'Can\'t receive ACK.');

        #ACK
        CtRlJudgeSyntax('SS.Request.ACK_non-2xx',   # SYNTAX rule ID
                        '',				# add rule
                        '',				# del rule
                        'dlg0',			# dialog name
                        $rcvPkt,			# target message
                        {				# parameter to use in SYNTAX 
                            'pre_res'  => $SndMsg_504_INVITE,
                            'pre_req'  => $rcvPkt_org,
                        }
            );

        #
        CtSvDlgUpdate('dlg0', $rcvPkt);

        # INVITE
        CtCnClose($conn);

        #
        return 'NEXT';
    };
    # ACK
    $tbl = CtScAddRcvReqAct($node, $func, 'ACK');

    ###########################################################
    # re-INITIAL REGISTER
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;
	
	# 
	CtRlJudgeSeq($actSts, 'Receive REGISTER.', 'Can\'t receive REGISTER.');

        # Registration
        CtSvRegCreate('reg1', 'S-CSCFa1', $node);

	# 
	CtSvCreateDlgFromReq('dlg2', $rcvPkt, 'S-CSCFa1', $node);	# 
	
	# IPSec 
	if (CtAuthAlgAgreement($node,$rcvPkt,'SA1')) {
	    MsgPrint(WAR,"Auth algorithm invalid\n");
	    return 'END';
	}

	# REGISTER
	CtRlJudgeSyntax('SS.Request.REGISTER',
			'',			# 
			'',				# 
			'dlg2',			      	# 
			$rcvPkt,		      	# 
			{				# SYNTAX
			    'branches' => \@branches,
			    'callids' => \@callids,
			});
	
	# S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));

	# S.RFC3261-10.2-6 CallID
	push (@callids, CtFlv('HD,#Call-ID,call-id', $rcvPkt));

	# 
	$reg_ini=$rcvPkt;

	#-----------------------------
	# 401(REGISTER)
	#-----------------------------
	{
	    ($result, $SndMsg_401_REGISTER) = 
		CtIoSendMsg( $conn,
			     'ES.Response.401-REGISTER',    	# ENCODE
			     '',			# 
			     '',		       	# 
			     'dlg2', 		      		# ENCODE
			     $rcvPkt,	       			# ENCODE
			     {'status_code' => '401','security_nego'=>'SA1'}	       	# ENCODE
			     # 
		);
	}
	# 
	CtSvDlgUpdate('dlg2', $SndMsg_401_REGISTER);

	# REGISTER
	CtCnClose($conn);

	# 
	IMSSetkeySetup(CtTbPrm('IMPI'),'SA1');

	# 
	return 'NEXT';
    };

    # REGISTER
    $tbl = CtScAddRcvReqAct($node, $func, 'REGISTER');

    ###########################################################
    # (2
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;
	my ($regflag) = 1; # 1:
	# 2:
	# 3:

	# 
	CtRlJudgeSeq($actSts, 'Receive REGISTER.', 'Can\'t receive REGISTER.');

	# REGISTER
	CtRlJudgeSyntax('SS.Request.Auth_REGISTER',                     # 
			SvRl226_257_RuleSet($regflag),                  # 
			'',						# 
			'dlg2',						# 
			$rcvPkt,					# 
			{						# SYNTAX
			    'branches' => \@branches,
			    'callids' => \@callids,
			    'reg_ini' => $reg_ini,
			    'reg_nego' => $SndMsg_401_REGISTER,
			    'regflag' => $regflag,
			    'pre_req' => $reg_ini,
			    'security_nego'=>'SA1',
			});

	# 
	CtSvDlgUpdate('dlg2', $rcvPkt);

	# 
	# 
	CtSvRegUpdate('reg1', $rcvPkt, 'S-CSCFa1');

	# S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));

	# S.RFC3261-10.2-6 CallID
	push (@callids, CtFlv('HD,#Call-ID,call-id', $rcvPkt));

	#-----------------------------
	# 200(REGISTER)
	#-----------------------------
	{
	    my($reg_name) = 'reg1'; 

	    ($result, $SndMsg_200_REGISTER_AUTH) = 
		CtIoSendMsg( $conn,
			     'ES.Response.200-REGISTER',
			     '',
			     '',
			     'dlg2', 	      	# ENCODE
			     $rcvPkt, 	      	# ENCODE
			     {		       	# ENCODE
				 'status_code' => '200',
				 'reg_name' => $reg_name,
				 'protected' => CtEnableIpsec(),# IPSec
			     } 
			     # 
		);
	}
	# 
	CtSvDlgUpdate('dlg2', $SndMsg_200_REGISTER_AUTH);

	# REGISTER
	CtCnClose($conn);

	return 'NEXT';
    };
    # REGISTER
    $tbl = CtScAddRcvReqAct($node, $func, 'REGISTER');


    ###########################################################
    # (2
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	# 
	CtRlJudgeSeq($actSts, 'Receive SUBSCRIBE.', 'Can\'t receive SUBSCRIBE.');

	# 
	CtSvCreateDlgFromReq('dlg3', $rcvPkt, 'S-CSCFa1', $node);	# Subscribe

	# SUBSCRIBE
	CtRlJudgeSyntax('SS.Request.SUBSCRIBE',
			'',                         # 
			'',                         # 
			'dlg3',                     # 
			$rcvPkt,                    # 
			{                           # SYNTAX
			    'reg_dlg' => 'dlg2',        # 
			    'branches' => \@branches,
			    'security_nego'=>'SA1'
			});

	# 
	# 
	CtSvDlgUpdate('dlg3', $rcvPkt, $node, 'reg1');

	# S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));

	#------------------------------
	# 200(SUBSCRIBE)
	#------------------------------
	{
	    ($result, $SndMsg_200_SUBSCRIBE) = 
		CtIoSendMsg( $conn,
			     'ES.Response.200-SUBSCRIBE',
			     '',
			     '',
			     'dlg3', 			  # ENCODE
			     $rcvPkt,			  # ENCODE
			     {				  # ENCODE
				 # 
				 ## RecordRoute
				 'msg_path'  => 'SubscribePath',	# 
				 'emu_node'  => 'P-CSCFa1',		# 
				 'term_node' => 'S-CSCFa1',		# 
				 'protected' => CtEnableIpsec(),			# IPSec
				 'status_code' => '200'
			     }
		);
	}

	# 
	CtSvDlgUpdate('dlg3', $SndMsg_200_SUBSCRIBE);

	# SUBSCRIBE
	CtCnClose($conn);

	# 
	return 'NEXT';
    };
    # SUBSCRIBE
    $tbl = CtScAddRcvReqAct($node, $func, 'SUBSCRIBE');

    ###########################################################
    # (2
    ###########################################################
    $func = sub {
	my ($remoteName, $localName, $conn); 

	$conn = CtCnCreate($node,'','','','SA1');

	#----------------------
	# NOTIFY
	#----------------------
	{
	    ($result, $SndMsg_NOTIFY) = 
		CtIoSendMsg( $conn,
			     'ES.Request.NOTIFY',	        	# ENCODE
			     '', 			        # 
			     '',				# 
			     'dlg3',				# ENCODE
			     '',					# ENCODE
			     # (
			     {					# ENCODE
				 'msg_type'  => 'NOTIFY',
				 # Viae
				 'msg_path'  => 'SubscribePath',	# 
				 'emu_node'  => 'P-CSCFa1',     	# 
				 'term_node' => 'S-CSCFa1',	   # 
				 'with_dlg'  => 1,		  # 
				 'protected' => CtEnableIpsec(),		  # IPSec
			     }
		);
	};

	# 
	CtSvDlgUpdate('dlg3', $SndMsg_NOTIFY);
	
	# 
	CtSvRegUpdate('reg1');

	# 
	return 'NEXT';

    };
    # NOTIFY
    $tbl = CtScAddImmediateAct($node, $func);

    ###########################################################
    # (2
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	# 
	CtRlJudgeSeq($actSts, 'Receive 200.', 'Can\'t receive 200');

	# 200
	CtRlJudgeSyntax('SS.Response.200_NOTIFY',
			'',                         # 
			'',                         # 
			'dlg3',                     # 
			'',                         # 
			{                           # SYNTAX
			    'pre_req' => $SndMsg_NOTIFY
			});

	# 
	CtSvDlgUpdate('dlg3', $rcvPkt);

	# NOTIFY
	CtCnClose($conn);

	return 'END';
    };
    # 200(NOTIFY)
    $tbl = CtScAddRcvResAct($node, $func, '200', 'NOTIFY');

    # 
    CtNDDefEnd($node);
};


#---------------
# 
#---------------
IMS_PCSCF();

#--------------------------
# 
#--------------------------
CtScRunScenario();

#--------------------------------
# 
#--------------------------------
CtScFin();




