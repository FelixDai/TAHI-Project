#!/usr/bin/perl

# Copyright(C) IPv6 Promotion Council (2004-2010). All Rights Reserved.
# 
# This documentation is produced by SIP SWG members of Certification WG in 
# IPv6 Promotion Council.
# The SWG members currently include NIPPON TELEGRAPH AND TELEPHONE CORPORATION (NTT), 
# Yokogawa Electric Corporation and NTT Advanced Technology Corporation (NTT-AT).
# 
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.

BEGIN { 
    sub BSDversion {
	my($result);local(*STATUS);
	eval {unless( open(STATUS,  'uname -s -r |') ){return} $result = <STATUS>;close(STATUS)};
	$result =~ s/[\r\n]//;
	return $result;
    };
    $V6evalTool::TestVersion = '$Name: ' . 'ct-ims-ipv6-ue-3_0_0' .' ['. BSDversion(). ']  $';
}


# IMS
# 
# CHANGES
#   10/21 REGISTER-SUBSCRIBE
#   10/24 IPSec
#   11/04 SUBSCRIBE-NOTIFY
#         Via,Record-Route,Max-Forwards
#
# 
# 
# 
# 
#   REGISTER
#     UEa1 
#   SUBSCRIBE
#     UEa1 
#   OPTIONS
#     UEa2 
#
# 
#  CtAuthAlgAgreement()
#  username(impi)
#    $impi = CtTbPrm('IMPI');
#  


#use strict;


use ImsScenario;

#----------------------------
# 
#----------------------------
CtScIMSScenario(
    [	# Node Information
	{'node' => 'UEa1',     'nxtNode' => ['P-CSCFa1','DHCP'],     'logPos' => 1,'regFlg' => 1},
	{'node' => 'P-CSCFa1', 'nxtNode' => ['UEa1','I-CSCFa1'],     'logPos' => 2},
	{'node' => 'S-CSCFa1', 'nxtNode' => ['P-CSCFa1','I-CSCFa1'], 'logPos' => 3,'regFlg' => 1},
	{'node' => 'I-CSCFa1', 'nxtNode' => ['S-CSCFa1','S-CSCFa2'], 'logPos' => 4,'regFlg' => 1},
	{'node' => 'S-CSCFa2', 'nxtNode' => ['I-CSCFa1','P-CSCFa2'], 'logPos' => 5,'regFlg' => 1},
	{'node' => 'P-CSCFa2', 'nxtNode' => ['S-CSCFa2','UEa2'],     'logPos' => 6,'regFlg' => 1},
	{'node' => 'UEa2',     'nxtNode' => ['P-CSCFa2'],            'logPos' => 7,'regFlg' => 1},
	{'node' => 'DHCP',     'nxtNode' => ['UEa1'],                'logPos' => 8,'regFlg' => 1},
    ], 
    ['UE-SYNTAX-COMMON-RULES'],
    'UEa1'	# Test Target Node Name
    );


#----------------
# 
#----------------

#-------------------
# P-CSCFa1 
#-------------------
sub IMS_PCSCF {
    my ($node, $func, $tbl, $result,@branches);
    my ($SndMsg_401_REGISTER, $SndMsg_200_REGISTER_AUTH, $SndMsg_200_SUBSCRIBE, $SndMsg_OPTIONS);


    # 
    $node = CtNDDef('P-CSCFa1', '', ['UEa1'], CtCnRecvAny());


    ######################
    # 
    ######################
    # 
    #    
    CtAddMessagePath('OptionsPath', ['UEa2', 'P-CSCFa2', 'S-CSCFa2', 'I-CSCFa1', 'S-CSCFa1', 'P-CSCFa1', 'UEa1']);

    ##########################################################
    # OPTIONS
    ##########################################################
    $func = sub {

	# Wait & Print
	WaitUntilKeyPress('Press Enter Key and wait to receive OPTIONS');

        # 
        $conn_options = CtCnCreate($node);

        # OPTIONS
        {
            my (@addRules, @delRules);

	    #	push(@addRules, 'E.Header.P-Asserted-Identity');        # 
	    # XXX:

	    # UE2
	    ##  push(@addRules, 'E.Header.Route');                      # Dialog
	    ##  push(@addRules, 'E.Header.P-Access-Network-Info');      # UE2
	    ##  push(@addRules, 'E.Header.Require');                    # UE2
	    ##  push(@addRules, 'E.Header.Proxy-Require');              # UE2
	    ##  push(@addRules, 'E.Header.Security-Verify');            # P2

	    ($result, $SndMsg_OPTIONS) =
		CtIoSendMsg($conn_options,					                	# 
			    'ES.Request.OPTIONS',	                                        # ENCODE
			    \@addRules,							# 
			    \@delRules,							# 
#							'dlg3',								# ENCODE
			    
			    '',								# ENCODE
			    '',									# ENCODE
			    # (
			    {									# ENCODE
				'msg_type'  => 'OPTIONS',
				'sdp_id'    => 'sdp0',
				# Via
				'msg_path'  => 'OptionsPath',	        # 
				'emu_node'  => 'P-CSCFa1',		# 
				'term_node' => 'UEa2',			# 
				'with_dlg'  => 0,				# 
				'protected' => CtEnableIpsec(),				# IPSec
			    }
		);
        }
        # 
#        CtSvDlgUpdate('dlg3', $SndMsg_OPTIONS);

        # 
        return 'NEXT';
    };
    # OPTIONS
    $tbl = CtScAddImmediateAct($node, $func);



    ###########################################################
    # 200(OPTIONS)
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	# 
	CtRlJudgeSeq($actSts, 'Receive 200.', 'Can\'t receive 200');

	# 200
	CtRlJudgeSyntax('SS.Response.200_OPTIONS', '', '', 'dlg3', '',
			{'pre_req' => $SndMsg_OPTIONS});

	# OPTIONS
	CtCnClose($conn);

	return 'END';
    };
    # 200(OPTIONS)
    $tbl = CtScAddRcvResAct($node, $func, '200', 'OPTIONS');

    # 
    CtNDDefEnd($node);
}


#---------------
# 
#---------------
IMS_PCSCF();

#--------------------------
# 
#--------------------------
CtScRunScenario();

#--------------------------------
# 
#--------------------------------
CtScFin();


