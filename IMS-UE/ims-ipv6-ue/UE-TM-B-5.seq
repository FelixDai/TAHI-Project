#!/usr/bin/perl

# Copyright(C) IPv6 Promotion Council (2004-2010). All Rights Reserved.
# 
# This documentation is produced by SIP SWG members of Certification WG in 
# IPv6 Promotion Council.
# The SWG members currently include NIPPON TELEGRAPH AND TELEPHONE CORPORATION (NTT), 
# Yokogawa Electric Corporation and NTT Advanced Technology Corporation (NTT-AT).
# 
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.

BEGIN { 
    sub BSDversion {
	my($result);local(*STATUS);
	eval {unless( open(STATUS,  'uname -s -r |') ){return} $result = <STATUS>;close(STATUS)};
	$result =~ s/[\r\n]//;
	return $result;
    };
    $V6evalTool::TestVersion = '$Name: ' . 'ct-ims-ipv6-ue-3_0_0' .' ['. BSDversion(). ']  $';
}


# IMS
# 
#
# 
#       CANCEL
#
# 
# 




use ImsScenario;

#------------------------------
# Initialize dispatch scenario 
#------------------------------
CtScIMSScenario(
  [	# Node Information
    {'node' => 'UEa1',     'nxtNode' => ['P-CSCFa1','DHCP'],     'logPos' => 1,'regFlg' => 1},
    {'node' => 'P-CSCFa1', 'nxtNode' => ['UEa1','I-CSCFa1'],     'logPos' => 2},
    {'node' => 'S-CSCFa1', 'nxtNode' => ['P-CSCFa1','I-CSCFa2'], 'logPos' => 3,'regFlg' => 1},
    {'node' => 'I-CSCFa2', 'nxtNode' => ['S-CSCFa1','S-CSCFa2'], 'logPos' => 4,'regFlg' => 1},
    {'node' => 'S-CSCFa2', 'nxtNode' => ['I-CSCFa2','P-CSCFa2'], 'logPos' => 5,'regFlg' => 1},
    {'node' => 'P-CSCFa2', 'nxtNode' => ['S-CSCFa2','UEa2'],     'logPos' => 6,'regFlg' => 1},
    {'node' => 'UEa2',     'nxtNode' => ['P-CSCFa2'],            'logPos' => 7,'regFlg' => 1},
    {'node' => 'DHCP',     'nxtNode' => ['UEa1'],                'logPos' => 8,'regFlg' => 1},
  ], 
  [	# Rule Set
   'UE-SYNTAX-COMMON-RULES'
  ],
  'UEa1'	# Test Target Node Name
);

#-------------------
# Define scenario of P-CSCFa1 
#-------------------
sub IMS_PCSCF {
	my ($node, $func, $tbl, $result, @branches, $conn_g, $rcvPkt_g);
	my ($SndMsg_100_INVITE, $SndMsg_180_INVITE, $SndMsg_200_CANCEL, $SndMsg_487_INVITE);


	# start to define the node
	$node = CtNDDef('P-CSCFa1', '', ['UEa1'], CtCnRecvAny());


	######################
	# Define message_pass
	######################
	CtAddMessagePath('InvitePath', ['UEa1', 'P-CSCFa1', 'S-CSCFa1', 'I-CSCFa2', 'S-CSCFa2', 'P-CSCFa2', 'UEa2']);


	# Wait and Print.(## This function shuold be written outside of the sub function.)
	WaitUntilKeyPress2('Press Enter Key and send INVITE',$node);

	##########################################################
	# Define 1st Receiving INVITE function
	###########################################################
	$func = sub { 
		my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

		
		###########!!! These Saved Parameter is useful for CANCEL !!!#########

		# save Connecsion ID and received packt.
		$conn_g    = $conn;    #Save conn
		$rcvPkt_g  = $rcvPkt;  #Save rcvPkt of INVITE
		
		######################################################################

		# display the receiving message
		CtRlJudgeSeq($actSts, 'Receive INVITE.', 'Can\'t receive INVITE.');

		################################################################
		# Receive INVITE
		################################################################
		CtSvCreateDlgFromReq('dlg0', $rcvPkt, 'UEa2', $node); #UEa2 is the End point

		## This Scenario is CANCEL Judgment,but need  INVITE judgment.
		# Judge recv msg
		CtRlJudgeSyntax('SS.Request.INVITE',		# SYNTAX rule ID
				'',				# add rule
				'',				# del rule
				'dlg0',				# dialog name
				$rcvPkt,			# target message
				{				# parameter to use in SYNTAX 
					'pre_req'  => $rcvPkt,
					#'branches' => \@branches
				});

		##############################
		# send 100 Trying
		##############################
		($result, $SndMsg_100_INVITE) = 
		    CtIoSendMsg( $conn, 		# connection 
				 'ES.Response.100-INVITE',	# ENCODE rule ID
				 '',	# add rule
				 '',	# del rule
				 'dlg0', 	# dlg reference to use dlg in ENCODE rule (used by CtRlCxDlg )
				 $rcvPkt,	# msg reference to use message in ENCODE rule (used by CtRlCxPkt)
				 {
				     'status_code'=> '100',
				 }		# parameter to use in ENCODE rule (used by CtRlCxUsr)
		    );
		# renew dialog information
		CtSvDlgUpdate('dlg0', $SndMsg_100_INVITE);

		
		###########################################################
		# send 180 Ringing
		###########################################################
		($result, $SndMsg_180_INVITE) = 
		    CtIoSendMsg( $conn, 	        	# connection 
				 'ES.Response.180-INVITE',	# ENCODE rule ID
				 '',	        # add rule
				 '',	        # del rule
				 'dlg0', 	# dlg reference to use dlg in ENCODE rule (used by CtRlCxDlg )
				 $rcvPkt,	# msg reference to use message in ENCODE rule (used by CtRlCxPkt)
				 {
				     'msg_path'  => 'InvitePath',
				     'emu_node'  => 'P-CSCFa1',
				     'term_node' => 'UEa2',
				     'with_dlg'  => 0,
				     'protected' => CtEnableIpsec(),
				     'status_code'=> '180',
				 }		# parameter to use in ENCODE rule (used by CtRlCxUsr)
		    );

		# renew dialog information
		CtSvDlgUpdate('dlg0', $SndMsg_180_INVITE);

		#Message Print only (no wait).
		CtMsgDisplay("Send CANCEL");

		# go to Next State
		return 'NEXT';
	};
	# regist the function for receiving INVITE
	$tbl = CtScAddRcvReqAct($node, $func, 'INVITE');


	##########################################################
        # CANCEL
	##########################################################
	### Timer F
	my ($start);

	$func = sub{
	    my ($actSts, $rcvPkt, $conn_cancel, $usrInf) =@_;

	    if(CtIsReceived($actSts)){
		unless ($start){
		    $start = time();
		}
		
		#CANCEL request
		CtRlJudgeSyntax('SS.Request.CANCEL',
				'',				# add rule
				'',				# del rule
				'dlg0',			# dialog name
				$rcvPkt,			# target message
				{				# parameter to use in SYNTAX 
				    #'pre_req'  => $rcvPkt,
				    #'branches' => \@branches
				}
		    );
		
		# CANCEL
		CtCnClose($conn_cancel);
		
		#
		return 'CONTINUE';
	    }
	    
	    # CANCEL
	    if(!$start || time() - $start < 128){
		return 'CONTINUE';
	    }

	    CtRlJudgeSeq($start ? 'OK':'', 'Receive CANCEL', 'Can\'t receive CANCEL');
		    
	    return 'NEXT';
        };
        # CANCEL
	$tbl = CtScAddRcvReqAct($node, $func,'CANCEL','','','1');
	
	###############################################
	# CANCEL
	###############################################
	$func = sub {
	    my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	    CtRlJudgeSeq(CtIsUnReceived($actSts), 'No CANCEL.', 'Receive CANCEL.');
	    return 'END';
	};
	# regist the function for receiving INVITE
	$tbl = CtScAddRcvReqAct($node, $func, 'CANCEL','','','17');
	
	# 
	CtNDDefEnd($node);
};


#---------------
# 
#---------------
IMS_PCSCF();

#--------------------------
# 
#--------------------------
CtScRunScenario();

#--------------------------------
# 
#--------------------------------
CtScFin();


