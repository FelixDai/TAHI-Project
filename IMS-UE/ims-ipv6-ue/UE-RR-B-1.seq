#!/usr/bin/perl

# Copyright(C) IPv6 Promotion Council (2004-2010). All Rights Reserved.
# 
# This documentation is produced by SIP SWG members of Certification WG in 
# IPv6 Promotion Council.
# The SWG members currently include NIPPON TELEGRAPH AND TELEPHONE CORPORATION (NTT), 
# Yokogawa Electric Corporation and NTT Advanced Technology Corporation (NTT-AT).
# 
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.

BEGIN { 
    sub BSDversion {
	my($result);local(*STATUS);
	eval {unless( open(STATUS,  'uname -s -r |') ){return} $result = <STATUS>;close(STATUS)};
	$result =~ s/[\r\n]//;
	return $result;
    };
    $V6evalTool::TestVersion = '$Name: ' . 'ct-ims-ipv6-ue-3_0_0' .' ['. BSDversion(). ']  $';
}


# IMS
# 
# CHANGES
#   10/21 REGISTER-SUBSCRIBE
#   10/24 IPSec
#   11/04 SUBSCRIBE-NOTIFY
#         Via,Record-Route,Max-Forwards
#
# 
#                    (SUBSCRIBE
#                   (OPTIONS
#                   INVITE
#                   (BYE
#
#                  
# 
#            200

# (09/2/10 suyama)
# 
# 
#
# 
#   REGISTER
#     UEa1 
#   SUBSCRIBE
#     UEa1 
#  INVITE
#     UEa1 
#
# 
#  CtAuthAlgAgreement()
#  username(impi)
#    $impi = CtTbPrm('IMPI');
#  
#
#  org = UE-RG-B-4+etc...

#use strict;

use ImsScenario;

#----------------------------
# 
#----------------------------
CtScIMSScenario(
    [	# Node Information
	{'node' => 'UEa1',     'nxtNode' => ['P-CSCFa1','DHCP'],     'logPos' => 1,'regFlg' => 1},
	{'node' => 'P-CSCFa1', 'nxtNode' => ['UEa1','I-CSCFa1'],     'logPos' => 2},
	{'node' => 'S-CSCFa1', 'nxtNode' => ['P-CSCFa1','I-CSCFa1'], 'logPos' => 3,'regFlg' => 1},
	{'node' => 'I-CSCFa1', 'nxtNode' => ['S-CSCFa1','S-CSCFa2'], 'logPos' => 4,'regFlg' => 1},
	{'node' => 'S-CSCFa2', 'nxtNode' => ['I-CSCFa1','P-CSCFa2'], 'logPos' => 5,'regFlg' => 1},
	{'node' => 'P-CSCFa2', 'nxtNode' => ['S-CSCFa2','UEa2'],     'logPos' => 6,'regFlg' => 1},
	{'node' => 'UEa2',     'nxtNode' => ['P-CSCFa2'],            'logPos' => 7,'regFlg' => 1},
	{'node' => 'DHCP',     'nxtNode' => ['UEa1'],                'logPos' => 8,'regFlg' => 1},
    ], 
    ['UE-SYNTAX-COMMON-RULES'],
    'UEa1','','clear'
    );


#----------------
# 
#----------------

#-------------------
# P-CSCFa1 
#-------------------
sub IMS_PCSCF {
    my ($node, $func, $tbl, $result,@branches,@callids,$reg_ini);
    my ($SndMsg_100);
    my ($SndMsg_401_REGISTER, $SndMsg_200_REGISTER_AUTH, $SndMsg_200_SUBSCRIBE, $SndMsg_NOTIFY);
    my ($SndMsg_200_OPTIONS, $SndMsg_180_INVITE, $SndMsg_200_INVITE, $SndMsg_200_BYE);

    # 
    $node = CtNDDef('P-CSCFa1', '', ['UEa1'], CtCnRecvAny());

    ######################
    # 
    ######################
    CtAddMessagePath('SubscribePath', ['UEa1', 'P-CSCFa1', 'S-CSCFa1']);
    CtAddMessagePath('InvitePath', ['UEa1', 'P-CSCFa1', 'S-CSCFa1', 'I-CSCFa2', 'S-CSCFa2', 'P-CSCFa2', 'UEa2']);
    CtAddMessagePath('AckPath', ['UEa1', 'P-CSCFa1', 'S-CSCFa1','S-CSCFa2', 'P-CSCFa2', 'UEa2']);

    # Registration
    # 
    CtSvRegCreate('reg0', 'S-CSCFa1', $node);
    my ($reg_name) = 'reg0'; 

    $my_time_flg = 0;  # the flg for 4sec check

    ###########################################################
    # 1st REGISTER
    ###########################################################
    WaitUntilKeyPress2('Press Enter Key and send REGISTER',$node);

    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;
	my (@addrules);

	# printf("********************************\r\n");
	# 
	CtRlJudgeSeq($actSts, 'Receive REGISTER.', 'Can\'t receive REGISTER.');
	# printf("#################################\r\n");
	if($my_time_flg == 0){ 
	    $my_time = time();  # for 4sec check
	    $my_time_flg = 1;
	}

	# 
	CtSvCreateDlgFromReq('dlg0', $rcvPkt, 'S-CSCFa1', $node);	# 
	
	# IPSec 
	if (CtAuthAlgAgreement($node,$rcvPkt)) {
	    MsgPrint(WAR,"Auth algorithm invalid\n");
	    return 'END';
	}

	# REGISTER
	CtRlJudgeSyntax('SS.Request.REGISTER',	                    	# SYNTAX
			\@addrules,			# 
			'',				# 
			'dlg0',			      	# 
			$rcvPkt,		      	# 
			{				# SYNTAX
			    'branches' => \@branches,
			    'callids' => \@callids,
			});
	
	# S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));

	# S.RFC3261-10.2-6 CallID
	push (@callids, CtFlv('HD,#Call-ID,call-id', $rcvPkt));
	
	# 
	$reg_ini=$rcvPkt;

	#-----------------------------
	# 100(REGISTER)
	#=============================
	{
	    my (@addRules, @delRules);
	    
	    ($result, $SndMsg_100) = 
		CtIoSendMsg( $conn, 		# connection 
			     'ES.Response.100-INVITE',	# ENCODE rule ID
			     '',	# add rule
			     '',	# del rule
			     'dlg0', 	# dlg reference to use dlg in ENCODE rule (used by CtRlCxDlg )
			     $rcvPkt,	# msg reference to use message in ENCODE rule (used by CtRlCxPkt)
			     {
				 'status_code'=> '100',
			     }		# parameter to use in ENCODE rule (used by CtRlCxUsr)
			     # caution: don't need message path name for via, because copy from reference request 
		);
	}

	if ( (($my_time+4) > time())){
	    # printf("mytime=%d time=%d\r\n",$my_time+4, time());  
	    return 'CONTINUE';
	}else{
	    $my_time_flg = 0;  # the flg for 4sec check

	    #-----------------------------
	    # 401(REGISTER)
	    #=============================
	    {
		my (@addRules, @delRules);
		
		($result, $SndMsg_401_REGISTER) = 
		    CtIoSendMsg( $conn, 						# 
				 'ES.Response.401-REGISTER',    	# ENCODE
				 '',				# 
				 '',			       	# 
				 'dlg0', 		      		# ENCODE
				 $rcvPkt,	       			# ENCODE
				 {'status_code' => '401'}				       	# ENCODE
				 # 
		    );
	    }
	    # 
	    CtSvDlgUpdate('dlg0', $SndMsg_401_REGISTER);

	    # 
	    $reg_nego = $SndMsg_401_REGISTER;

	    # REGISTER
	    CtCnClose($conn);
	    
	    # 
	    IMSSetkeySetup(CtTbPrm('IMPI'));	# CtAuthAgreement
	    
	    # For MAC address :SvIms.pm
	    IMSSetupTargetAD('UEa1',$rcvPkt);
	    
	    # 
	    return 'NEXT';
	} # "if-else" statement end 

    };

    # REGISTER
    $tbl = CtScAddRcvReqAct($node, $func, 'REGISTER');

    ###########################################################
    # 2nd REGISTER
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;
	my ($regflag) = 1; # 1:
	# 2:
	# 3:

	# 
	CtRlJudgeSeq($actSts, 'Receive REGISTER.', 'Can\'t receive REGISTER.');
	
	unless(CtFlv('HD,#Authorization,credentials,credential,digestresp,list,#Dresponse,response',$rcvPkt)){
	    return 'CONTINUE';
	}

	#
	$pre_req = $reg_ini;

	# REGISTER
	CtRlJudgeSyntax('SS.Request.Auth_REGISTER',                     # 
			SvRl226_257_RuleSet($regflag),                  # 
			'',						# 
			'dlg0',						# 
			$rcvPkt,					# 
			{						# SYNTAX
			    'branches' => \@branches,
			    'callids' => \@callids,
			    'reg_ini' => $reg_ini,
			    'reg_nego' => $reg_nego,
			    'regflag' => $regflag,
			    'pre_req' => $pre_req
			});

	# 
	CtSvDlgUpdate('dlg0', $rcvPkt);

	# 
	# 
	CtSvRegUpdate('reg0', $rcvPkt, 'S-CSCFa1');

	# S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));

	# S.RFC3261-10.2-6 CallID
	push (@callids, CtFlv('HD,#Call-ID,call-id', $rcvPkt));

	#-----------------------------
	# 200(REGISTER)
	#=============================
	{
	    my (@addRules, @delRules);
	    ($result, $SndMsg_200_REGISTER_AUTH) = 
		CtIoSendMsg( $conn,
			     'ES.Response.200-REGISTER',
			     '',
			     '',
			     'dlg0', 	      	# ENCODE
			     $rcvPkt, 	      	# ENCODE
			     {
				 'status_code' => '200',
				 'reg_name' => $reg_name,
				 'protected' => CtEnableIpsec(),# IPSec
			     }		       	# ENCODE
			     
			     # 
		);
	}
	# 
	CtSvDlgUpdate('dlg0', $SndMsg_200_REGISTER_AUTH);

	# REGISTER
	CtCnClose($conn);

	return 'NEXT';

    };

    # REGISTER
    $tbl = CtScAddRcvReqAct($node, $func, 'REGISTER');


    ###########################################################
    # SUBSCRIBE
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	# 
	CtRlJudgeSeq($actSts, 'Receive SUBSCRIBE.', 'Can\'t receive SUBSCRIBE.');


	if($my_time_flg == 0){
	    $my_time = time();  # for 4sec check
	    $my_time_flg = 1;
	}

	# 
	CtSvCreateDlgFromReq('dlg1', $rcvPkt, 'S-CSCFa1', $node);	# Subscribe

	# SUBSCRIBE
	CtRlJudgeSyntax('SS.Request.SUBSCRIBE',
			'',                         # 
			'',                         # 
			'dlg1',                     # 
			$rcvPkt,                    # 
			{                           # SYNTAX
			    'reg_dlg' => 'dlg0',
			    'branches' => \@branches
			});

	# 
	# 
	CtSvDlgUpdate('dlg1', $rcvPkt, $node, 'reg0'); 
	
	# S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));


	#-----------------------------
	# 100(SUBSCRIBE)
	#=============================
	{
	    my (@addRules, @delRules);
	    
	    ($result, $SndMsg_100) = 
		CtIoSendMsg( $conn, 		# connection 
			     'ES.Response.100-INVITE',	# ENCODE rule ID
			     '',	# add rule
			     '',	# del rule
			     'dlg1', 	# dlg reference to use dlg in ENCODE rule (used by CtRlCxDlg )
			     $rcvPkt,	# msg reference to use message in ENCODE rule (used by CtRlCxPkt)
			     {
				 'status_code'=> '100',
			     }		# parameter to use in ENCODE rule (used by CtRlCxUsr)
			     # caution: don't need message path name for via, because copy from reference request 
		);
	}

	if ( (($my_time+4) > time())){
	    # printf("mytime=%d time=%d\r\n",$my_time+4, time());  
	    return 'CONTINUE';
	}else{
	    $my_time_flg = 0;  # the flg for 4sec check  

	    #------------------------------
	    # 200(SUBSCRIBE) 
	    #==============================
	    {
		my (@addRules, @delRules);

		#CtSvConnReverse($conn);
		($result, $SndMsg_200_SUBSCRIBE) = 
		    CtIoSendMsg( $conn,
				 'ES.Response.200-SUBSCRIBE',    
				 '',
				 '',
				 'dlg1', 			  # ENCODE
				 $rcvPkt,			  # ENCODE
				 {				  # ENCODE
				     # 
				     ## RecordRoute
				     'msg_path'  => 'SubscribePath',	# 
				     'emu_node'  => 'P-CSCFa1',		# 
				     'term_node' => 'S-CSCFa1',		# 
				     'protected' => CtEnableIpsec(),			# IPSec
				     'status_code' => '200'
				 });
	    }

	    # 
	    CtSvDlgUpdate('dlg1', $SndMsg_200_SUBSCRIBE);

	    # SUBSCRIBE
	    CtCnClose($conn);

	    # 
	    return 'NEXT';
	    
	} # "if-else" statement end 

    };
    # SUBSCRIBE
    $tbl = CtScAddRcvReqAct($node, $func, 'SUBSCRIBE');

    ###########################################################
    # NOTIFY
    ###########################################################
    $func = sub {
	my ($conn); 

	$conn = CtCnCreate($node);

	#----------------------
	# NOTIFY
	#=====================
	{
	    my (@addRules, @delRules);
	    
	    ($result, $SndMsg_NOTIFY) = 
		CtIoSendMsg( $conn,								# 
			     'ES.Request.NOTIFY',	        	# ENCODE
			     '', 			        # 
			     '',				# 
			     'dlg1',				# ENCODE
			     '',					# ENCODE
			     # (
			     {					# ENCODE
				 'msg_type'  => 'NOTIFY',
				 # Viae
				 'msg_path'  => 'SubscribePath',	# 
				 'emu_node'  => 'P-CSCFa1',     	# 
				 'term_node' => 'S-CSCFa1',	   # 
				 'with_dlg'  => 1,		  # 
				 'protected' => CtEnableIpsec(),		  # IPSec
			     });
	};

	# 
	CtSvDlgUpdate('dlg1', $SndMsg_NOTIFY);
	
	# 
	CtSvRegUpdate('reg0');

	# 
	return 'NEXT';

    };
    # NOTIFY
    $tbl = CtScAddImmediateAct($node, $func);

    ###########################################################
    # 200(NOTIFY)
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	# 
	CtRlJudgeSeq($actSts, 'Receive 200.', 'Can\'t receive 200');

	# 200
	CtRlJudgeSyntax('SS.Response.200_NOTIFY',
			'',                         # 
			'',                         # 
			'dlg1',                     # 
			'',                         # 
			{                           # SYNTAX
			    'pre_req' => $SndMsg_NOTIFY
			});
	
	# 
	CtSvDlgUpdate('dlg1', $rcvPkt);

	# NOTIFY
	CtCnClose($conn);

	return 'NEXT';
	
    };
    # 200(NOTIFY)
    $tbl = CtScAddRcvResAct($node, $func, '200', 'NOTIFY');


    # Wait & Print
    WaitUntilKeyPress2('Press Enter Key and send OPTIONS',$node);


    ###########################################################
    # OPTIONS 
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	# 
	CtRlJudgeSeq($actSts, 'Receive OPTIONS.', 'Can\'t receive OPTIONS.');

	if($my_time_flg == 0){
	    $my_time = time();  # for 4sec check
	    $my_time_flg = 1;
	}

#		#---------------------------------------------------------------
#		# 
#		#===============================================================
#		CtSvCreateDlgFromRequest('dlg0', $rcvPkt, 'UEa2', $node); #UEa2 is the End point
#		CtSvCreateDlg('dlg0',
#		{
#			'LocalSeqNum'	=> CtFlv('HD,#CSeq,cseqnum', $rcvPkt),
#			'RemoteURI'	=> {
#			AoR		=> CtFlv('HD,#From,addr,uri,#TXT#', $rcvPkt),
#			DisplayName	=> CtFlv('HD,#From,addr,display', $rcvPkt)
#			},
#			'LocalURI'	=> {
#			AoR		=> CtFlv('HD,#To,addr,uri,#TXT#', $rcvPkt),
#			Contact		=> CtTbl('UC,ContactURI', 'UEa2'),
#			DisplayName	=> CtFlv('HD,#To,addr,display', $rcvPkt)
#			},
#		},
#                $node);

	# OPTIONS
	CtRlJudgeSyntax('SS.Request.OPTIONS',		# SYNTAX rule ID
			'',				# add rule
			'',				# del rule
			'',				# dialog name
			$rcvPkt,			# target message
			{				# parameter to use in SYNTAX 
			    'pre_req'  => '', #$rcvPkt,
			    'branches' => \@branches
			});
	

	# save branch parameters of all message for S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));


	#-----------------------------
	# 100(OPTIONS)
	#=============================
	{
	    my (@addRules, @delRules);
	    
	    ($result, $SndMsg_100) = 
		CtIoSendMsg( $conn, 		# connection 
			     'ES.Response.100-INVITE',	# ENCODE rule ID
			     '',	# add rule
			     '',	# del rule
			     '',     	# dlg reference to use dlg in ENCODE rule (used by CtRlCxDlg )
			     $rcvPkt,	# msg reference to use message in ENCODE rule (used by CtRlCxPkt)
			     {
				 'status_code'=> '100',
			     }		# parameter to use in ENCODE rule (used by CtRlCxUsr)
			     # caution: don't need message path name for via, because copy from reference request 
		);
	}

	if ( (($my_time+4) > time())){
	    # printf("mytime=%d time=%d\r\n",$my_time+4, time());  
	    return 'CONTINUE';
	}else{
	    $my_time_flg = 0;  # the flg for 4sec check  

	    #------------------------------
	    # 200(OPTIONS) 
	    #==============================
	    {
		my (@addRules, @delRules);

		#########################
		# Create SDP information
		#########################

		# SDP
		{
		    my ($sdp_ver) = time() + 2208988800;
		    my ($address, $rtp_port);
		    my ($count_a, $sdp_fqdn, @tmp);

		    $rtp_port = CtTbUsr('UEa2', 'rtp-port');
		    $address = CtGetHostFromSecContactURI('UEa2');

		    CtSvSDPCreate('sdp0',
				  {
				      'session-inf' => {
					  'session-id'   => $sdp_ver,
					  'username'     => 'UEa2',
					  'version'      => $sdp_ver,
					  'address-type' => 'IP6',
					  'host'         => $host,
					  'address' => $address,
				      },
				      'media-inf' => [
					  {
					      'media' => 'audio',
					      'port'  => $rtp_port,
					      'fmt-list' => {
						  'fmt' => 0,
						  'rtpmap' => 'rtpmap:0 PCMU/8000'
					      },
						      'bandwidth' => 'AS:75',
					  },
					  ],
				  }, $node);
		    
		    

		    # media-inf
		    # 
		    {
			my ($sdp);
			$sdp = CtSvSDPGet('sdp0', CtNDFromName('P-CSCF1'));
			if('ARRAY' ne ref($sdp->{'media-inf'})) {
			    $sdp->{'media-inf'} = [$sdp->{'media-inf'}];
			}
			foreach(@{$sdp->{'media-inf'}}) {
#                                   $_->{'connection-address'} = CtTbUsr('UE2', 'address');
			    $_->{'connection-address'} = $address;
			}
			CtSvSDPSet('sdp0', $sdp, CtNDFromName('P-CSCF1'));
		    }
		}


		($result, $SndMsg_200_OPTIONS) = 
		    CtIoSendMsg( $conn, 		# connection 
				 'ES.Response.200-OPTIONS',	# ENCODE rule ID
				 \@addRules,	# add rule
				 \@delRules,	# del rule
				 '', 	# dlg reference to use dlg in ENCODE rule (used by CtRlCxDlg )
				 $rcvPkt,	# msg reference to use message in ENCODE rule (used by CtRlCxPkt)
				 {
				     'sdp_id'    => 'sdp0',
				     'msg_path'  => 'InvitePath',
				     'emu_node'  => 'P-CSCFa1',
				     'term_node' => 'UEa2',
				     # 'with_dlg'  => 0,
				     'protected' => CtEnableIpsec(),
				     'status_code' => '200' 
				 }		# parameter to use in ENCODE rule (used by CtRlCxUsr)
				 # caution: don't need message path name for via, because copy from reference request 
		    );
	    }

	    CtCnClose($conn);

	    # go to Next State
	    return 'NEXT';
	} # "if-else" statement end 
	
    };
    # regist the function for receiving OPTIONS
    $tbl = CtScAddRcvReqAct($node, $func, 'OPTIONS');
    


    my @conn_stat_g;

    # Wait & Print
    WaitUntilKeyPress2('Press Enter Key and send INVITE',$node);

    ###########################################################
    # INVITE 
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;
	@conn_stat_g = @_;

	# 
	CtRlJudgeSeq($actSts, 'Receive INVITE.', 'Can\'t receive INVITE.');

	CtSvCreateDlgFromReq('dlg2', $rcvPkt, 'UEa2', $node); #UEa2 is the End point
	
	# INVITE
	CtRlJudgeSyntax('SS.Request.INVITE',		# SYNTAX rule ID
			'',				# add rule
			'',				# del rule
			'dlg2',				# dialog name
			$rcvPkt,			# target message
			{				# parameter to use in SYNTAX 
			    'pre_req'  => '', #$rcvPkt,
			    'branches' => \@branches
			});
	
	# renew dialog state information
#		CtSvDlgUpdate('dlg2', $rcvPkt);

	# save branch parameters of all message for S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));

	#-----------------------------
	# send 100 Trying
	#=============================
	{
	    my (@addRules, @delRules);

	    ($result, $SndMsg_100_INVITE) = 
		CtIoSendMsg( $conn, 		# connection 
			     'ES.Response.100-INVITE',	# ENCODE rule ID
			     '',	# add rule
			     '',	# del rule
			     'dlg2', 	# dlg reference to use dlg in ENCODE rule (used by CtRlCxDlg )
			     $rcvPkt,	# msg reference to use message in ENCODE rule (used by CtRlCxPkt)
			     {
				 'status_code'=> '100',
			     }		# parameter to use in ENCODE rule (used by CtRlCxUsr)
			     # caution: don't need message path name for via, because copy from reference request 
		);
	}
	# renew dialog information
	CtSvDlgUpdate('dlg2', $SndMsg_100_INVITE);

	# go to Next State
	return 'NEXT';
    };
    # regist the function for receiving INVITE
    $tbl = CtScAddRcvReqAct($node, $func, 'INVITE');




    ##########################################################
    # INVITE 
    # "Check no INVITE in the "Proceeding" state
    ##########################################################
    $func = sub { 
	#    CtRlRegRuleSet( {'TY'=> 'SYNTAX', 
	#		     'ID'=> 'S.INVITE_in_theProceeding_state',  
	#		     'CA'=> 'Message', 
	#		     'ET'=> 'error',
	#		     'OK'=> \\'No INVITE receives in the Proceeding state.',
	#		     'NG'=> \\'Receive INVITE in the Proceeding state.',
	#		 }, 
	#		    'SIP', 'Message');

	my ($actSts, $rcvPkt, $conn, $usrInf) =@_;
	CtLgJudgeMsg('S.RFC3261-17.1-17',CtIsUnReceived($actSts),$rcvPkt);
	
	#
	CtRlJudgeSeq(CtIsUnReceived($actSts), 'No INVITE receives in the Proceeding state.', 
		     'Receive INVITE in the Proceeding state.');
	
	#
	return 'NEXT';
    };
    # 
    $tbl = CtScAddRcvReqAct($node, $func, 'INVITE', '', '', 7); #7sec
    


    
    #----------------------------------------------------------
    # send 180 Ringing
    #==========================================================
    $func =	sub{
	my ($actSts, $rcvPkt, $conn, $usrInf) = @conn_stat_g;
	my (@addRules, @delRules);
	
	($result, $SndMsg_180_INVITE) = 
	    CtIoSendMsg( $conn, 		             # connection 
			 'ES.Response.180-INVITE',    # ENCODE rule ID
			 \@addRules,	             # add rule
			 \@delRules,                  # del rule
			 'dlg2', 	# dlg reference to use dlg in ENCODE rule (used by CtRlCxDlg )
			 $rcvPkt,	# msg reference to use message in ENCODE rule (used by CtRlCxPkt)
			 {
			     'msg_path'  => 'InvitePath',
			     'emu_node'  => 'P-CSCFa1',
			     'term_node' => 'UEa2',
			     'with_dlg'  => 0,
			     'protected' => CtEnableIpsec(), 
			     'status_code'=> '180',
			 }		# parameter to use in ENCODE rule (used by CtRlCxUsr)
			 # caution: don't need message path name for via, because copy from reference request 
	    );

	# renew dialog information
	CtSvDlgUpdate('dlg2', $SndMsg_180_INVITE);
	
	
	#---------------------------------------------------------
	# send 200 OK
	#=========================================================
	{
	    my (@addRules, @delRules);

	    #########################
	    # Create SDP information
	    #########################
	    
	    # SDP
	    {
		my ($sdp_ver) = time() + 2208988800;
		my ($address, $rtp_port);
		my ($count_a, $sdp_fqdn, @tmp);

		$rtp_port = CtTbUsr('UEa2', 'rtp-port');
		$address = CtGetHostFromSecContactURI('UEa2');

		CtSvSDPCreate('sdp0',
			      {
				  'session-inf' => {
				      'session-id'   => $sdp_ver,
				      'username'     => 'UEa2',
				      'version'      => $sdp_ver,
				      'address-type' => 'IP6',
				      'host'         => $host,
				      'address' => $address,
				  },
				  'media-inf' => [
				      {
					  'media' => 'audio',
					  'port'  => $rtp_port,
					  'fmt-list' => {
					      'fmt' => 0,
					      'rtpmap' => 'rtpmap:0 PCMU/8000'
					  },
						  'bandwidth' => 'AS:75',
				      },
				      ],
			      }, $node);

		# media-inf
		# 
		{
		    my ($sdp);
		    $sdp = CtSvSDPGet('sdp0', CtNDFromName('P-CSCF1'));
		    if('ARRAY' ne ref($sdp->{'media-inf'})) {
			$sdp->{'media-inf'} = [$sdp->{'media-inf'}];
		    }
		    foreach(@{$sdp->{'media-inf'}}) {
#                           $_->{'connection-address'} = CtTbUsr('UE2', 'address');
			$_->{'connection-address'} = $address;
		    }
		    CtSvSDPSet('sdp0', $sdp, CtNDFromName('P-CSCF1'));
		}
	    }


	    ($result, $SndMsg_200_INVITE) = 
		CtIoSendMsg( $conn, 		# connection 
			     'ES.Response.200-INVITE',	# ENCODE rule ID
			     \@addRules,	# add rule
			     \@delRules,	# del rule
			     'dlg2', 	# dlg reference to use dlg in ENCODE rule (used by CtRlCxDlg )
			     $rcvPkt,	# msg reference to use message in ENCODE rule (used by CtRlCxPkt)
			     {
				 'sdp_id'    => 'sdp0',
				 'msg_path'  => 'InvitePath',
				 'emu_node'  => 'P-CSCFa1',
				 'term_node' => 'UEa2',
				 'with_dlg'  => 1,
				 'protected' => CtEnableIpsec(), 
				 'status_code'=> '200',
			     }		# parameter to use in ENCODE rule (used by CtRlCxUsr)
			     # caution: don't need message path name for via, because copy from reference request 
		);
	}

	# renew dialog information
	CtSvDlgUpdate('dlg2', $SndMsg_200_INVITE);

	# go to Next State
	return 'NEXT';
    };
    $tbl = CtScAddImmediateAct($node, $func);		


    ####################################################
    # recv ACK(INVITE)
    ####################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	# display the message for checking receive Message
	CtRlJudgeSeq($actSts, 'Receive ACK.', 'Can\'t receive ACK.');


	CtRlJudgeSyntax('SS.Request.ACK', 
			'', 
			'', 
			'dlg2', 
			$rcvPkt, 
			{'pre_req' => $SndMsg_200_INVITE, 
			 'branches' => \@branches  # RFC3261-8.1-22
			});
	
	# Update the dialog
	CtSvDlgUpdate('dlg2', $rcvPkt);
	

	# save branch parameters of all message for S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));

	CtCnClose($conn);

	return 'NEXT';

    };
    # regist the function for receiving ACK
    $tbl = CtScAddRcvReqAct($node, $func, 'ACK');


    # Wait & Print
    WaitUntilKeyPress2('Press Enter Key and send BYE',$node);


    ###########################################################
    # BYE 
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn_bye, $usrInf) = @_;

	# 
	CtRlJudgeSeq($actSts, 'Receive BYE.', 'Can\'t receive BYE.');


	if($my_time_flg == 0){
	    $my_time = time();  # for 4sec check
	    $my_time_flg = 1;
	}

	# BYE
	CtRlJudgeSyntax('SS.Request.BYE',            # SYNTAX rule ID
			'',                             # add rule
			'',                             # del rule
			'dlg2',                         # dialog name
			$rcvPkt,                        # target message
			{                               # parameter to use in SYNTAX
			    'pre_req'  => $rcvINVITE,
			    'branches' => \@branches
			});

	# 
	# renew dialog state information
	# save branch parameters of all message for S.RFC3261-8-22_Via


	#-----------------------------
	# 100(BYE)
	#=============================
	{
	    my (@addRules, @delRules);
	    
	    ($result, $SndMsg_100) = 
		CtIoSendMsg( $conn_bye, 		# connection 
			     'ES.Response.100-INVITE',	# ENCODE rule ID
			     '',	# add rule
			     '',	# del rule
			     'dlg2',     	# dlg reference to use dlg in ENCODE rule (used by CtRlCxDlg )
			     $rcvPkt,	# msg reference to use message in ENCODE rule (used by CtRlCxPkt)
			     {
				 'status_code'=> '100',
			     }		# parameter to use in ENCODE rule (used by CtRlCxUsr)
			     # caution: don't need message path name for via, because copy from reference request 
		);
	}

	if ( (($my_time+4) > time())){
	    # printf("mytime=%d time=%d\r\n",$my_time+4, time());  
	    return 'CONTINUE';
	}else{
	    $my_time_flg = 0;  # the flg for 4sec check  

	    # renew dialog state information
	    CtSvDlgUpdate('dlg2', $rcvPkt);
	    
	    # save branch parameters of all message for S.RFC3261-8-22_Via
	    push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));


	    #-----------------------------
	    # send 200 OK
	    #=============================
	    {
		my (@addRules, @delRules);
		
		($result, $SndMsg_200_BYE) =
		    CtIoSendMsg( $conn_bye,                 # connection
				 'ES.Response.200-BYE',     # ENCODE rule ID
				 \@addRules,        # add rule
				 \@delRules,        # del rule
				 'dlg2',    # dlg reference to use dlg in ENCODE rule (used by CtRlCxDlg )
				 $rcvPkt,   # msg reference to use message in ENCODE rule (used by CtRlCxPkt)
				 {
				     # 'sdp_id'    => 'sdp0',
				     'msg_path'  => 'AckPath',
				     'emu_node'  => 'P-CSCFa1',
				     'term_node' => 'UEa2',
				     'with_dlg'  => 1,
				     'protected' => CtEnableIpsec(),
				     'status_code'=> '200',
				 }          # parameter to use in ENCODE rule (used by CtRlCxUsr)
				 # caution: don't need message path name for via, because copy from reference request
		    );
	    }
	    # renew dialog information
	    CtSvDlgUpdate('dlg2', $SndMsg_200_BYE);

	    CtCnClose($conn_bye);

	    # State END
	    return 'END';
	} # "if-else" statement end 
    };
    # regist the function for receiving INVITE
    $tbl = CtScAddRcvReqAct($node, $func, 'BYE');


    # 
    CtNDDefEnd($node);

}


#---------------
# 
#---------------
IMS_PCSCF();

#--------------------------
# 
#--------------------------
CtScRunScenario();

#--------------------------------
# 
#--------------------------------
CtScFin();

