#!/usr/bin/perl
# Copyright(C) IPv6 Promotion Council (2004-2010). All Rights Reserved.
# 
# This documentation is produced by SIP SWG members of Certification WG in 
# IPv6 Promotion Council.
# The SWG members currently include NIPPON TELEGRAPH AND TELEPHONE CORPORATION (NTT), 
# Yokogawa Electric Corporation and NTT Advanced Technology Corporation (NTT-AT).
# 
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.

BEGIN { 
    sub BSDversion {
	my($result);local(*STATUS);
	eval {unless( open(STATUS,  'uname -s -r |') ){return} $result = <STATUS>;close(STATUS)};
	$result =~ s/[\r\n]//;
	return $result;
    };
    $V6evalTool::TestVersion = '$Name: ' . 'ct-ims-ipv6-ue-3_0_0' .' ['. BSDversion(). ']  $';
}


#use strict;

use ImsScenario;

#----------------------------
# 
#----------------------------
CtScIMSScenario(
		[	# Node Information
			{'node' => 'UEa1',     'nxtNode' => ['P-CSCFa1','DHCP'],     'logPos' => 1,'regFlg' => 1},
			{'node' => 'P-CSCFa1', 'nxtNode' => ['UEa1','I-CSCFa1'],     'logPos' => 2},
			{'node' => 'S-CSCFa1', 'nxtNode' => ['P-CSCFa1','I-CSCFa1'], 'logPos' => 3,'regFlg' => 1},
			{'node' => 'I-CSCFa1', 'nxtNode' => ['S-CSCFa1','S-CSCFa2'], 'logPos' => 4,'regFlg' => 1},
			{'node' => 'S-CSCFa2', 'nxtNode' => ['I-CSCFa1','P-CSCFa2'], 'logPos' => 5,'regFlg' => 1},
			{'node' => 'P-CSCFa2', 'nxtNode' => ['S-CSCFa2','UEa2'],     'logPos' => 6,'regFlg' => 1},
			{'node' => 'UEa2',     'nxtNode' => ['P-CSCFa2'],            'logPos' => 7,'regFlg' => 1},
			{'node' => 'DHCP',     'nxtNode' => ['UEa1'],                'logPos' => 8,'regFlg' => 1},
			], 
		['UE-SYNTAX-COMMON-RULES'],
		'UEa1', '', 'clear', 'sigcomp-enable'
		);


#----------------
# 
#----------------
# 
# $SIGCOMPCompartmentID = "1234:5678";
# $SIGCOMPLocalUuid = CtCreateUUID("www.ims.p-cscf");
  $Via_SCID = '';

# Via 
sub CheckSigcompConn {
    my($rcvPkt,$conn,$node)=@_;
    my($sigcomp,$viaParam,$port);
    $viaParam=CtFlGet('INET,#SIP,HD,#Via#0,records,#ViaParm#0,params,list,#ViaExtension,extension',$rcvPkt,'T');
    if($viaParam){
	$sigcomp = grep{$_ =~ /sigcomp/}(@$viaParam);
	if( $sigcomp && !(CtCnGet($conn)->{'sigcomp'})){
	    if(CtCnGet($conn)->{'local-port'} eq CtTbCfg('UEa1','sip-port') || CtCnGet($conn)->{'peer-port'} eq CtTbCfg('UEa1','sip-port')){
		$port = CtTbCfg('UEa1','sip-port');
	    }
	    return CtCnCreate($node,'','',$port,'','','',$SIGCOMPCompartmentID);
	}
    }
    return $conn;
}

#-------------------
# P-CSCFa1 
#-------------------
sub IMS_PCSCF {
    my ($node, $func, $tbl, $result,@branches,@callids,$securityclient);
    my ($SndMsg_401_REGISTER, $SndMsg_200_REGISTER_AUTH, $SndMsg_200_SUBSCRIBE, $SndMsg_NOTIFY);
    my ($SndMsg_100_INVITE, $SndMsg_180_INVITE, $SndMsg_200_INVITE, $SndMsg_BYE);

    # 
    $node = CtNDDef('P-CSCFa1', '', ['UEa1'], CtCnRecvAny());

    # SIGCOMP SW 
    if(CtEnableSigcomp()){
	$SIGCOMPCompartmentID = "1234:5678";
	$SIGCOMPLocalUuid = CtCreateUUID("www.ims.p-cscf");
    }
    else{
	MsgPrint('WAR',"This scenario require sigcomp enable\n");
	eval("use Data::UUID");
    }

    ######################
    # 
    ######################
    CtAddMessagePath('SubscribePath', ['UEa1', 'P-CSCFa1', 'S-CSCFa1']);
    CtAddMessagePath('InvitePath', ['UEa1', 'P-CSCFa1', 'S-CSCFa1', 'I-CSCFa2', 'S-CSCFa2', 'P-CSCFa2', 'UEa2']);

    # Registration
    # 
    CtSvRegCreate('reg0', 'S-CSCFa1', $node);
    my ($reg_name) = 'reg0'; 

    WaitUntilKeyPress2('Press Enter Key and send REGISTER',$node);

    ###########################################################
    # 1st REGISTER
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	# 
	CtRlJudgeSeq($actSts, 'Receive REGISTER.', 'Can\'t receive REGISTER.');

	if( CtIsSigcom($rcvPkt) ){
	    CtAcceptCompartment($rcvPkt,$SIGCOMPCompartmentID,$conn,'noAccept');
	}

	# 
	CtSvCreateDlgFromReq('dlg0', $rcvPkt, 'S-CSCFa1', $node);	# 
	
	# IPSec 
	if (CtAuthAlgAgreement($node,$rcvPkt)) {
	    MsgPrint(WAR,"Auth algorithm invalid\n");
	    return 'END';
	}

	# REGISTER
	CtRlJudgeSyntax('SS.Request.REGISTER',	       	# SYNTAX
			'',			# 
			'',				# 
			'dlg0',			      	# 
			$rcvPkt,		      	# 
			{				# SYNTAX
			    'branches' => \@branches,
			    'callids' => \@callids,
			});

	# S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));

	# S.RFC3261-10.2-6 CallID
	push (@callids, CtFlv('HD,#Call-ID,call-id', $rcvPkt));

	# 
	$reg_ini=$rcvPkt;

	# UUID 
	$SIGCOMPRemoteUuid = CtFlv(q{HD,#Contact,c-params,addr,uri,params,list,#OtherParam,tag`$V eq 'sigcomp-id'`,other}, $rcvPkt);
        $SIGCOMPRemoteUuid =~ s/urn:uuid:(.+)/$1/;

	# Via 
	$conn = CheckSigcompConn($rcvPkt,$conn,$node);

	#-----------------------------
	# 401(REGISTER)
	#-----------------------------
	($result, $SndMsg_401_REGISTER) = 
	    CtIoSendMsg( $conn, 
			 'ES.Response.401-REGISTER',    	# ENCODE
			 '',				# 
			 '',			       	# 
			 'dlg0',				# ENCODE
			 $rcvPkt,				# ENCODE
			 {'status_code' => '401'}		# ENCODE
			 # 
	    );

	# 
	CtSvDlgUpdate('dlg0', $SndMsg_401_REGISTER);

	# 
	$reg_nego = $SndMsg_401_REGISTER;
	
	# REGISTER
	CtCnClose($conn);

	# 
	IMSSetkeySetup(CtTbPrm('IMPI'));

	# For MAC address :SvIms.pm
	IMSSetupTargetAD('UEa1',$rcvPkt);

	# 
	return 'NEXT';
    };
    # REGISTER
    $tbl = CtScAddRcvReqAct($node, $func, 'REGISTER');

    ###########################################################
    # 2nd REGISTER
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;
	my ($regflag) = 1;

	# 
	CtRlJudgeSeq($actSts, 'Receive REGISTER.', 'Can\'t receive REGISTER.');
	
	# SIGCOMP
	if( CtIsSigcom($rcvPkt) ){
	    CtAcceptCompartment($rcvPkt,$SIGCOMPCompartmentID,$conn);
	}

	# save the sigcomp id 
	local($id);
	CtFlGet('INET,#SIP,HD,#Via#0,records,#ViaParm#0,params,list,#ViaExtension,extension`$V=~/sigcomp-id="(.+)"/i ? $id=$1:undef`', $rcvPkt);

	$Via_SCID = $id;

	#
	$pre_req = $reg_ini;

	# REGISTER
	CtRlJudgeSyntax('SS.Request.Auth_REGISTER',        # 
			SvRl226_257_RuleSet($regflag),                  # 
			'',			# 
			'dlg0',		# 
			$rcvPkt,		# 
			{			# SYNTAX
			    'branches' => \@branches,
			    'callids' => \@callids,
			    'reg_ini' => $reg_ini,
			    'reg_nego' => $reg_nego,
			    'regflag' => $regflag,
			    'pre_req' => $pre_req
			});
	
	# 
	CtSvDlgUpdate('dlg0', $rcvPkt);
	
	# 
	# 
	CtSvRegUpdate('reg0', $rcvPkt, 'S-CSCFa1');
	
	# S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));
	
	# S.RFC3261-10.2-6 CallID
	push (@callids, CtFlv('HD,#Call-ID,call-id', $rcvPkt));
	
	# Via 
	$conn = CheckSigcompConn($rcvPkt,$conn,$node);

	#-----------------------------
	# 200(REGISTER)
	#-----------------------------
	($result, $SndMsg_200_REGISTER_AUTH) = 
	    CtIoSendMsg( $conn,
			 'ES.Response.200-REGISTER',
			 ['E.P:U-Contact-11-200REG_SigComp'],
			 ['E.P:U-Contact-4-200REGISTER'],
			 'dlg0', 	      	# ENCODE
			 $rcvPkt, 	      	# ENCODE
			 {
			  'status_code' => '200',
			  'reg_name' => $reg_name,			 
			  'protected' => CtEnableIpsec(),	# IPSec
			 }	# ENCODE
			 
			 # 
	    );

	# 
	CtSvDlgUpdate('dlg0', $SndMsg_200_REGISTER_AUTH);
	
	# REGISTER
	CtCnClose($conn);
	
	return 'NEXT';
    };

    # REGISTER
    $tbl = CtScAddRcvReqAct($node, $func, 'REGISTER');

    ###########################################################
    # SUBSCRIBE
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	# 
	CtRlJudgeSeq($actSts, 'Receive SUBSCRIBE.', 'Can\'t receive SUBSCRIBE.');

	# SIGCOMP
	if( CtIsSigcom($rcvPkt) ){
	    CtAcceptCompartment($rcvPkt,$SIGCOMPCompartmentID,$conn);
	}

	# save the sigcomp id 
#	local($id);
#	CtFlGet('INET,#SIP,HD,#Via#0,records,#ViaParm#0,params,list,#ViaExtension,extension`$V=~/sigcomp-id="(.+)"/i ? $id=$1:undef`', $rcvPkt);
#	PrintVal($id);	

#	$Via_SCID = $id;

	# 
	CtSvCreateDlgFromReq('dlg1', $rcvPkt, 'S-CSCFa1', $node);	# Subscribe

	# SUBSCRIBE
	CtRlJudgeSyntax('SS.Request.SUBSCRIBE', 
				['S.RFC3486-4-4',
				 'S.RFC3486-4-6',
				 'S.RFC3486-4-8',
				 'S.RFC5049-9.1-2',
				 'S.RFC5049-9.1-7',
				 'S.RFC5049-9.1-8',
				 'S.RFC5049-9.1-9',
				 'S.RFC5049-9.1-10',
				 'S.TS24229-5.1-396',
				 'S.TS24229-8.1-11',
				],
				'',
				'dlg1',
				$rcvPkt,
				{
				 'reg_dlg' => 'dlg0', 
				 'branches' => \@branches,
				 'scid' => $Via_SCID,
				}
			);

	# 
	# 
	CtSvDlgUpdate('dlg1', $rcvPkt, $node, 'reg0');

	# S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));

	#------------------------------
	# 200(SUBSCRIBE)
	#------------------------------
	$conn = CtCnCreate($node,'','','','','','',$SIGCOMPCompartmentID);
	
	($result, $SndMsg_200_SUBSCRIBE) = 
	    CtIoSendMsg( $conn,
			 'ES.Response.200-SUBSCRIBE',
			 ['E.P:U-RecordRoute-4-Res_SigComp'],
			 ['E.P:U-RecordRoute-1-Res_BS'],
			 'dlg1', 			      # ENCODE
			 $rcvPkt,			      # ENCODE
			 {				      # ENCODE
			     # 
			     ## RecordRoute
			     'msg_path'  => 'SubscribePath',	# 
			     'emu_node'  => 'P-CSCFa1',	# 
			     'term_node' => 'S-CSCFa1',	# 
			     'protected' => CtEnableIpsec(),	# IPSec
			     'status_code' => '200',
			 }
	    );

	# 
	CtSvDlgUpdate('dlg1', $SndMsg_200_SUBSCRIBE);

	# SUBSCRIBE
	CtCnClose($conn);

	# 
	return 'NEXT';
    };
    # SUBSCRIBE
    $tbl = CtScAddRcvReqAct($node, $func, 'SUBSCRIBE');


    ###########################################################
    # NOTIFY
    ###########################################################
    $func = sub {
	my ($conn); 

	$conn = CtCnCreate($node,'','','','','','',$SIGCOMPCompartmentID);
        CtSvDlgRegInfoSet('dlg1','ContactURI',
                          'sip:'.CtFlv('HD,#Contact,c-params,#ContactParam,addr,uri,userinfo',$reg_ini).
                          '@'.CtFlv('HD,#Contact,c-params,#ContactParam,addr,uri,host',$reg_ini));

	#----------------------
	# NOTIFY
	#----------------------
	($result, $SndMsg_NOTIFY) = 
	    CtIoSendMsg( $conn,
			 'ES.Request.NOTIFY',		    # ENCODE
			 ['E.P:U-Via-7-ReqInDLG_SigComp'], 	    # 
			 ['E.P:U-Via-2-ReqINtheDLG_BS'],	    # 
			 'dlg1',			    # ENCODE
			 '',				    # ENCODE
			 # (
			 {				    # ENCODE
			     'msg_type'  => 'NOTIFY',
			     # Via
			     'msg_path'  => 'SubscribePath',	# 
			     'emu_node'  => 'P-CSCFa1',      # 
			     'term_node' => 'S-CSCFa1',      # 
			     'with_dlg'  => 1,		# 
			     'protected' => CtEnableIpsec(),# IPSec
			 }
	    );

	# 
	CtSvDlgUpdate('dlg1', $SndMsg_NOTIFY);

	# 
	CtSvRegUpdate('reg0');

	# 
	return 'NEXT';
	
    };	
    # NOTIFY
    $tbl = CtScAddImmediateAct($node, $func);


    ###########################################################
    # 200(NOTIFY)
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	# 
	CtRlJudgeSeq($actSts, 'Receive 200.', 'Can\'t receive 200');

	# SIGCOMP
	if( CtIsSigcom($rcvPkt) ){
	    CtAcceptCompartment($rcvPkt,$SIGCOMPCompartmentID,$conn);
	}

	# 200
	CtRlJudgeSyntax('SS.Response.200_NOTIFY',
			['S.TS24229-5.1-396',
			 'S.TS24229-5.1-447',
			 'S.TS24229-8.1-11',
			 'S.RFC3486-5-1',
			],
			'',
			'dlg1',
			$rcvPkt,
			{'pre_req' => $SndMsg_NOTIFY});

	# 
	CtSvDlgUpdate('dlg1', $rcvPkt);

	# NOTIFY
	CtCnClose($conn);

	return 'NEXT';
    };
    # 200(NOTIFY)
    $tbl = CtScAddRcvResAct($node, $func, '200', 'NOTIFY');


    ###########################################################
    # Define 1st Receiving INVITE function
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	# display the receiving message
	CtRlJudgeSeq($actSts, 'Receive INVITE.', 'Can\'t receive INVITE.');

	# SIGCOMP
	if( CtIsSigcom($rcvPkt) ){
	    CtAcceptCompartment($rcvPkt,$SIGCOMPCompartmentID,$conn);
	}

	CtSvCreateDlgFromReq('dlg2', $rcvPkt, 'UEa2', $node); #UEa2 is the End point
	
	# Judge recv msg
	CtRlJudgeSyntax('SS.Request.INVITE',		# SYNTAX rule ID
	  		['S.RFC3486-4-4',
	  		 'S.RFC3486-4-6',
	  		 'S.RFC3486-4-8',
			 'S.RFC5049-9.1-2',
			 'S.RFC5049-9.1-7',
			 'S.RFC5049-9.1-8',
			 'S.RFC5049-9.1-9',
			 'S.RFC5049-9.1-10',
			 'S.TS24229-5.1-396',
			 'S.TS24229-8.1-11',
			],				# add rule
			'',				# del rule
			'dlg2',				# dialog name
			$rcvPkt,			# target message
			{				# parameter to use in SYNTAX 
			    'pre_req'  => $rcvPkt,
			    'branches' => \@branches,
			    'scid' => $Via_SCID,
			    });

	# save branch parameters of all message for S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));

	#-----------------------------
	# send 100 Trying
	#-----------------------------
	($result, $SndMsg_100_INVITE) = 
	    CtIoSendMsg( $conn, 		# connection 
			 'ES.Response.100-INVITE',	# ENCODE rule ID
			 '',	# add rule
			 '',	# del rule
			 'dlg2', 	# dlg reference to use dlg in ENCODE rule (used by CtRlCxDlg )
			 $rcvPkt,	# msg reference to use message in ENCODE rule (used by CtRlCxPkt)
			 {
			     'status_code' => '100',
			 }		# parameter to use in ENCODE rule (used by CtRlCxUsr)
			 # caution: don't need message path name for via, because copy from reference request 
	    );

	# renew dialog information
	CtSvDlgUpdate('dlg2', $SndMsg_100_INVITE);

	
	#----------------------------------------------------------
	# send 180 Ringing
	#----------------------------------------------------------
	($result, $SndMsg_180_INVITE) = 
	    CtIoSendMsg( $conn, 		# connection 
			 'ES.Response.180-INVITE',	# ENCODE rule ID
			 '',	# add rule
			 '',	# del rule
			 'dlg2', 	# dlg reference to use dlg in ENCODE rule (used by CtRlCxDlg )
			 $rcvPkt,	# msg reference to use message in ENCODE rule (used by CtRlCxPkt)
			 {
			     'msg_path'  => 'InvitePath',
			     'emu_node'  => 'P-CSCFa1',
			     'term_node' => 'UEa2',
			     'with_dlg'  => 0,
			     'protected' => CtEnableIpsec(), 
			     'status_code' => '180',
			 }		# parameter to use in ENCODE rule (used by CtRlCxUsr)
			 # caution: don't need message path name for via, because copy from reference request 
	    );

	# renew dialog information
	CtSvDlgUpdate('dlg2', $SndMsg_180_INVITE);

	#---------------------------------------------------------
	# send 200 OK
	#---------------------------------------------------------
	# SDP
	{
	    my ($sdp_ver) = time() + 2208988800;
	    my ($address, $rtp_port);
	    my ($count_a, $sdp_fqdn, @tmp);
	    
	    $rtp_port = CtTbUsr('UEa2', 'rtp-port');
	    $address = CtGetHostFromSecContactURI('UEa2');
	    
	    CtSvSDPCreate('sdp0',
			  {
			      'session-inf' => {
				  'session-id'   => $sdp_ver,
				  'username'     => 'UEa2',
				  'version'      => $sdp_ver,
				  'address-type' => 'IP6',
				  'host'         => $host,
				  'address' => $address,
			      },
			      'media-inf' => [
				  {
				      'media' => 'audio',
				      'port'  => $rtp_port,
				      'fmt-list' => {
					  'fmt' => 0,
					  'rtpmap' => 'rtpmap:0 PCMU/8000'
				      },
					      'bandwidth' => 'AS:75',
				  },
				  ],
			  }, $node);
	    
	    # media-inf
	    # 
	    {
		my ($sdp);
		$sdp = CtSvSDPGet('sdp0', CtNDFromName('P-CSCF1'));
		if('ARRAY' ne ref($sdp->{'media-inf'})) {
		    $sdp->{'media-inf'} = [$sdp->{'media-inf'}];
		}
		foreach(@{$sdp->{'media-inf'}}) {
		    $_->{'connection-address'} = $address;
		}
		CtSvSDPSet('sdp0', $sdp, CtNDFromName('P-CSCF1'));
	    }
	}
	

	($result, $SndMsg_200_INVITE) = 
	    CtIoSendMsg( $conn, 		# connection 
			 'ES.Response.200-INVITE',	# ENCODE rule ID
			 ['E.P:U-RecordRoute-4-Res_SigComp'],
			 ['E.P:U-RecordRoute-1-Res_BS'],
			 'dlg2', 	# dlg reference to use dlg in ENCODE rule (used by CtRlCxDlg )
			 $rcvPkt,	# msg reference to use message in ENCODE rule (used by CtRlCxPkt)
			 {
			     'sdp_id'    => 'sdp0',
			     'msg_path'  => 'InvitePath',
			     'emu_node'  => 'P-CSCFa1',
			     'term_node' => 'UEa2',
			     'with_dlg'  => 1,
			     'protected' => CtEnableIpsec(), 
			     'status_code' => '200',
			 }		# parameter to use in ENCODE rule (used by CtRlCxUsr)
			 # caution: don't need message path name for via, because copy from reference request 
	    );

	# renew dialog information
	CtSvDlgUpdate('dlg2', $SndMsg_200_INVITE);

	return 'NEXT';
    };
    $tbl = CtScAddRcvReqAct($node, $func, 'INVITE');
    

    ####################################################
    # recv ACK 
    ####################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	# display the message for checking receive Message
	CtRlJudgeSeq($actSts, 'Receive ACK.', 'Can\'t receive ACK.');

	# SIGCOMP
	if( CtIsSigcom($rcvPkt) ){
	    CtAcceptCompartment($rcvPkt,$SIGCOMPCompartmentID,$conn);
	}

	#----------------------------------------
	# Receive ACK
	#----------------------------------------
	CtRlJudgeSyntax('SS.Request.ACK', 
			['S.RFC3486-4-1',
			 'S.RFC3486-4-8',
			 'S.RFC5049-9.1-2',
			 'S.RFC5049-9.1-8',
			 'S.RFC5049-9.1-10',
			], 
			'', 
			'dlg2', 
			$rcvPkt, 
			{
			 'pre_req' => $SndMsg_200_INVITE,
			 'branches' => \@branches,
			 'scid' => $Via_SCID,
			}
	);
	
	# Update the dialog
	CtSvDlgUpdate('dlg2', $rcvPkt);
	
	# save branch parameters of all message for S.RFC3261-8-22_Via
	push (@branches, CtFlv('HD,#Via#0,records#0,params,list#0,branch', $rcvPkt));
	
	CtCnClose($conn);
	
	return 'NEXT';
    };

    # regist the function for receiving ACK
    $tbl = CtScAddRcvReqAct($node, $func, 'ACK');

    ###########################################################
    # define the function that sending BYE
    ###########################################################
    $func = sub {
	my ($remoteName, $localName, $conn); 

	# make connection forBYE 
	$conn = CtCnCreate($node,'','','','','','',$SIGCOMPCompartmentID);

	# Wait & Print
	WaitUntilKeyPress('Press Enter Key and wait to receive BYE');

	#----------------------
	# send BYE
	#----------------------
	($result, $SndMsg_BYE) = 
	    CtIoSendMsg( $conn,			# 
			 'ES.Request.BYE',	# ENCODE
			 ['E.P:U-Via-7-ReqInDLG_SigComp'],	# 
			 ['E.P:U-Via-2-ReqINtheDLG_BS'],	# 
			 'dlg2',			# ENCODE
			 '',			# ENCODE
			 # (
			 {		# ENCODE
			     # Viae
			     'msg_type'  => 'BYE',
			     'msg_path'  => 'InvitePath',	# 
			     'emu_node'  => 'P-CSCFa1',	# 
			     'term_node' => 'UEa2',	# 
			     'with_dlg'  => 1,		# 
			     'protected' => CtEnableIpsec(),	#  bIPSec
			 }
	    );

	# update the information of dialog
	CtSvDlgUpdate('dlg2', $SndMsg_BYE);

	# go to next state
	return 'NEXT';
    };	

    # regist the function for sending BYE
    $tbl = CtScAddImmediateAct($node, $func, 'BYE');

    ###########################################################
    # define the function for receiving 200(BYE)
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	# 
	CtRlJudgeSeq($actSts, 'Receive 200.', 'Can\'t receive 200');

	# SIGCOMP
	if( CtIsSigcom($rcvPkt) ){
	    CtAcceptCompartment($rcvPkt,$SIGCOMPCompartmentID,$conn);
	}

	# 200
	CtRlJudgeSyntax('SS.Response.200_BYE',
			['S.TS24229-5.1-396',
			 'S.TS24229-5.1-447',
			 'S.TS24229-8.1-11',
			 'S.RFC3486-5-1',
			],
			'',
			'dlg2',
			 '',
			{
			'pre_req' => $SndMsg_BYE
			}
		);

	# 
	CtSvDlgUpdate('dlg2', $rcvPkt);

	# finished the process recieving 200-BYE
	CtCnClose($conn);

	# P-CSCF1
	return 'NEXT';
    };
    # 200(BYE)
    $tbl = CtScAddRcvResAct($node, $func, '200', 'BYE');

    ###########################################################
    # NOTIFY-DEREGISTER 
    ###########################################################
    $func = sub {
	my ($remoteName, $localName, $conn); 

	# 
	#   
	#   
	
	$conn = CtCnCreate($node,'','','','','','',$SIGCOMPCompartmentID);

	# For contact directive => "terminated".
	# Event Directive => "rejected".

	{
	    my ($aor,$contact);
	    $aor = CtTbl('UC,UserProfile,PublicUserIdentity','UEa1');
	    if(CtEnableIpsec()){
		$contact = ('sip:'.CtTbl('UC,SecContactURI,host','UEa1').':'.CtTbl('UC,SecContactURI,port','UEa1'));
	    }else{
		$contact = ('sip:'.CtTbl('UC,SecContactURI,host','UEa1'));
	    }

	    ## 
	    ## $aor: sip:UEa1_public_1@under.test.com
	    ## $contact: sip:UEa1_public_1@node.under.test.com
	    ## REG->{reg0}->{sip:UEa1_public_1@under.test.com}->{Contact}->{sip:UEa1_public_1@node.under.test.com;comp=sigcomp;sigcomp-id=urn:uuid:2365ECEB-CE15-32A0-B17E-47026127CFC8}->{...}
	    ## CtSvRegRejectContact ('reg0', $aor, $contact, $node);
	}

	###2008.06.12  
	CtTbSet('DLG,dlg1,DialogState','Terminated');
        CtSvDlgRegInfoSet('dlg1','RegState','terminated');
        CtSvDlgRegInfoSet('dlg1','ContactState','terminated');
        CtSvDlgRegInfoSet('dlg1','Event','rejected');

	#----------------------
	# NOTIFY
	#----------------------
	{
	    ($result, $SndMsg_NOTIFY) = 
		CtIoSendMsg( $conn,
			     'ES.Request.NOTIFY',	        	    # ENCODE
			     ['E.P:U-Via-7-ReqInDLG_SigComp'], 	    # 
			     ['E.P:U-Via-2-ReqINtheDLG_BS'],	    # 
			     'dlg1',				    # ENCODE
			     '',					    # ENCODE
			     # (
			     {					    # ENCODE
				 'msg_type'  => 'NOTIFY',
				 # Viae
				 'msg_path'  => 'SubscribePath',	# 
				 'emu_node'  => 'P-CSCFa1',	# 
				 'term_node' => 'S-CSCFa1',	# 
				 'with_dlg'  => 1,	        # 
				 'protected' => CtEnableIpsec(),# IPSec
				 'DialogState' => 'terminated',
			     }
			     );
	}

	# 
	CtSvDlgUpdate('dlg1', $SndMsg_NOTIFY);

	# 
	CtSvRegUpdate('reg0');

	# 
	return 'NEXT';
	
    };	
    # NOTIFY
    $tbl = CtScAddImmediateAct($node, $func);


    ###########################################################
    # 200(NOTIFY-DEREGISTER)
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	# 
	CtRlJudgeSeq($actSts, 'Receive 200.', 'Can\'t receive 200');

	# SIGCOMP
	if( CtIsSigcom($rcvPkt) ){
	    CtAcceptCompartment($rcvPkt,$SIGCOMPCompartmentID,$conn);
	}

	# 200
	CtRlJudgeSyntax('SS.Response.200_NOTIFY',
			['S.TS24229-5.1-396',
			 'S.TS24229-5.1-447',
			 'S.TS24229-8.1-11',
			 'S.RFC3486-5-1',
			],
			'',
			'dlg1',
			'',
			{
				'pre_req' => $SndMsg_NOTIFY
			}
		);


	# 
	CtSvDlgUpdate('dlg1', $rcvPkt);

	# NOTIFY
	CtCnClose($conn);

	return 'NEXT';
    };
    # 200(NOTIFY)
    $tbl = CtScAddRcvResAct($node, $func, '200', 'NOTIFY');

    ###########################################################
    # NOTIFY
    ###########################################################
    $func = sub {
	my ($remoteName, $localName, $conn); 

	# 
	#   
	#   
	
	$conn = CtCnCreate($node,'','','','','','',$SIGCOMPCompartmentID);

	# For contact directive => "terminated".
	# Event Directive => "rejected".

	{
	    my ($aor,$contact);
	    $aor = CtTbl('UC,UserProfile,PublicUserIdentity','UEa1');
	    if(CtEnableIpsec()){
		$contact = ('sip:'.CtTbl('UC,SecContactURI,host','UEa1').':'.CtTbl('UC,SecContactURI,port','UEa1'));
	    }else{
		$contact = ('sip:'.CtTbl('UC,SecContactURI,host','UEa1'));
	    }
	}

	###2008.06.12  
	CtTbSet('DLG,dlg1,DialogState','Terminated');

	#----------------------
	# NOTIFY
	#----------------------
	{
	    ($result, $SndMsg_NOTIFY) = 
		CtIoSendMsg( $conn,
			     'ES.Request.NOTIFY',	        	    # ENCODE
			     ['E.P:U-Via-7-ReqInDLG_SigComp'], 	    # 
			     ['E.P:U-Via-2-ReqINtheDLG_BS'],	    # 
			     'dlg1',				    # ENCODE
			     '',					    # ENCODE
			     # (
			     {					    # ENCODE
				 'msg_type'  => 'NOTIFY',
				 # Viae
				 'msg_path'  => 'SubscribePath',	# 
				 'emu_node'  => 'P-CSCFa1',	# 
				 'term_node' => 'S-CSCFa1',	# 
				 'with_dlg'  => 1,	        # 
				 'protected' => CtEnableIpsec(),# IPSec
				 'DialogState' => 'terminated',
			     }
			     );
	}
	# 
	CtSvDlgUpdate('dlg1', $SndMsg_NOTIFY);

	# 
	CtSvRegUpdate('reg0');

	# 
	return 'NEXT';
	
    };	
    # NOTIFY
    $tbl = CtScAddImmediateAct($node, $func);


    ###########################################################
    # 200(NOTIFY-DEREGISTER)
    ###########################################################
    $func = sub {
	my ($actSts, $rcvPkt, $conn, $usrInf) = @_;

	CtLgJudgeMsg('S.TS24229-8.1-6', CtIsUnReceived($actSts), $rcvPkt);

	CtRlJudgeSeq(CtIsUnReceived($actSts), 'Receives no responses for NOTIFY.', 'Receives a response for NOTIFY.');

	# NOTIFY
	CtCnClose($conn);

	return 'END';
    };
    # 200(NOTIFY)
    $tbl = CtScAddRcvResAct($node, $func, '200', 'NOTIFY');

    # 
    CtNDDefEnd($node);
}


#---------------
# 
#---------------
IMS_PCSCF();

#--------------------------
# 
#--------------------------
CtScRunScenario();

#--------------------------------
# 
#--------------------------------
CtScFin();


