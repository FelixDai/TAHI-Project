//
// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
// Yokogawa Electric Corporation.
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $Name: V6PC_P2_IPsec_1_10_0 $
//
// $TAHI: ct/ipsec.p2/p2_HTR_TCP_common.def,v 1.10 2009/06/23 05:41:35 akisada Exp $
//

#include "./p2_HTR_common.def"

//======================================================================
//
// TCP Option 
//

Opt_TCP_MaximumSegmentSize opt_syn {
	Kind       = 2;
	Length     = 4;
	MaxSegSize = 1440;
}

//======================================================================
//
// Syn Request from Host1 (Net2) via SGW1 to NUT (Net0) on Net0
//

FEM_tcp6(
	syn_request_from_host1_net2_to_host0_net0,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_HOST1_NET2_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
	},
	{
		_SPORT(10000);
		_DPORT(DESTINATION_PORT);
		SequenceNumber       = SEQ;
		SYNFlag              = 1;
//		Window               = 16384;
//		option               = opt_syn;
	},
	{
		header = _HDR_TCP_NAME(syn_request_from_host1_net2_to_host0_net0);
		payload = payload_syn;
	}
)

//======================================================================
//
// Ack Request from Host1 (Net2) via SGW1 to NUT (Net0) on Net0
//

FEM_tcp6(
	ack_request_from_host1_net2_to_host0_net0,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_HOST1_NET2_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
	},
	{
		_SPORT(10000);
		_DPORT(DESTINATION_PORT);
		SequenceNumber       = SEQ;
		AcknowledgmentNumber = ACK;
		ACKFlag              = 1;
//		Window               = 16384;
//		option               = opt_syn;
	},
	{
		header = _HDR_TCP_NAME(ack_request_from_host1_net2_to_host0_net0);
		payload = payload_syn;
	}
)

//======================================================================
//
// Ack, Push w/ Data Request from Host1 (Net2) to NUT (Net0) on Net0
//

FEM_tcp6(
	ack_data_request_from_host1_net2_to_host0_net0,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_HOST1_NET2_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
	},
	{
		_SPORT(10000);
		_DPORT(DESTINATION_PORT);
		SequenceNumber       = SEQ;
		AcknowledgmentNumber = ACK;
		ACKFlag              = 1;
		PSHFlag              = 1;
		Window               = 1024;
	},
	{
		header = _HDR_TCP_NAME(ack_data_request_from_host1_net2_to_host0_net0);
		payload = get_data11;
	}
)

//======================================================================
//
// Ack, Push w/ Data Reply from Host0 (Net0) to Host1 (Net2) on Net0
//

FEM_tcp6(
	ack_data_reply_from_host0_net0_to_host1_net2,
	hether_nut2router,
	{
		_SRC(v6(IPSEC_NUT_NET0_ADDR));
		_DST(v6(IPSEC_HOST1_NET2_ADDR));
	},
	{
		_SPORT(DESTINATION_PORT);
		_DPORT(10000);
		SequenceNumber=any;
		AcknowledgmentNumber=any;
		ACKFlag = 1;
		PSHFlag = 1;
		Window = any;
	},
	{
		header = _HDR_TCP_NAME(ack_data_reply_from_host0_net0_to_host1_net2);
		payload = any;
	}
)

//======================================================================
//
// TCP from Host1 (Net2) to NUT (Net0) on Net0
//

FEM_tcp6(
	tcp_from_host1_net2_to_host0_net0,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_HOST1_NET2_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
	},
	{
		_SPORT(10000);
		_DPORT(DESTINATION_PORT);
		SequenceNumber       = SEQ;
		AcknowledgmentNumber = ACK;
		ACKFlag              = ACKFLAG;
		PSHFlag              = PSHFLAG;
		SYNFlag              = SYNFLAG;
		FINFlag              = FINFLAG;
		Window               = WINDOW_SIZE;//56000;
	},
	{
		header = _HDR_TCP_NAME(tcp_from_host1_net2_to_host0_net0);
		payload = PAYLOAD_DATA;
	}
)

//======================================================================
//
// TCP from Host0 (Net0) to Host1 (Net2) on Net0
//

FEM_tcp6(
	tcp_from_host0_net0_to_host1_net2,
	hether_nut2router,
	{
		_SRC(v6(IPSEC_NUT_NET0_ADDR));
		_DST(v6(IPSEC_HOST1_NET2_ADDR));
	},
	{
		_SPORT(DESTINATION_PORT);
		_DPORT(10000);
		SequenceNumber       = any;
		AcknowledgmentNumber = any;
		ACKFlag              = ACKFLAG;
		PSHFlag              = PSHFLAG;
		SYNFlag              = SYNFLAG;
		FINFlag              = FINFLAG;
		Window               = any;
	},
	{
		header = _HDR_TCP_NAME(tcp_from_host0_net0_to_host1_net2);
		payload = any;
	}
)

//======================================================================
//
// Syn, Ack Reply from Host0 (Net0) to Host1 (Net2) on Net0
//

FEM_tcp6(
	synack_reply_from_host0_net0_to_host1_net2,
	hether_nut2router,
	{
		_SRC(v6(IPSEC_NUT_NET0_ADDR));
		_DST(v6(IPSEC_HOST1_NET2_ADDR));
	},
	{
		_SPORT(DESTINATION_PORT);
		_DPORT(10000);
		SequenceNumber=any;
		AcknowledgmentNumber=any;
		ACKFlag = 1;
		SYNFlag = 1;
		Window = any;
		option = opt_syn;
	},
	{
		header = _HDR_TCP_NAME(synack_reply_from_host0_net0_to_host1_net2);
		payload = payload_syn;
	}
)

//======================================================================
//
// Sync Request from Host2 (Net2) via SGW1 to NUT (Net0) on Net0
//

FEM_tcp6(
	syn_request_from_host2_net2_to_host0_net0,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_HOST2_NET2_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
	},
	{
		_SPORT(10000);
		_DPORT(DESTINATION_PORT);
		SequenceNumber       = SEQ;
		SYNFlag              = 1;
//		Window               = 16384;
//		option               = opt_syn;
	},
	{
		header = _HDR_TCP_NAME(syn_request_from_host2_net2_to_host0_net0);
		payload = payload_syn;
	}
)

//======================================================================
//
// Syn, Ack Reply from Host0 (Net0) to Host2 (Net2) on Net0
//

FEM_tcp6(
	synack_reply_from_host0_net0_to_host2_net2,
	hether_nut2router,
	{
		_SRC(v6(IPSEC_NUT_NET0_ADDR));
		_DST(v6(IPSEC_HOST2_NET2_ADDR));
	},
	{
		_SPORT(DESTINATION_PORT);
		_DPORT(10000);
		SequenceNumber=any;
		AcknowledgmentNumber=any;
		ACKFlag = 1;
		SYNFlag = 1;
		Window = any;
		option = opt_syn;
	},
	{
		header = _HDR_TCP_NAME(synack_reply_from_host0_net0_to_host2_net2);
		payload = payload_syn;
	}
)

//======================================================================
//
// TCP Syn Request from ROUTER1
//

FEM_tcp6(
	syn_request_from_router,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_ROUTER_NET0_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
//		_DST(v6merge(IPSEC_NET0_PREFIX, IPSEC_NET0_PREFIX_LEN, nutv6()));
	},
	{
		_SPORT(10000);
		_DPORT(DESTINATION_PORT);
		SequenceNumber       = SEQ;
		SYNFlag              = 1;
//		Window               = 16384;
//		option               = opt_syn;
	},
	{
		header = _HDR_TCP_NAME(syn_request_from_router);
		payload = payload_syn;
	}
)


//======================================================================
//
// TCP Syn,Ack Reply to HOST1
//

FEM_tcp6(
	synack_reply_to_router,
	hether_nut2router,
	{
		_SRC(v6(IPSEC_NUT_NET0_ADDR));
//		_SRC(v6merge(IPSEC_NET0_PREFIX, IPSEC_NET0_PREFIX_LEN, nutv6()));
		_DST(v6(IPSEC_ROUTER_NET0_ADDR));
	},
	{
		_SPORT(DESTINATION_PORT);
		_DPORT(10000);
		SequenceNumber=any;
		AcknowledgmentNumber=any;
		ACKFlag=1;
		SYNFlag=1;
		Window=any;
		option = opt_syn; 
	},
	{
		header = _HDR_TCP_NAME(synack_reply_to_router);
		payload = payload_syn;
	}
)


//======================================================================
//
// TCP Syn Request from HOST1
//

FEM_tcp6(
	syn_request_from_host1,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_HOST1_NET1_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
//		_DST(v6merge(IPSEC_NET0_PREFIX, IPSEC_NET0_PREFIX_LEN, nutv6()));
	},
	{
		_SPORT(10000);
		_DPORT(DESTINATION_PORT);
		SequenceNumber       = SEQ;
		SYNFlag              = 1;
//		Window               = 16384;
//		option               = opt_syn;
	},
	{
		header = _HDR_TCP_NAME(syn_request_from_host1);
		payload = payload_syn;
	}
)

//======================================================================
//
// TCP Ack, Push w/ Data Request from HOST1
//

FEM_tcp6(
	ack_data_request_from_host1,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_HOST1_NET1_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
//		_DST(v6merge(IPSEC_NET0_PREFIX, IPSEC_NET0_PREFIX_LEN, nutv6()));
	},
	{
		_SPORT(10000);
		_DPORT(DESTINATION_PORT);
		SequenceNumber       = SEQ;
		AcknowledgmentNumber = ACK;
		ACKFlag              = 1;
		PSHFlag              = 1;
		Window               = 1024;
	},
	{
		header = _HDR_TCP_NAME(ack_data_request_from_host1);
		payload = get_data11;
	}
)

//======================================================================
//
// TCP Syn,Ack Reply to HOST1
//

FEM_tcp6(
	synack_reply_to_host1,
	hether_nut2router,
	{
		_SRC(v6(IPSEC_NUT_NET0_ADDR));
//		_SRC(v6merge(IPSEC_NET0_PREFIX, IPSEC_NET0_PREFIX_LEN, nutv6()));
		_DST(v6(IPSEC_HOST1_NET1_ADDR));
	},
	{
		_SPORT(DESTINATION_PORT);
		_DPORT(10000);
		SequenceNumber=any;
		AcknowledgmentNumber=any;
		ACKFlag=1;
		SYNFlag=1;
		Window=any;
		option = opt_syn;
	},
	{
		header = _HDR_TCP_NAME(synack_reply_to_host1);
		payload = payload_syn;
	}
)


//======================================================================
//
// TCP Syn Request from HOST1 (Destination Port 23)
//

FEM_tcp6(
	syn_request_from_host1_23,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_HOST1_NET1_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
//		_DST(v6merge(IPSEC_NET0_PREFIX, IPSEC_NET0_PREFIX_LEN, nutv6()));
	},
	{
		_SPORT(10000);
		_DPORT(23);
		SequenceNumber       = SEQ;
		SYNFlag              = 1;
//		Window               = 16384;
//		option               = opt_syn;
	},
	{
		header = _HDR_TCP_NAME(syn_request_from_host1_23);
		payload = payload_syn;
	}
)


//======================================================================
//
// TCP Syn,Ack Reply to HOST1 (Source Rort 23)
//

FEM_tcp6(
	synack_reply_to_host1_23,
	hether_nut2router,
	{
		_SRC(v6(IPSEC_NUT_NET0_ADDR));
//		_SRC(v6merge(IPSEC_NET0_PREFIX, IPSEC_NET0_PREFIX_LEN, nutv6()));
		_DST(v6(IPSEC_HOST1_NET1_ADDR));
	},
	{
		_SPORT(23);
		_DPORT(10000);
		SequenceNumber=any;
		AcknowledgmentNumber=any;
		ACKFlag=1;
		SYNFlag=1;
		Window=any;
		option = opt_syn;
	},
	{
		header = _HDR_TCP_NAME(synack_reply_to_host1_23);
		payload = payload_syn;
	}
)


//======================================================================
//
// TCP Syn Request from HOST2
//

FEM_tcp6(
	syn_request_from_host2,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_HOST2_NET1_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
//		_DST(v6merge(IPSEC_NET0_PREFIX, IPSEC_NET0_PREFIX_LEN, nutv6()));
	},
	{
		_SPORT(10000);
		_DPORT(DESTINATION_PORT);
		SequenceNumber       = SEQ;
		SYNFlag              = 1;
//		Window               = 16384;
//		option               = opt_syn;
	},
	{
		header = _HDR_TCP_NAME(syn_request_from_host2);
		payload = payload_syn;
	}
)


//======================================================================
//
// TCP Syn,Ack Reply to HOST2
//

FEM_tcp6(
	synack_reply_to_host2,
	hether_nut2router,
	{
		_SRC(v6(IPSEC_NUT_NET0_ADDR));
//		_SRC(v6merge(IPSEC_NET0_PREFIX, IPSEC_NET0_PREFIX_LEN, nutv6()));
		_DST(v6(IPSEC_HOST2_NET1_ADDR));
	},
	{
		_SPORT(DESTINATION_PORT);
		_DPORT(10000);
		SequenceNumber=any;
		AcknowledgmentNumber=any;
		ACKFlag=1;
		SYNFlag=1;
		Window=any;
		option = opt_syn;
	},
	{
		header = _HDR_TCP_NAME(synack_reply_to_host2);
		payload = payload_syn;
	}
)


//======================================================================
//
// TCP Reset Request from Router
//

FEM_tcp6(
	reset_request_from_router,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_ROUTER_NET0_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
//		_DST(v6merge(IPSEC_NET0_PREFIX, IPSEC_NET0_PREFIX_LEN, nutv6()));
	},
	{
		_SPORT(10000);
		_DPORT(DESTINATION_PORT);
		SequenceNumber       = SEQ;
		AcknowledgmentNumber = ACK;       //* default 0 *//
		RSTFlag              = 1;
//		option = opt_syn;
	},
	{
		header = _HDR_TCP_NAME(reset_request_from_router);
		payload = payload_syn;
	}
)

//======================================================================
//
// Reset from Host1 (Net2) via SGW1 to NUT (Net0) on Net0
//

FEM_tcp6(
	reset_request_from_host1_net2_to_host0_net0,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_HOST1_NET2_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
	},
	{
		_SPORT(10000);
		_DPORT(DESTINATION_PORT);
		SequenceNumber       = SEQ;
		AcknowledgmentNumber = ACK;       //* default 0 *//
		RSTFlag              = 1;
	},
	{
		header = _HDR_TCP_NAME(reset_request_from_host1_net2_to_host0_net0);
		payload = payload_syn;
	}
)

//======================================================================
//
// TCP Reset Request from HOST1
//

FEM_tcp6(
	reset_request_from_host1,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_HOST1_NET1_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
	},
	{
		_SPORT(10000);
		_DPORT(DESTINATION_PORT);
		SequenceNumber       = SEQ;
		AcknowledgmentNumber = ACK;       //* default 0 *//
		RSTFlag              = 1;
//		option = opt_syn;
	},
	{
		header = _HDR_TCP_NAME(reset_request_from_host1);
		payload = payload_syn;
	}
)


//======================================================================
//
// TCP Reset Request from HOST1 (Destination Port 23)
//

FEM_tcp6(
	reset_request_from_host1_23,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_HOST1_NET1_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
	},
	{
		_SPORT(10000);
		_DPORT(23);
		SequenceNumber       = SEQ;
		AcknowledgmentNumber = ACK;       //* default 0 *//
		RSTFlag              = 1;
//		option = opt_syn;
	},
	{
		header = _HDR_TCP_NAME(reset_request_from_host1_23);
		payload = payload_syn;
	}
)

//======================================================================
//
// Reset from Host2 (Net2) via SGW1 to NUT (Net0) on Net0
//

FEM_tcp6(
	reset_request_from_host2_net2_to_host0_net0,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_HOST2_NET2_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
	},
	{
		_SPORT(10000);
		_DPORT(DESTINATION_PORT);
		SequenceNumber       = SEQ;
		AcknowledgmentNumber = ACK;       //* default 0 *//
		RSTFlag              = 1;
	},
	{
		header = _HDR_TCP_NAME(reset_request_from_host2_net2_to_host0_net0);
		payload = payload_syn;
	}
)

//======================================================================
//
// TCP Reset Request from HOST2
//

FEM_tcp6(
	reset_request_from_host2,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_HOST2_NET1_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
	},
	{
		_SPORT(10000);
		_DPORT(DESTINATION_PORT);
		SequenceNumber       = SEQ;
		AcknowledgmentNumber = ACK;       //* default 0 *//
		RSTFlag              = 1;
//		option = opt_syn;
	},
	{
		header = _HDR_TCP_NAME(reset_request_from_host2);
		payload = payload_syn;
	}
)

//======================================================================
//
// TCP Reset Request from HOST2 (Destination Port 23)
//

FEM_tcp6(
	reset_request_from_host2_23,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_HOST2_NET1_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
	},
	{
		_SPORT(10000);
		_DPORT(23);
		SequenceNumber       = SEQ;
		AcknowledgmentNumber = ACK;       //* default 0 *//
		RSTFlag              = 1;
//		option = opt_syn;
	},
	{
		header = _HDR_TCP_NAME(reset_request_from_host2_23);
		payload = payload_syn;
	}
)

//======================================================================
//
// Payload Data ("TCP syn")
//

Payload payload_syn {
        data = {};
}

Payload payload_syn_1 {
	data = { 0x44, 0x61, 0x74, 0x61, 0x20, 0x31 };
}

//======================================================================
//
// GET /.htm (11byte)
//

Payload get_data11{
        data = {
                0x47, 0x45, 0x54, 0x20, 0x2f, 0x2e, 0x68, 0x74,
                0x6d, 0x0d, 0x0a
        };
}

