#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/ipsec.p2/p2_HTR_E_TCP_Common.seq,v 1.20 2008/10/28 02:44:21 akisada Exp $
#
######################################################################
BEGIN {
	$V6evalTool::TestVersion = '$Name: V6PC_P2_IPsec_1_10_0 $ ';
}

use V6evalTool;
use IPSEC;

require './keys.pl';

######################################################################
#----- get sequence arguments
foreach (@ARGV) {
	/^app_type=(\S+)/ && do {$IPSEC::APP_TYPE=$1; # APPLICATION TYPE
					next; };
	/^ealgo_from=(\S+)/ && do {$EALGO_FROM=$1;    # ENCRYPTION ALGORITHM FOR INBOUND PACKET
					next; };
	/^ealgo_to=(\S+)/   && do {$EALGO_TO=$1;      # ENCRYPTION ALGORITHM FOR OUTBOUND PACKET
					next; };
	/^ealgo=(\S+)/      && do {$EALGO=$1;         # ESP ENCRYPTION ALGORITHM PACKET
					next; };
	/^eauth=(\S+)/      && do {$EAUTH=$1;         # ESP with AUTHENTICATION ALGORITHM FOR INBOUND PACKET
					next; };
	/^einkey=(\S+)/     && do {$E_IN_KEY=$$1;     # ESP ENCRYPTION KEY FOR INBOUND PACKET
					next; };
	/^eoutkey=(\S+)/    && do {$E_OUT_KEY=$$1;    # ESP ENCRYPTION KEY FOR OUTBOUND PACKET
					next; };
	/^ainkey=(\S+)/     && do {$A_IN_KEY=$$1;     # AH KEY FOR INBOUND PACKET
					next; };
	/^aoutkey=(\S+)/    && do {$A_OUT_KEY=$$1;    # AH KEY FOR OUTBOUND PACKET
					next; };
	/^test_type=(\S+)/  && do {$TEST_TYPE=$1;     # TEST TYPE
					next; };
	/^support=(\S+)/    && do {$SUPPORT=$1;       # SUPPORT FUNCTION CHECK
					next; };
	seqERROR("Unknown sequence option '$_'");
}
######################################################################

$IF = Link0;

#----- check NUT type
ipsecCheckNUT(host, $TEST_TYPE, $SUPPORT);

#----- Initilize target SA, SPD
vLogHTML("<FONT SIZE=3>*** Target initialization phase ***</FONT><BR>");
ipsecClearAll();

#----- Start capturing
vCapture($IF);

#----- Set Algorithms
my $seq = 0;
my $ack = 0;
my $port = undef;
vLog("$EALGO_FROM - $EALGO_TO") if $IPSEC::test_debug;
my $cpp = "-DEALGO_FROM_HOST1=$EALGO_FROM -DEALGO_TO_HOST1=$EALGO_TO";
$cpp .= " -DSEQ=$seq -DACK=$ack";
if ($IPSEC::NUT_RECV_PORT ne undef){
	$port = $IPSEC::NUT_RECV_PORT;
	$cpp .= " -DDESTINATION_PORT=$port";
}
else{
	$port = $IPSEC::DEF_PORT;
}

#----- Set SAD,SPD
## HOST1 vs NUT, Inbound
vLogHTML("Inbound KEY is $E_IN_KEY, Outbound KEY is $E_OUT_KEY<BR>") if $IPSEC::test_debug;
vLogHTML("Inbound Auth KEY is $A_IN_KEY, Outbound Auth KEY is $A_OUT_KEY<BR>") if $IPSEC::test_debug;
ipsecSetSAD(
	"src=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}" ,
	"dst=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}" ,
	"spi=0x1000" ,
	"mode=transport" ,
	"protocol=esp" ,
	"ealgo=$EALGO" ,
	"ealgokey=$E_IN_KEY" ,
	"eauth=$EAUTH" ,
	"eauthkey=$A_IN_KEY"
	);

ipsecSetSPD(
	"src=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}" ,
	"dst=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}" ,
	"upperspec=any" ,
	"direction=in" ,
	"protocol=esp-auth" ,
	"mode=transport" ,
	);

## HOST1 vs NUT, Outbound
ipsecSetSAD(
	"src=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}" ,
	"dst=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}" ,
	"spi=0x2000" ,
	"mode=transport" ,
	"protocol=esp" ,
	"ealgo=$EALGO" ,
	"ealgokey=$E_OUT_KEY" ,
	"eauth=$EAUTH" ,
	"eauthkey=$A_OUT_KEY"
	);

ipsecSetSPD(
	"src=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}" ,
	"dst=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}" ,
	"upperspec=any" ,
	"direction=out" ,
	"protocol=esp-auth" ,
	"mode=transport" ,
	);

## Enable IPsec
ipsecEnable();

#======================================================================
vLogHTML("<FONT SIZE=3>*** Target testing phase ***</FONT><BR>");

vLogHTML("Host-1 send Syn SequenceNumber=$seq, AcknowledgmentNumber=$ack to End-Node(NUT).<BR>");

($stat, %ret) = ipsecTcp2NUT($IF, $cpp, 'syn_request_from_host1_esp', 'synack_reply_to_host1_esp');

if ($stat ne 'GOT_REPLY') {
        vLogHTML('Cannot receive TCP Syn, Ack Reply from End-Node(NUT) to HOST-1(TN).<BR>');
        ipsecExitFail();
}

$port=$ret{"Frame_Ether.Packet_IPv6.Hdr_ESP.Decrypted.ESPPayload.Upp_TCP.Hdr_TCP.SourcePort"};
$seq=$ret{"Frame_Ether.Packet_IPv6.Hdr_ESP.Decrypted.ESPPayload.Upp_TCP.Hdr_TCP.SequenceNumber"};
$ack=$ret{"Frame_Ether.Packet_IPv6.Hdr_ESP.Decrypted.ESPPayload.Upp_TCP.Hdr_TCP.AcknowledgmentNumber"};

vLogHTML("Host-1 received Syn, Ack SequenceNumber=$seq, AcknowledgmentNumber=$ack from End-Node(NUT).<BR>");

vLogHTML("<FONT COLOR=\"#006600\">Judgement #1: OK</FONT><BR>");

#======================================================================
vLogHTML("<FONT SIZE=3>*** Target reset phase ***</FONT><BR>");

$seq = $ret{"Frame_Ether.Packet_IPv6.Hdr_ESP.Decrypted.ESPPayload.Upp_TCP.Hdr_TCP.AcknowledgmentNumber"};
$ack = 0;

$cpp = "-DEALGO_FROM_HOST1=$EALGO_FROM -DEALGO_TO_HOST1=$EALGO_TO";
$cpp .= " -DESP_FROM_HOST1=esp_from_host_seq2";
$cpp .= " -DSEQ=$seq -DACK=$ack";
if ($IPSEC::NUT_RECV_PORT ne undef){
	$port = $IPSEC::NUT_RECV_PORT;
	$cpp .= " -DDESTINATION_PORT=$port";
}
else{
	$port = $IPSEC::DEF_PORT;
}

vLogHTML("Host-1 send Rst SequenceNumber=$seq, AcknowledgmentNumber=$ack to End-Node(NUT).<BR>");

($stat, %ret) = ipsecResetTcp2NUT($IF, $cpp, 'reset_request_from_host1_esp');

#----- End capturing
vStop($IF);
ipsecExitPass();

######################################################################
__END__

=head1 NAME

  p2_HTR_E_TCP_Common - Algorithm check test
                      - End-Node Transport Mode   

=head1 TARGET

  End-Node

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./p2_HTR_E_TCP_Common.seq">p2_HTR_E_TCP_Common.seq</A> [-tooloption ...] -pkt <A HREF="./p2_HTR_E_TCP_common.def">p2_HTR_E_TCP_common.def</A>
    -tooloption : v6eval tool option
  See also <A HREF="./p2_HTR_TCP_common.def">p2_HTR_TCP_common.def</A>
  See also <A HREF="./p2_ALGO_common.def">p2_ALGO_common.def</A>
<BR>
Parameters:
  test_type=BASIC/ADVANCED
  support=Required_algorithm (See <A HREF="./p2_ipsec_config">p2_ipsec_config</A>)
  ealgo=encryption algorithm (e.g., 3des-cbc, rijndael-cbc, ...)
  eauth=authentication algorithm (e.g., hmac-sha1, hmac-md5, aes-xcbc-mac, ...)
  einkey=encryption key name for incoming packet (See <A HREF="./keys.pl">keys.pl</A> or <A HREF="./keys.def">keys.def</A>)
  ainkey=authentication key name for incoming packet (See <A HREF="./keys.pl">keys.pl</A> or <A HREF="./keys.def">keys.def</A>)
  eoutkey=encryption key name for outgoing packet (See <A HREF="./keys.pl">keys.pl</A> or <A HREF="./keys.def">keys.def</A>)
  aoutkey=authentication key name for incoming packet (See <A HREF="./keys.pl">keys.pl</A> or <A HREF="./keys.def">keys.def</A>)
  ealgo_from=packet define name for incoming packet (e.g., ealgo_3descbc_hmacsha1_in) (See <A HREF="./p2_ALGO_common.def">p2_ALGO_common.def</A>)
  ealgo_to=packet define name for outgoing packet (e.g., ealgo_3descbc_hmacsha1_out) (See <A HREF="./p2_ALGO_common.def">p2_ALGO_common.def</A>)
</PRE>

=end html

=head1 INITIALIZATION

=begin html
<P>
For details of Network Topology, see <A HREF="00README">00README</A>
</P>
<P>
Set NUT's SAD and SPD as following:
</P>
<PRE>
                  NUT
                   |
   ------------+---+-------- NET0
               |
             Router
               |
   ------------+---+-------- NET1
                   |
                  HOST1
<BR>
                NET1          NET0
    HOST1_NET1 ------ Router ------ NUT
               ===================> SA1-I Transport
               <=================== SA1-O Transport
</PRE>
<P>
Security Association Database (SAD)
</P>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SAD for SA1-I</center></TD></TR>
  <TR>
    <TD>source address</TD>
    <TD>HOST1_NET1</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR>
    <TD>SPI</TD>
    <TD>0x1000</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>transport</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>ESP algorithm</TD>
    <TD><font color="#ff0000">specified by parameter [ealgo]</font></TD></TR>
  <TR>
    <TD>ESP algorithm key</TD>
    <TD><font color="#ff0000">specified by parameter [einkey]</font></TD></TR>
  <TR>
    <TD>ESP authentication</TD>
    <TD><font color="#ff0000">specified by parameter [eauth]</font></TD></TR>
  <TR>
    <TD>ESP authentication key</TD>
    <TD><font color="#ff0000">specified by parameter [ainkey]</font></TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SAD for SA1-O</center></TD></TR>
  <TR>
    <TD>source address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>HOST1_NET1</TD></TR>
  <TR>
    <TD>SPI</TD>
    <TD>0x2000</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>transport</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>ESP algorithm</TD>
    <TD><font color="#ff0000">specified by parameter [ealgo]</font></TD></TR>
  <TR>
    <TD>ESP algorithm key</TD>
    <TD><font color="#ff0000">specified by parameter [eoutkey]</font></TD></TR>
  <TR>
    <TD>ESP authentication</TD>
    <TD><font color="#ff0000">specified by parameter [eauth]</font></TD></TR>
  <TR>
    <TD>ESP authentication key</TD>
    <TD><font color="#ff0000">specified by parameter [aoutkey]</font></TD></TR>
</TABLE>
<P>
Security Policy Database (SPD)
</P>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SPD for SA1-I</center></TD>
  <TR>
    <TD>source address</TD>
    <TD>HOST1_NET1</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR>
    <TD>upper spec</TD>
    <TD>any</TD></TR>
  <TR>
    <TD>direction</TD>
    <TD>in</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>transport</TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SPD for SA1-O</center></TD>
  <TR>
    <TD>source address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>HOST1_NET1</TD></TR>
  <TR>
    <TD>upper spec</TD>
    <TD>any</TD></TR>
  <TR>
    <TD>direction</TD>
    <TD>out</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>transport</TD></TR>
</TABLE>

=end html

=head1 TEST PROCEDURE

=begin html
<PRE>
 Tester                      Target
   |                           |
   |-------------------------->| From HOST1_NET1
   |        TCP syn            |
   |        (with ESP)         |
   |                           |
   |<--------------------------| To HOST1_NET1
   |        TCP ack, syn       |
   |        (with ESP)         |
   |                           |
   |-------------------------->| From HOST1_NET1
   |        TCP reset          |
   |        (with ESP)         |
   |                           |
   v                           v
</PRE>
<OL>
  <LI>Send &quot;TCP Syn with ESP from HOST1_NET1&quot;
  <LI>Receive &quot;TCP Syn/Ack with ESP to HOST1_NET1&quot;
  <LI>Send &quot;TCP Rst with ESP from HOST1_NET1&quot;
</OL>
<P>
Packet Description
</P>
<TABLE border="1">
  <TR bgcolor="#ffffbb">
    <TD colspan="3"><center>TCP Syn with ESP from HOST1_NET1</center></TD></TR>
  <TR bgcolor="#ddffdd">
    <TD rowspan="2">IP Header</TD>
    <TD>Source Address</TD>
    <TD>HOST1_NET1</TD></TR>
  <TR bgcolor="#ddffdd">
    <TD>Destination Address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD rowspan="5">ESP</TD>
    <TD>SPI</TD>
    <TD>0x1000</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Algorithm</TD>
    <TD><font color="#ff0000">specified by parameter [ealgo]</font></TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Key</TD>
    <TD><font color="#ff0000">specified by parameter [einkey]</font></TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Algorithm</TD>
    <TD><font color="#ff0000">specified by parameter [eauth]</font></TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Key</TD>
    <TD><font color="#ff0000">specified by parameter [ainkey]</font></TD></TR>
  <TR bgcolor="#ddddff">
    <TD rowspan="8">TCP</TD>
    <TD>Source Port</TD>
    <TD>10000</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>Destination Port</TD>
    <TD>80</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>SequenceNumber</TD>
    <TD>0</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>AcknowledgmentNumber</TD>
    <TD>0</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>SYNFlag</TD>
    <TD>1</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>ACKFlag</TD>
    <TD>0</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>RSTFlag</TD>
    <TD>0</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>Data Length</TD>
    <TD>0</TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR bgcolor="#ffffbb">
    <TD colspan="3"><center>TCP Syn/Ack with ESP to HOST1_NET1</center></TD></TR>
  <TR bgcolor="#ddffdd">
    <TD rowspan="2">IP Header</TD>
    <TD>Source Address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR bgcolor="#ddffdd">
    <TD>Destination Address</TD>
    <TD>HOST1_NET1</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD rowspan="5">ESP</TD>
    <TD>SPI</TD>
    <TD>0x2000</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Algorithm</TD>
    <TD><font color="#ff0000">specified by parameter [ealgo]</font></TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Key</TD>
    <TD><font color="#ff0000">specified by parameter [eoutkey]</font></TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Algorithm</TD>
    <TD><font color="#ff0000">specified by parameter [eauth]</font></TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Key</TD>
    <TD><font color="#ff0000">specified by parameter [aoutkey]</font></TD></TR>
  <TR bgcolor="#ddddff">
    <TD rowspan="8">TCP</TD>
    <TD>Source Port</TD>
    <TD>80</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>Destination Port</TD>
    <TD>10000</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>SequenceNumber</TD>
    <TD>any</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>AcknowledgmentNumber</TD>
    <TD>1</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>SYNFlag</TD>
    <TD>1</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>ACKFlag</TD>
    <TD>1</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>RSTFlag</TD>
    <TD>0</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>Data Length</TD>
    <TD>0</TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR bgcolor="#ffffbb">
    <TD colspan="3"><center>TCP Rst with ESP from HOST1_NET1</center></TD></TR>
  <TR bgcolor="#ddffdd">
    <TD rowspan="2">IP Header</TD>
    <TD>Source Address</TD>
    <TD>HOST1_NET1</TD></TR>
  <TR bgcolor="#ddffdd">
    <TD>Destination Address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD rowspan="5">ESP</TD>
    <TD>SPI</TD>
    <TD>0x1000</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Algorithm</TD>
    <TD><font color="#ff0000">specified by parameter [ealgo]</font></TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Key</TD>
    <TD><font color="#ff0000">specified by parameter [einkey]</font></TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Algorithm</TD>
    <TD><font color="#ff0000">specified by parameter [eauth]</font></TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Key</TD>
    <TD><font color="#ff0000">specified by parameter [ainkey]</font></TD></TR>
  <TR bgcolor="#ddddff">
    <TD rowspan="8">TCP</TD>
    <TD>Source Port</TD>
    <TD>10000</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>Destination Port</TD>
    <TD>80</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>SequenceNumber</TD>
    <TD>1</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>AcknowledgmentNumber</TD>
    <TD>0</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>SYNFlag</TD>
    <TD>0</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>ACKFlag</TD>
    <TD>0</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>RSTFlag</TD>
    <TD>1</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>Data Length</TD>
    <TD>0</TD></TR>
</TABLE>

=end html

=head1 JUDGEMENT

=begin html
<UL>
PASS:
    <UL>
        Step-2:&quot;TCP Syn/Ack with ESP to HOST1_NET1&quot; Recieved<BR>
    </UL>
</UL>

=end html

=head1 SEE ALSO

  perldoc V6evalTool

=begin html
<PRE>
  <A HREF="./IPSEC.html">IPSEC.html</A> IPsec Test Common Utility
</PRE>

=cut
