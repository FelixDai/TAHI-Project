#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/ipsec.p2/p2_SGW_E_ReceiptOfNoNextHeader.seq,v 1.1 2007/03/14 04:40:20 akisada Exp $
#
########################################################################

BEGIN
{
	$V6evalTool::TestVersion = '$Name: V6PC_P2_IPsec_1_10_0 $ ';
}

use V6evalTool;
use IPSEC;

require './keys.pl';

######################################################################
#----- Set defalut value
$EALGO_FROM="ealgo_3descbc_hmacsha1_in";
$EALGO_TO="ealgo_3descbc_hmacsha1_out";

##----- get sequence arguments
foreach (@ARGV) {
	# APPLICATION TYPE
	/^app_type=(\S+)/	&& do {$IPSEC::APP_TYPE=$1;	next; };

	# ESP ENCRYPTION ALGORITHM FOR INBOUND PACKET
#	/^ealgo_from=(\S+)/	&& do {$EALGO_FROM=$1;	next; };

	# ESP ENCRYPTION ALGORITHM FOR OUTBOUND PACKET
#	/^ealgo_to=(\S+)/	&& do {$EALGO_TO=$1;	next; };

	# ESP ENCRYPTION ALGORITHM PACKET
#       /^ealgo=(\S+)/	&& do {$EALGO=$1;	next; };

	# ESP with AUTHENTICATION ALGORITHM FOR INBOUND PACKET
#	/^eauth=(\S+)/	&& do {$EAUTH=$1;	next; };

	# ESP ENCRYPTION KEY FOR INBOUND PACKET
#	/^einkey=(\S+)/	&& do {$E_IN_KEY=$$1;	next; };

	# ESP ENCRYPTION KEY FOR OUTBOUND PACKET
#	/^eoutkey=(\S+)/	&& do {$E_OUT_KEY=$$1;	next; };

	# AH KEY FOR INBOUND PACKET
#	/^ainkey=(\S+)/	&& do {$A_IN_KEY=$$1;	next; };

	# AH KEY FOR OUTBOUND PACKET
#	/^aoutkey=(\S+)/	&& do {$A_OUT_KEY=$$1;	next; };

	# TEST TYPE
	/^test_type=(\S+)/	&& do {$TEST_TYPE=$1;	next; };

	# SUPPORT FUNCTION CHECK
	/^support=(\S+)/	&& do {$SUPPORT=$1;	next; };

	seqERROR("Unknown sequence option '$_'");
}
#######################################################################

my $IF0 = 'Link0';
my $IF1 = 'Link1';

#----- check NUT type
ipsecCheckNUT(sgw, $TEST_TYPE, $SUPPORT);

#----- Initilize target SA, SPD
vLogHTML("<FONT SIZE=3>*** Target initialization phase ***</FONT><BR>");
ipsecClearAll();

#----- Start capturing
vCapture($IF0);
vCapture($IF1);

# Confirmation is not required
#ipsecSetAddrSGW($IF0, $IF1);



#----- Set Algorithms
my $cpp  = "-DEALGO_FROM_SGW1_NET2_HOST2=$EALGO_FROM "; 
   $cpp .= "-DEALGO_TO_SGW1_NET2_HOST2=$EALGO_TO "; 
vCPP($cpp);



#----- Set SAD,SPD
## SGW1 vs NUT, Inbound
ipsecSetSAD(
	"src=$IPSEC::IPsecAddr{IPSEC_SGW1_NET2_ADDR}" ,
	"dst=$IPSEC::IPsecAddr{IPSEC_NUT_NET1_ADDR}" ,
	"nsrc=$IPSEC::IPsecAddr{IPSEC_NET3_ADDR}" ,
	"ndst=$IPSEC::IPsecAddr{IPSEC_NET0_ADDR}" ,
	"spi=0x1000" ,
	"mode=tunnel" ,
	"protocol=esp" ,
	"ealgo=3des-cbc" ,
	"ealgokey=$E_3descbc_in_key" ,
	"eauth=hmac-sha1" ,
	"eauthkey=$A_hmacsha1_in_key"
	);

ipsecSetSPD(
	"tsrc=$IPSEC::IPsecAddr{IPSEC_SGW1_NET2_ADDR}" ,
	"tdst=$IPSEC::IPsecAddr{IPSEC_NUT_NET1_ADDR}" ,
	"src=$IPSEC::IPsecAddr{IPSEC_NET3_ADDR}" ,
	"dst=$IPSEC::IPsecAddr{IPSEC_NET0_ADDR}" ,
	"upperspec=any" ,
	"direction=in" ,
	"protocol=esp-auth" ,
	"mode=tunnel" ,
	"policy=ipsec" ,
	"level=use" ,
	);

## Enable IPsec
ipsecEnable();

#======================================================================
vLogHTML("<FONT SIZE=3>*** Target testing phase ***<FONT><BR>");

# ping TN(Host-2) -> TN(Host1) via NUT



($stat, %ret) = ipsecForwardOneWay($IF1, $IF0,
	'esptun_from_sg1_net2_echo_request_from_host2_net3_to_host1_net0',
	'echo_request_from_host2_net3_to_host1_net0_via_nut');

if ($stat ne 'GOT_REPLY') {
	vLogHTML(
		"TN received no echo request ".
		"from HOST-2(TN) to HOST-1(TN) via SGW(NUT).<BR>");
	ipsecExitFail();
}

vLogHTML(
	"TN received echo request from HOST-1(TN) to HOST-2(TN) via SGW(NUT).<BR>");
vLogHTML("<FONT COLOR=\"#006600\">Judgement #1: Select SA1 OK</FONT><BR>");



vClear($IF0);
vClear($IF1);
vSend($IF1, 'esptun_from_sg1_net2_dummy');

my %retx = vRecv($IF0, 1, 0, 0);
my %rety = vRecv($IF1, 1, 0, 0);

if($retx{'recvCount'} || $rety{'recvCount'}) {
	vLogHTML("TN received unexpected packets.");
	ipsecExitFail();
}

vLogHTML("<FONT COLOR=\"#006600\">Judgement #2: Select SA1 OK</FONT><BR>");



($stat, %ret) = ipsecForwardOneWay($IF1, $IF0,
	'esptun_from_sg1_net2_echo_request_from_host2_net3_to_host1_net0_2',
	'echo_request_from_host2_net3_to_host1_net0_via_nut');

if ($stat ne 'GOT_REPLY') {
	vLogHTML(
		"TN received no echo request ".
		"from HOST-2(TN) to HOST-1(TN) via SGW(NUT).<BR>");
	ipsecExitFail();
}

vLogHTML(
	"TN received echo request from HOST-1(TN) to HOST-2(TN) via SGW(NUT).<BR>");
vLogHTML("<FONT COLOR=\"#006600\">Judgement #3: Select SA1 OK</FONT><BR>");



ipsecExitPass();

######################################################################
__END__

=head1 NAME

  p2_SGW_E_Bypass - Select Bypass Policy

=head1 TARGET

  SGW

=head1 SYNOPSIS

=begin html
<PRE>
ICMP Case:
  <A HREF="./p2_SGW_E_Bypass.seq">p2_SGW_E_Bypass.seq</A> [-tooloption ...] -pkt <A HREF="./p2_SGW_E_ICMP_common.def">p2_SGW_E_ICMP_common.def</A>
    -tooloption : v6eval tool option
  See also <A HREF="./p2_SGW_ICMP_common.def">p2_SGW_ICMP_common.def</A>
  See also <A HREF="./p2_ALGO_common.def">p2_ALGO_common.def</A>
<BR>
UDP Case:
  <A HREF="./p2_SGW_E_Bypass.seq">p2_SGW_E_Bypass.seq</A> [-tooloption ...] -pkt <A HREF="./p2_SGW_E_UDP_common.def">p2_SGW_E_UDP_common.def</A>
    -tooloption : v6eval tool option
  See also <A HREF="./p2_SGW_UDP_common.def">p2_SGW_UDP_common.def</A>
  See also <A HREF="./p2_ALGO_common.def">p2_ALGO_common.def</A>
<BR>
Parameters:
  test_type=ADVANCED
  support=BYPASS_POLICY_SUPPORT (See <A HREF="p2_ipsec_config">p2_ipsec_config</A>)
</PRE>

=end html

=head1 INITIALIZATION

=begin html
<P>
For details of Network Topology, see <A HREF="00README">00README</A>
</P>
<P>
Set NUT's SAD and SPD as following:
</P>
<PRE>
                  HOST1
                   |
   ------------+---+------------------ NET0
               |
              NUT
               |
   ------------+---+------------------ NET1
                   |
                 Router
                   |
   ------------+---+--------+--------- NET2
               |            |
              SGW1         SGW2
               |            |
   -----+------+-- NET3   --+--+------ NET4
        |                      |
      HOST2                  HOST4
<BR>
                NET3        NET2          NET1       NET0
    HOST2_NET3 ------ SGW1 ------ Router ------ NUT ------ HOST1_NET0
                          =====================> SA1-I Tunnel
                          <===================== SA1-O Tunnel
<BR>
</PRE>
<P>
Security Association Database (SAD)
</P>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SAD for SA1-I</center></TD></TR>
  <TR>
    <TD>source address</TD>
    <TD>SGW1_NET2</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>NUT_NET1</TD></TR>
  <TR>
    <TD>SPI</TD>
    <TD>0x1000</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>tunnel</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>ESP algorithm</TD>
    <TD>3DES-CBC</TD><TR>
  <TR>
    <TD>ESP algorithm key</TD>
    <TD>ipv6readylogo3descbcin01</TD></TR>
  <TR>
    <TD>ESP authentication</TD>
    <TD>HMAC-SHA1</TD><TR>
  <TR>
    <TD>ESP authentication key</TD>
    <TD>ipv6readylogsha1in01</TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SAD for SA1-O</center></TD></TR>
  <TR>
    <TD>source address</TD>
    <TD>NUT_NET1</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>SGW1_NET2</TD></TR>
  <TR>
    <TD>SPI</TD>
    <TD>0x2000</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>tunnel</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>ESP algorithm</TD>
    <TD>3DES-CBC</TD><TR>
  <TR>
    <TD>ESP algorithm key</TD>
    <TD>ipv6readylogo3descbcout1</TD></TR>
  <TR>
    <TD>ESP authentication</TD>
    <TD>HMAC-SHA1</TD><TR>
  <TR>
    <TD>ESP authentication key</TD>
    <TD>ipv6readylogsha1out1</TD></TR>
</TABLE>
<P>
Security Policy Database (SPD)
</P>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SPD for SA1-I</center></TD>
  <TR>
    <TD>tunnel source address</TD>
    <TD>SGW1_NET2</TD></TR>
  <TR>
    <TD>tunnel destination address</TD>
    <TD>NUT_NET1</TD></TR>
  <TR>
    <TD>source address</TD>
    <TD>NET3</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>NET0</TD></TR>
  <TR>
    <TD>upper spec</TD>
    <TD>any</TD></TR>
  <TR>
    <TD>direction</TD>
    <TD>in</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>tunnel</TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SPD for SA1-O</center></TD>
  <TR>
    <TD>tunnel source address</TD>
    <TD>NUT_NET1</TD></TR>
  <TR>
    <TD>tunnel destination address</TD>
    <TD>SGW1_NET2</TD></TR>
  <TR>
    <TD>source address</TD>
    <TD>NET0</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>NET3</TD></TR>
  <TR>
    <TD>upper spec</TD>
    <TD>any</TD></TR>
  <TR>
    <TD>direction</TD>
    <TD>out</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>tunnel</TD></TR>
</TABLE>

=end html

=head1 TEST PROCEDURE

=begin html
<PRE>
  Tester                 Target(NUT)              Tester
     |                       |                       |
     |---------------------->|                       | From HOST2_NET3 via SGW1
     |   ICMP Echo Request   |                       | (Tunnel)
     |     (within ESP)      |                       |
     |                       |                       |
     |                       |---------------------->| From HOST2_NET3
     |                       |   ICMP Echo Request   |
     |                       |     (without ESP)     |
     |                       |                       |
     |                       |                       |
    ================================================== Set Bypass Policy to NUT
     |                       |                       |
     |                       |                       |
     |---------------------->|                       | From HOST4_NET4
     |   ICMP Echo Request   |                       |
     |     (without ESP)     |                       |
     |                       |                       |
     |                       |---------------------->| From HOST4_NET4
     |                       |   ICMP Echo Request   |
     |                       |     (without ESP)     |
     |                       |                       |
     |                       |                       |
     v                       v                       v
</PRE>
<OL>
  <LI>Send &quot;ICMP Echo Request within ESP from HOST2_NET3&quot;
  <LI>Receive &quot;ICMP Echo Request from HOST2_NET3&quot;
  <LI>Set Bypass Policy to NUT 
  <LI>Send &quot;ICMP Echo Request from HOST4_NET4&quot;
  <LI>Receive &quot;ICMP Echo Request from HOST4_NET4&quot;
</OL>
<P>
<BR>
Set <B>Bypass</B> Policy to allow plain packet from any to any.
<BR>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SPD for SA2-I</center></TD>
  <TR>
    <TD>source address</TD>
    <TD>any</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>any</TD></TR>
  <TR>
    <TD>upper spec</TD>
    <TD>any</TD></TR>
  <TR>
    <TD>direction</TD>
    <TD>in</TD></TR>
  <TR>
    <TD>policy</TD>
    <TD>bypass</TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SPD for SA2-O</center></TD>
  <TR>
    <TD>source address</TD>
    <TD>any</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>any</TD></TR>
  <TR>
    <TD>upper spec</TD>
    <TD>any</TD></TR>
  <TR>
    <TD>direction</TD>
    <TD>out</TD></TR>
  <TR>
    <TD>policy</TD>
    <TD>bypass</TD></TR>
</TABLE>
<P>
Packet Description
</P>
<TABLE border="1">
  <TR bgcolor="#ffffbb">
    <TD colspan="3"><center>ICMP Echo Request within ESP from HOST2_NET3</center></TD></TR>
  <TR bgcolor="#ddffdd">
    <TD rowspan="2">IP Header</TD>
    <TD>Source Address</TD>
    <TD>SGW1_NET2</TD></TR>
  <TR bgcolor="#ddffdd">
    <TD>Destination Address</TD>
    <TD>NUT_NET1</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD rowspan="5">ESP</TD>
    <TD>SPI</TD>
    <TD>0x1000</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Algorithm</TD>
    <TD>3DES-CBC</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Key</TD>
    <TD>ipv6readylogo3descbcin01</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Algorithm</TD>
    <TD>HMAC-SHA1</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Key</TD>
    <TD>ipv6readylogsha1in01</TD></TR>
  <TR bgcolor="#ddffdd">
    <TD rowspan="2">IP Header</TD>
    <TD>Source Address</TD>
    <TD>HOST2_NET3</TD></TR>
  <TR bgcolor="#ddffdd">
    <TD>Destination Address</TD>
    <TD>HOST1_NET0</TD></TR>
  <TR bgcolor="#ddddff">
    <TD rowspan=2>ICMP</TD>
    <TD>Type</TD>
    <TD>128 (Echo Request)</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>Data Length</TD>
    <TD>7</TD>
</TABLE>
<BR>
<TABLE border="1">
  <TR bgcolor="#ffffbb">
    <TD colspan="3"><center>ICMP Echo Request from HOST2_NET3</center></TD></TR>
  <TR bgcolor="#ddffdd">
    <TD rowspan="2">IP Header</TD>
    <TD>Source Address</TD>
    <TD>HOST2_NET3</TD></TR>
  <TR bgcolor="#ddffdd">
    <TD>Destination Address</TD>
    <TD>HOST1_NET0</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>ICMP</TD>
    <TD>Type</TD>
    <TD>128 (Echo Request)</TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR bgcolor="#ffffbb">
    <TD colspan="3"><center>ICMP Echo Request from HOST4_NET4</center></TD></TR>
  <TR bgcolor="#ddffdd">
    <TD rowspan="2">IP Header</TD>
    <TD>Source Address</TD>
    <TD>HOST4_NET4</TD></TR>
  <TR bgcolor="#ddffdd">
    <TD>Destination Address</TD>
    <TD>HOST1_NET0</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>ICMP</TD>
    <TD>Type</TD>
    <TD>128 (Echo Request)</TD></TR>
</TABLE>

=end html

=head1 JUDGEMENT

=begin html
<UL>
PASS:
    <UL>
        Step-2:&quot;ICMP Echo Request from HOST2_NET3&quot; Recieved<BR>
        Step-5:&quot;ICMP Echo Request from HOST4_NET4&quot; Recieved<BR>
    </UL>
</UL>

=end html

=head1 SEE ALSO

  perldoc V6evalTool

=begin html
<PRE>
  <A HREF="./IPSEC.html">IPSEC.html</A> IPsec Test Common Utility
</PRE>

=cut
