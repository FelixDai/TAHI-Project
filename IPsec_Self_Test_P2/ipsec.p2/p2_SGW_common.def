//
// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
// Yokogawa Electric Corporation.
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $Name: V6PC_P2_IPsec_1_11_1 $
//
// $TAHI: ct/ipsec.p2/p2_SGW_common.def,v 1.6 2007/03/09 10:48:05 akisada Exp $
//
#ifndef IPSEC_SGW_COMMON_DEF
#define IPSEC_SGW_COMMON_DEF

#include "./p2_SGW_ipsecaddr.def"

//======================================================================

_HETHER_define(hether_host2nut,
	ether(IPSEC_HOST1_NET0_MAC_ADDR),
	nutether()
)

_HETHER_define(hether_nut2host,
	nutether(),
	ether(IPSEC_HOST1_NET0_MAC_ADDR)
)

_HETHER_define(hether_router2nut,
	ether(IPSEC_ROUTER_NET1_MAC_ADDR),
	nutether()
)

_HETHER_define(hether_nut2router,
	nutether(),
	ether(IPSEC_ROUTER_NET1_MAC_ADDR)
)

_HETHER_define(_HETHER_router2allnodes,
	ether(IPSEC_ROUTER_NET1_MAC_ADDR),
	v62ethermulti(v6(_ALLNODES_MCAST_ADDR))
)

//======================================================================
//
// RS
//

FEM_icmp6_rs(
	rs_from_nut_wunspec,
	_HETHER_nut2allrouters,
	{   
		_SRC(v6(_UNSPEC_ADDR));
		_DST(v6(_ALLROUTERS_MCAST_ADDR));
		HopLimit=255;
	},
	{
	}
)

FEM_icmp6_rs(
	rs_from_nut,
	_HETHER_nut2allrouters,
	{   
		_SRC(nutv6());
		_DST(v6(_ALLROUTERS_MCAST_ADDR));
		HopLimit=255;
	},
	{
	}
)

FEM_icmp6_rs(
	rs_from_nut_wsll,
	_HETHER_nut2allrouters,
	{
		_SRC(nutv6());
		_DST(v6(_ALLROUTERS_MCAST_ADDR));
		HopLimit=255;
	},
	{
		option=_SLLOPT_nut;
	}
)

//======================================================================
//
// RA
//

FEM_icmp6_ra(
        ra_to_nut,
        _HETHER_router2allnodes,
        {
                HopLimit = 255;
                _SRC(v6(IPSEC_ROUTER_NET1_LINK_ADDR));
                _DST(v6(_ALLNODES_MCAST_ADDR));
        },
        {
		CurHopLimit=64;
                LifeTime = 1800;
//		ReachableTime=60000;
//		RetransTimer=1005;
//                option   = opt_sll_router;
                option   = opt_mtu_1500;
                option   = opt_prefixinformation_router;
        }
)

Opt_ICMPv6_SLL opt_sll_router {
        LinkLayerAddress = ether(IPSEC_ROUTER_NET1_MAC_ADDR);
}

Opt_ICMPv6_MTU opt_mtu_1500 {
        MTU = 1500;
}

Opt_ICMPv6_Prefix opt_prefixinformation_router {
        LFlag             = 1;
        AFlag             = 1;
        ValidLifetime     = 2592000;
        PreferredLifetime = 604800;
        Prefix            = v6(IPSEC_NET1_PREFIX);
}

//
// NS 
//

_HETHER_define(hether_nut2routersolnode,
	nutether(),
	oneof(_ETHER_SOLNODE_MCAST(v6(IPSEC_ROUTER_NET1_ADDR)),
	      ether(IPSEC_ROUTER_NET1_MAC_ADDR) )
)

FEM_icmp6_ns(
	ns_to_router,
	hether_nut2routersolnode,
	{
		_SRC(oneof(v6(IPSEC_NUT_NET1_ADDR), v6merge(IPSEC_NET1_PREFIX, IPSEC_NET1_PREFIX_LEN, nutv6()), nutv6()));
		_DST(oneof(v6(IPSEC_ROUTER_NET1_ADDR), _IPV6_SOLNODE_MCAST(v6(IPSEC_ROUTER_NET1_ADDR))));
		HopLimit = 255;
	},
	{
		TargetAddress = v6(IPSEC_ROUTER_NET1_ADDR);
		option = _SLLOPT_nut;
	}
)

FEM_icmp6_ns(
	ns_to_router_linkaddr,
	hether_nut2routersolnode,
	{
		_SRC(oneof(v6(IPSEC_NUT_NET1_ADDR),v6merge(IPSEC_NET1_PREFIX, IPSEC_NET1_PREFIX_LEN, nutv6()), nutv6()));
		_DST(oneof(v6(IPSEC_ROUTER_NET1_LINK_ADDR), _IPV6_SOLNODE_MCAST(v6(IPSEC_ROUTER_NET1_LINK_ADDR))));
		HopLimit = 255;
	},
	{
		TargetAddress = v6(IPSEC_ROUTER_NET1_LINK_ADDR);
		option = _SLLOPT_nut;
	}
)

FEM_icmp6_ns(
        ns_to_router_wo_sllopt,
	hether_nut2router,
        {
                _SRC(oneof(v6(IPSEC_NUT_NET1_ADDR),v6merge(IPSEC_NET1_PREFIX, IPSEC_NET1_PREFIX_LEN, nutv6()),nutv6()));
		_DST(v6(IPSEC_ROUTER_NET1_ADDR));
                HopLimit      = 255;
        },
        {
		TargetAddress = v6(IPSEC_ROUTER_NET1_LINK_ADDR);
        }
)

_HETHER_define(hether_nut2hostsolnode,
	nutether(),
	oneof(_ETHER_SOLNODE_MCAST(v6(IPSEC_HOST1_NET0_ADDR)),
	      ether(IPSEC_HOST1_NET0_MAC_ADDR) )
)

FEM_icmp6_ns(
	ns_to_host,
	hether_nut2hostsolnode,
	{
		_SRC(oneof(v6(IPSEC_NUT_NET0_ADDR), v6merge(IPSEC_NET0_PREFIX, IPSEC_NET0_PREFIX_LEN, nutv6()), nutv6()));
		_DST(oneof(v6(IPSEC_HOST1_NET0_ADDR), _IPV6_SOLNODE_MCAST(v6(IPSEC_HOST1_NET0_ADDR))));
		HopLimit = 255;
	},
	{
		TargetAddress = v6(IPSEC_HOST1_NET0_ADDR);
		option = _SLLOPT_nut;
	}
)

FEM_icmp6_ns(
	ns_to_host_linkaddr,
	hether_nut2hostsolnode,
	{
		_SRC(oneof(v6(IPSEC_NUT_NET0_ADDR), v6merge(IPSEC_NET0_PREFIX, IPSEC_NET0_PREFIX_LEN, nutv6()), nutv6()));
		_DST(oneof(v6(IPSEC_HOST1_NET0_LINK_ADDR), _IPV6_SOLNODE_MCAST(v6(IPSEC_HOST1_NET0_LINK_ADDR))));
		HopLimit = 255;
	},
	{
		TargetAddress = v6(IPSEC_HOST1_NET0_LINK_ADDR);
		option = _SLLOPT_nut;
	}
)

FEM_icmp6_ns(
        ns_to_host_wo_sllopt,
	hether_nut2host,
        {
                _SRC(oneof(v6(IPSEC_NUT_NET0_ADDR), v6merge(IPSEC_NET0_PREFIX, IPSEC_NET0_PREFIX_LEN, nutv6()),nutv6()));
		_DST(v6(IPSEC_HOST1_NET0_ADDR));
                HopLimit      = 255;
        },
        {
		TargetAddress = v6(IPSEC_HOST1_NET0_LINK_ADDR);
        }
)


//
// NA
//

_TLLOPT_define(tllopt_host, ether(IPSEC_HOST1_NET0_MAC_ADDR))
_TLLOPT_define(tllopt_router, ether(IPSEC_ROUTER_NET1_MAC_ADDR))

FEM_icmp6_na(
	na_from_router,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_ROUTER_NET1_ADDR));
		_DST(v6(IPSEC_NUT_NET1_ADDR));
		HopLimit = 255;
	},
	{
		RFlag = 1;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = v6(IPSEC_ROUTER_NET1_ADDR);
		option = tllopt_router;
	}
)

FEM_icmp6_na(
	na_from_router_linkaddr,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_ROUTER_NET1_LINK_ADDR));
		_DST(v6(IPSEC_NUT_NET1_ADDR));
		HopLimit = 255;
	},
	{
		RFlag = 1;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = v6(IPSEC_ROUTER_NET1_LINK_ADDR);
		option = tllopt_router;
	}
)

FEM_icmp6_na(
	na_from_host,
	hether_host2nut,
	{
		_SRC(v6(IPSEC_HOST1_NET0_ADDR));
//		_DST(v6merge(IPSEC_NET0_PREFIX, IPSEC_NET0_PREFIX_LEN, nutv6()));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
		HopLimit = 255;
	},
	{
		RFlag = 1;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = v6(IPSEC_HOST1_NET0_ADDR);
		option = tllopt_host;
	}
)

FEM_icmp6_na(
	na_from_host_linkaddr,
	hether_host2nut,
	{
		_SRC(v6(IPSEC_HOST1_NET0_LINK_ADDR));
//		_DST(v6merge(IPSEC_NET0_PREFIX, IPSEC_NET0_PREFIX_LEN, nutv6()));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
		HopLimit = 255;
	},
	{
		RFlag = 1;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = v6(IPSEC_HOST1_NET0_LINK_ADDR);
		option = tllopt_host;
	}
)

#endif	// IPSEC_SGW_COMMON_DEF
