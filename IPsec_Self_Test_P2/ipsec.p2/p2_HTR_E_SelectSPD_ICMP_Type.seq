#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/ipsec.p2/p2_HTR_E_SelectSPD_ICMP_Type.seq,v 1.6 2009/01/08 10:03:28 akisada Exp $
#
######################################################################
BEGIN {
	$V6evalTool::TestVersion = '$Name: V6PC_P2_IPsec_1_11_1 $ ';
}

use V6evalTool;
use IPSEC;

require './keys.pl';

######################################################################
#----- Set defalut value
$EALGO_FROM="ealgo_3descbc_hmacsha1_in";
$EALGO_TO="ealgo_3descbc_hmacsha1_out";
$EALGO_FROM2="ealgo_3descbc_hmacsha1_in_2";
$EALGO_TO2="ealgo_3descbc_hmacsha1_out_2";

##----- get sequence arguments
foreach (@ARGV) {
	# APPLICATION TYPE
	/^app_type=(\S+)/	&& do { $IPSEC::APP_TYPE=$1;	next; };

	# ESP ENCRYPTION ALGORITHM FOR INBOUND PACKET
#	/^ealgo_from=(\S+)/	&& do { $EALGO_FROM=$1;	next; };

	# ESP ENCRYPTION ALGORITHM FOR OUTBOUND PACKET
#	/^ealgo_to=(\S+)/	&& do { $EALGO_TO=$1;	next; };

	# ESP ENCRYPTION ALGORITHM PACKET
#	/^ealgo=(\S+)/	&& do { $EALGO=$1;	next; };

	# ESP with AUTHENTICATION ALGORITHM FOR INBOUND PACKET
#	/^eauth=(\S+)/	&& do { $EAUTH=$1;	next; };

	# ESP ENCRYPTION KEY FOR INBOUND PACKET
#	/^einkey=(\S+)/	&& do { $E_IN_KEY=$$1;	next; };

	# ESP ENCRYPTION KEY FOR OUTBOUND PACKET
#	/^eoutkey=(\S+)/	&& do { $E_OUT_KEY=$$1;	next; };

	# AH KEY FOR INBOUND PACKET
#	/^ainkey=(\S+)/	&& do { $A_IN_KEY=$$1;	next; };

	# AH KEY FOR OUTBOUND PACKET
#	/^aoutkey=(\S+)/	&& do { $A_OUT_KEY=$$1;	next; };

	# TEST TYPE
	/^test_type=(\S+)/	&& do { $TEST_TYPE=$1;	next; };

	# SUPPORT FUNCTION CHECK
	/^support=(\S+)/	&& do { $SUPPORT=$1;	next; };

	seqERROR("Unknown sequence option '$_'");
}
#######################################################################

$IF = Link0;
$IF1 = Link1;

#----- check NUT type
ipsecCheckNUT(host, $TEST_TYPE, $SUPPORT);

if(($IPSEC::APP_TYPE eq 'udp') || ($IPSEC::APP_TYPE eq 'tcp')) {
	vLogHTML(
		"<FONT COLOR=\"#FF0000\">This test must run by using ICMP</FONT><BR>");
	ipsecExitNS();
}

my $BOOL_ICMP_TYPE_CODE_SELECTOR_SUPPORT = 0;
my $BOOL_PASSIVE_NODE = 0;
my $BOOL_USE_PORT_UNREACHABLE = 0;

if($IPSEC::advanced_functions{'ICMP_TYPE_CODE_SELECTOR_SUPPORT'} eq 'yes') {
	$BOOL_ICMP_TYPE_CODE_SELECTOR_SUPPORT = 1;
}

if($IPSEC::advanced_functions{'PASSIVE_NODE'} eq 'yes') {
	$BOOL_PASSIVE_NODE = 1;
}

if($IPSEC::advanced_functions{'USE_PORT_UNREACHABLE'} eq 'yes') {
	$BOOL_USE_PORT_UNREACHABLE = 1;
}

vLogHTML("<TABLE>");
vLogHTML("<TR>");
vLogHTML("<TD>ICMP_TYPE_CODE_SELECTOR_SUPPORT</TD>");
vLogHTML("<TD>:</TD>");
vLogHTML(sprintf("<TD>%s</TD>",
	$BOOL_ICMP_TYPE_CODE_SELECTOR_SUPPORT? 'true': 'false'));
vLogHTML("</TR>");
vLogHTML("<TR>");
vLogHTML("<TD>PASSIVE_NODE</TD>");
vLogHTML("<TD>:</TD>");
vLogHTML(sprintf("<TD>%s</TD>",
	$BOOL_PASSIVE_NODE? 'true': 'false'));
vLogHTML("</TR>");
vLogHTML("<TR>");
vLogHTML("<TD>USE_PORT_UNREACHABLE</TD>");
vLogHTML("<TD>:</TD>");
vLogHTML(sprintf("<TD>%s</TD>",
	$BOOL_USE_PORT_UNREACHABLE? 'true': 'false'));
vLogHTML("</TR>");
vLogHTML("</TABLE>");
vLogHTML("<HR>");



#----- Initilize target SA, SPD
vLogHTML("<FONT SIZE=3>*** Target initialization phase ***</FONT><BR>");
ipsecClearAll();

#----- Start capturing
vCapture($IF);



if($BOOL_ICMP_TYPE_CODE_SELECTOR_SUPPORT) {
	if($BOOL_PASSIVE_NODE) {
		if($BOOL_USE_PORT_UNREACHABLE) {
			UseDestinationUnreachable();
		} else {
			UseNeighborSolicitation();
		}
	} else {
		UseEchoRequest();
	}
} else {
	vLogHTML("<FONT COLOR=\"red\">NOTREACHED</FONT><BR>");
	ipsecExitFatal();
	# NOTREACHED
}



#----- End capturing
vStop($IF);
ipsecExitPass();

# NOTREACHED



########################################################################



#----------------------------------------------------------------------#
#                                                                      #
# ICMPv6 Destination Unreachable                                       #
#                                                                      #
#                       (passive node)                                 #
#   HOST1 --- transport ---- NUT                                       #
#         --- spi=0x1000 --> SA1-I ICMPv6 Echo Request                 #
#         <-- spi=0x2000 --- SA2-O ICMPv6 Echo Reply                   #
#         <-- spi=0x3000 --- SA3-O ICMPv6 Destination Unreachable      #
#                                  (Port unreachable)                  #
#                                                                      #
#----------------------------------------------------------------------#

sub
UseDestinationUnreachable()
{
	$EALGO_FROM	= "ealgo_3descbc_hmacsha1_in";
	$EALGO_TO	= "ealgo_3descbc_hmacsha1_out_2";

	#----- Set Algorithms
	my $cpp = "-DEALGO_FROM_HOST1=$EALGO_FROM -DEALGO_TO_HOST1=$EALGO_TO";
	$cpp .= " -DSPI_TO_HOST_129=0x2000";
	vCPP($cpp);

	#----- Set SAD,SPD
	## HOST1 vs NUT, Inbound
	ipsecSetSAD(
		"src=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}",
		"dst=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}",
		"spi=0x1000",
		"mode=transport",
		"protocol=esp",
		"ealgo=3des-cbc",
		"ealgokey=$E_3descbc_in_key",
		"eauth=hmac-sha1",
		"eauthkey=$A_hmacsha1_in_key",
		"unique=10000"
	);

	ipsecSetSPD(
		"src=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}",
		"dst=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}",
		"upperspec=icmp6",
		"icmp6_type=128",
		"icmp6_code=0",
		"direction=in",
		"protocol=esp-auth",
		"mode=transport",
		"level=unique",
		"unique=10000"
	);

	## HOST1 vs NUT, Outbound
	ipsecSetSAD(
		"src=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}",
		"dst=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}",
		"spi=0x2000",
		"mode=transport",
		"protocol=esp",
		"ealgo=3des-cbc",
		"ealgokey=$E_3descbc_out_key_2",
		"eauth=hmac-sha1",
		"eauthkey=$A_hmacsha1_out_key_2",
		"unique=10001"
	);

	ipsecSetSPD(
		"src=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}",
		"dst=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}",
		"upperspec=icmp6",
		"icmp6_type=129",
		"icmp6_code=0",
		"direction=out",
		"protocol=esp-auth",
		"mode=transport",
		"level=unique",
		"unique=10001"
	);

	## HOST1 vs NUT, Outbound
	ipsecSetSAD(
		"src=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}",
		"dst=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}",
		"spi=0x3000",
		"mode=transport",
		"protocol=esp",
		"ealgo=3des-cbc",
		"ealgokey=$E_3descbc_out_key_3",
		"eauth=hmac-sha1",
		"eauthkey=$A_hmacsha1_out_key_3",
		"unique=10002"
	);

	ipsecSetSPD(
		"src=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}",
		"dst=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}",
		"upperspec=icmp6",
		"icmp6_type=1",
		"icmp6_code=4",
		"direction=out",
		"protocol=esp-auth",
		"mode=transport",
		"level=unique",
		"unique=10002"
	);

	## Enable IPsec
	ipsecEnable();

	#======================================================================
	vLogHTML("<FONT SIZE=3>*** Target testing phase ***<FONT><BR>");

	#----------------------------------------------------------------------#
	#                                                                      #
	#                        (passive node)                                #
	# HOST1_Link1              NUT_Link0                                   #
	#     (TN)                   (NUT)                                     #
	#      |                       |                                       #
	#      |------ ciphertext ---->| ICMPv6 Echo Request with ESP1         #
	#      |<----- ciphertext -----| ICMPv6 Echo Reply with ESP2           #
	#      |                       |     (Judgment #1)                     #
	#      |                       |                                       #
	#      V                       V                                       #
	#                                                                      #
	#----------------------------------------------------------------------#

	# ping TN(Host-1) <-> NUT

	($stat, %ret) = ipsecPing2NUT($IF,
		'echo_request_from_host1_esp1', 'echo_reply_to_host1_esp1');

	if ($stat ne 'GOT_REPLY') {
		vLogHTML("TN received no echo reply from End-Node(NUT) to HOST-1.<BR>");
		ipsecExitFail();
	}

	vLogHTML("TN received echo reply from End-Node(NUT) to HOST-1(TN).<BR>");
	vLogHTML(
		"<FONT COLOR=\"#006600\">Judgement #1: Select SA2-O OK</FONT><BR>");

	#----------------------------------------------------------------------#
	#                                                                      #
	#                        (passive node)                                #
	# HOST1_Link1              NUT_Link0                                   #
	#     (TN)                   (NUT)                                     #
	#      |                       |                                       #
	#      |------ plaintext ----->| UDP packet toward closed port         #
	#      |<----- ciphertext -----| ICMPv6 Destination Unreachable        #
	#      |                       |     with ESP3 (Judgment #2)           #
	#      |                       |                                       #
	#      V                       V                                       #
	#                                                                      #
	#----------------------------------------------------------------------#

	($stat, %ret) = ipsecPing2NUT($IF,
		'udp_from_host1', 'destination_unreachable_to_host1_esp3');

	if ($stat ne 'GOT_REPLY') {
		vLogHTML("TN received no echo reply from End-Node(NUT) to HOST-1.<BR>");
		ipsecExitFail();
	}

	vLogHTML("TN received destination unreachable ".
		"from End-Node(NUT) to HOST-1(TN).<BR>");
	vLogHTML(
		"<FONT COLOR=\"#006600\">Judgement #2: Select SA3-O OK</FONT><BR>");
}



#----------------------------------------------------------------------#
#                                                                      #
# ICMPv6 Neighbor Solicitation                                         #
#                                                                      #
#                       (passive node)                                 #
#   HOST1 --- transport ---- NUT                                       #
#         --- spi=0x1000 --> SA1-I  ICMPv6 Echo Request                #
#         <-- spi=0x2000 --- SA2-O  ICMPv6 Echo Reply                  #
#         <-- spi=0x3000 --- SA3-O  ICMPv6 Neighbor Solicitation       #
#         --- spi=0x4000 --> SA4-I  ICMPv6 Neighbor Advertisement      #
#                                                                      #
#----------------------------------------------------------------------#
sub
UseNeighborSolicitation()
{
	ipsecRebootToClean($IF, $IF1);

	#----- Set SAD,SPD
	## HOST1 vs NUT, Inbound
	ipsecSetSAD(
		"src=$IPSEC::IPsecAddr{IPSEC_HOST1_NET0_ADDR}",
		"dst=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}",
		"spi=0x1000",
		"mode=transport",
		"protocol=esp",
		"ealgo=3des-cbc",
		"ealgokey=$E_3descbc_in_key",
		"eauth=hmac-sha1",
		"eauthkey=$A_hmacsha1_in_key",
		"unique=10000"
	);

	ipsecSetSPD(
		"src=$IPSEC::IPsecAddr{IPSEC_HOST1_NET0_ADDR}",
		"dst=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}",
		"upperspec=icmp6",
		"icmp6_type=128",
		"icmp6_code=0",
		"direction=in",
		"protocol=esp-auth",
		"mode=transport",
		"level=unique",
		"unique=10000"
	);

	## HOST1 vs NUT, Outbound
	ipsecSetSAD(
		"src=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}",
		"dst=$IPSEC::IPsecAddr{IPSEC_HOST1_NET0_ADDR}",
		"spi=0x2000",
		"mode=transport",
		"protocol=esp",
		"ealgo=3des-cbc",
		"ealgokey=$E_3descbc_out_key_2",
		"eauth=hmac-sha1",
		"eauthkey=$A_hmacsha1_out_key_2",
		"unique=10001"
	);

	ipsecSetSPD(
		"src=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}",
		"dst=$IPSEC::IPsecAddr{IPSEC_HOST1_NET0_ADDR}",
		"upperspec=icmp6",
		"icmp6_type=129",
		"icmp6_code=0",
		"direction=out",
		"protocol=esp-auth",
		"mode=transport",
		"level=unique",
		"unique=10001"
	);



	## HOST1 vs NUT, Outbound
	ipsecSetSAD(
		"src=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}",
		"dst=$IPSEC::IPsecAddr{IPSEC_HOST1_NET0_ADDR}",
		"spi=0x3000",
		"mode=transport",
		"protocol=esp",
		"ealgo=3des-cbc",
		"ealgokey=$E_3descbc_out_key_3",
		"eauth=hmac-sha1",
		"eauthkey=$A_hmacsha1_out_key_3",
		"unique=10002"
	);

	ipsecSetSPD(
		"src=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}",
		"dst=$IPSEC::IPsecAddr{IPSEC_HOST1_NET0_ADDR}",
		"upperspec=icmp6",
		"icmp6_type=135",
		"icmp6_code=0",
		"direction=out",
		"protocol=esp-auth",
		"mode=transport",
		"level=unique",
		"unique=10002"
	);



	## HOST1 vs NUT, Inbound
	ipsecSetSAD(
		"src=$IPSEC::IPsecAddr{IPSEC_HOST1_NET0_ADDR}",
		"dst=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}",
		"spi=0x4000",
		"mode=transport",
		"protocol=esp",
		"ealgo=3des-cbc",
		"ealgokey=$E_3descbc_in_key_4",
		"eauth=hmac-sha1",
		"eauthkey=$A_hmacsha1_in_key_4",
		"unique=10003"
	);

	ipsecSetSPD(
		"src=$IPSEC::IPsecAddr{IPSEC_HOST1_NET0_ADDR}",
		"dst=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}",
		"upperspec=icmp6",
		"icmp6_type=136",
		"icmp6_code=0",
		"direction=in",
		"protocol=esp-auth",
		"mode=transport",
		"level=unique",
		"unique=10003"
	);



	## Enable IPsec
	ipsecEnable();



	#======================================================================
	vLogHTML("<FONT SIZE=3>*** Target testing phase ***<FONT><BR>");



	#----------------------------------------------------------------------#
	#                                                                      #
	#                    (passive node)                                    #
	# HOST1_Link0          NUT_Link0                                       #
	#     (TN)               (NUT)                                         #
	#      |                   |                                           #
	#    [NONE]              [NONE]                                        #
	#      |                   |                                           #
	# [INCOMPLETE]             |                                           #
	#      |                   |                                           #
	#      |---- plaintext --->| ICMPv6 Neighbor Solicitation (multicast)  #
	#      |                   |                                           #
	#      |                [STALE]                                        #
	#      |                   |                                           #
	#      |<--- plaintext ----| ICMPv6 Neighbor Advertisement             #
	#      |                   |     (Judgment #1)                         #
	#      |                   |                                           #
	# [REACHABLE]           [DELAY]                                        #
	#      |                   |                                           #
	#      V                   V                                           #
	#                                                                      #
	#----------------------------------------------------------------------#

	my $cpp = '';

	if($V6evalTool::NutDef{'Type'} eq 'host') {
		$cpp .= "-DISROUTER=0 ";
	} elsif($V6evalTool::NutDef{'Type'} eq 'router') {
		$cpp .= "-DISROUTER=1 ";
	} else {
		$cpp .= "-DISROUTER=any ";
	}

	vCPP($cpp);

	vClear($IF);

	vSend($IF, 'onlink_ns_mcast_plaintext');

	my %ret = vRecv($IF, 3, 0, 0, 'onlink_na_plaintext');
	if($ret{'recvFrame'} ne 'onlink_na_plaintext') {
		vLogHTML('<FONT COLOR="#FF0000"><B>Could\'t observe NS</B></FONT><BR>');
		ipsecExitFail();
	}



	#----------------------------------------------------------------------#
	#                                                                      #
	#                    (passive node)                                    #
	# HOST1_Link0          NUT_Link0                                       #
	#     (TN)               (NUT)                                         #
	#      |                   |                                           #
	# [REACHABLE]           [DELAY]                                        #
	#      |                   |                                           #
	#      |---- ciphertext -->| ICMPv6 Echo Request with ESP1             #
	#      |<--- ciphertext ---| ICMPv6 Echo Reply with ESP2               #
	#      |                   |     (Judgment #2)                         #
	#      |                   |                                           #
	#      V                   V                                           #
	#                                                                      #
	#----------------------------------------------------------------------#

	$EALGO_FROM	= "ealgo_3descbc_hmacsha1_in";
	$EALGO_TO	= "ealgo_3descbc_hmacsha1_out_2";

	#----- Set Algorithms
	my $cpp = "-DEALGO_FROM_HOST1=$EALGO_FROM -DEALGO_TO_HOST1=$EALGO_TO";
	$cpp .= " -DSPI_TO_HOST_129=0x2000";
	vCPP($cpp);

	vClear($IF);

	vSend($IF, 'echo_request_from_host1_esp1_onlink');

	%ret = vRecv($IF, 3, 0, 0, 'echo_reply_to_host1_esp1_onlink');
	if($ret{'recvFrame'} ne 'echo_reply_to_host1_esp1_onlink') {
		vLogHTML('<FONT COLOR="#FF0000"><B>'.
			'Could\'t observe Echo Request</B></FONT><BR>');
		ipsecExitFail();
	}



	#----------------------------------------------------------------------#
	#                                                                      #
	#                    (passive node)                                    #
	# HOST1_Link0          NUT_Link0                                       #
	#     (TN)               (NUT)                                         #
	#      |                   |                                           #
	# [REACHABLE]           [DELAY]                                        #
	#      |                   |                                           #
	#      |                   * wait DELAY_FIRST_PROBE_TIME (5) seconds   #
	#      |                   |                                           #
	#      |                [PROBE]                                        #
	#      |                   |                                           #
	#      |<--- ciphertext ---| ICMPv6 Neighbor Solicitation with ESP3    #
	#      |                   |     (Judgment #3)                         #
	#      |---- ciphertext -->| ICMPv6 Neighbor Advertisement with ESP4   #
	#      |                   |                                           #
	#      |              [REACHABLE]                                      #
	#      |                   |                                           #
	#      V                   V                                           #
	#                                                                      #
	#----------------------------------------------------------------------#

	%ret = vRecv($IF, 8, 0, 0,
		'onlink_ns_ucast_ciphertext', 'onlink_ns_ucast_ciphertext_sll');
	if(($ret{'recvFrame'} ne 'onlink_ns_ucast_ciphertext') &&
		($ret{'recvFrame'} ne 'onlink_ns_ucast_ciphertext_sll')) {

		vLogHTML('<FONT COLOR="#FF0000"><B>'.
			'Could\'t observe NS</B></FONT><BR>');
		ipsecExitFail();
	}

	vClear($IF);
	vSend($IF, 'onlink_na_ciphertext');

	%ret = vRecv($IF, 3, 0, 0,
		'onlink_ns_ucast_ciphertext', 'onlink_ns_ucast_ciphertext_sll');
	if(($ret{'recvFrame'} eq 'onlink_ns_ucast_ciphertext') ||
		($ret{'recvFrame'} eq 'onlink_ns_ucast_ciphertext_sll')) {

		vLogHTML('<FONT COLOR="#FF0000"><B>'.
			'NA was not accepted by NUT</B></FONT><BR>');
		ipsecExitFail();
	}
}



#----------------------------------------------------------------------#
# ICMPv6 Echo Request                                                  #
#----------------------------------------------------------------------#
sub
UseEchoRequest()
{
#----- Set Algorithms
my $cpp = "-DEALGO_FROM_HOST1=$EALGO_FROM -DEALGO_TO_HOST1=$EALGO_TO";
$cpp .= " -DEALGO_FROM_HOST2=$EALGO_FROM2 -DEALGO_TO_HOST2=$EALGO_TO2";
vCPP($cpp);

#----- Set SAD,SPD
## HOST1 vs NUT, Inbound
ipsecSetSAD(
	"src=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}",
	"dst=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}",
	"spi=0x1000",
	"mode=transport",
	"protocol=esp",
	"ealgo=3des-cbc",
	"ealgokey=$E_3descbc_in_key",
	"eauth=hmac-sha1",
	"eauthkey=$A_hmacsha1_in_key",
	"unique=10000"
	);

ipsecSetSPD(
	"src=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}",
	"dst=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}",
	"upperspec=icmp6",
	"icmp6_type=128",
	"icmp6_code=0",
	"direction=in",
	"protocol=esp-auth",
	"mode=transport",
	"level=unique",
	"unique=10000"
	);

## HOST1 vs NUT, Outbound
ipsecSetSAD(
	"src=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}" ,
	"dst=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}" ,
	"spi=0x2000" ,
	"mode=transport" ,
	"protocol=esp" ,
	"ealgo=3des-cbc" ,
	"ealgokey=$E_3descbc_out_key" ,
	"eauth=hmac-sha1" ,
	"eauthkey=$A_hmacsha1_out_key",
	"unique=10001"
	);

ipsecSetSPD(
	"src=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}" ,
	"dst=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}" ,
	"upperspec=icmp6" ,
	"icmp6_type=128",
	"icmp6_code=0",
	"direction=out" ,
	"protocol=esp-auth" ,
	"mode=transport" ,
	"level=unique",
	"unique=10001"
	);

## HOST2 vs NUT, Inbound
ipsecSetSAD(
	"src=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}" ,
	"dst=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}" ,
	"spi=0x3000" ,
	"mode=transport" ,
	"protocol=esp" ,
	"ealgo=3des-cbc" ,
	"ealgokey=$E_3descbc_in_key_2" ,
	"eauth=hmac-sha1" ,
	"eauthkey=$A_hmacsha1_in_key_2",
	"unique=10002"
	);

ipsecSetSPD(
	"src=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}" ,
	"dst=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}" ,
	"upperspec=icmp6" ,
	"icmp6_type=129",
	"icmp6_code=0",
	"direction=in" ,
	"protocol=esp-auth" ,
	"mode=transport" ,
	"level=unique",
	"unique=10002"
	);

## HOST2 vs NUT, Outbound
ipsecSetSAD(
	"src=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}" ,
	"dst=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}" ,
	"spi=0x4000" ,
	"mode=transport" ,
	"protocol=esp" ,
	"ealgo=3des-cbc" ,
	"ealgokey=$E_3descbc_out_key_2" ,
	"eauth=hmac-sha1" ,
	"eauthkey=$A_hmacsha1_out_key_2",
	"unique=10003"
	);

ipsecSetSPD(
	"src=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}" ,
	"dst=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}" ,
	"upperspec=icmp6" ,
	"icmp6_type=129",
	"icmp6_code=0",
	"direction=out" ,
	"protocol=esp-auth" ,
	"mode=transport" ,
	"level=unique",
	"unique=10003"
	);

## Enable IPsec
ipsecEnable();

#======================================================================
vLogHTML("<FONT SIZE=3>*** Target testing phase ***<FONT><BR>");

# ping TN(Host-1) <-> NUT

($stat, %ret) = ipsecPing2NUT($IF, 'echo_request_from_host1_esp1', 'echo_reply_to_host1_esp1');

if ($stat ne 'GOT_REPLY') {
	vLogHTML("TN received no echo reply from End-Node(NUT) to HOST-1.<BR>");
	ipsecExitFail();
}

vLogHTML("TN received echo reply from End-Node(NUT) to HOST-1(TN).<BR>");
vLogHTML("<FONT COLOR=\"#006600\">Judgement #1: Select SA1-I OK</FONT><BR>");



vClear($IF);
if($V6evalTool::NutDef{System} ne 'manual'){
	if(vRemoteAsync("ping6.rmt",
		"addr=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}", "timeout=$timeout")) {

		vLogHTML("NUT couldn't send Echo Request.<BR>");
		ipsecExitFatal();
	}
} else {
	if(vRemote("ping6.rmt",
		"addr=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}", "timeout=$timeout")) {

		vLogHTML("NUT couldn't send Echo Request.<BR>");
		ipsecExitFatal();
	}
}

($stat, %ret) = ipsecPingFromNUT($IF, 'echo_request_to_host1_esp2', 'echo_reply_from_host1_esp2');

if($stat ne 'GOT_REQUEST') {
	vLogHTML("TN received no echo request from End-Node(NUT) to HOST-1.<BR>");
	ipsecExitFail();
}

vLogHTML("TN received echo request from End-Node(NUT) to HOST-1(TN).<BR>");
vLogHTML("<FONT COLOR=\"#006600\">Judgement #2: Select SA1-O OK</FONT><BR>");

if(($V6evalTool::NutDef{System} ne 'manual') && vRemoteAsyncWait()) {
	vLogHTML("NUT couldn't send Echo Request.<BR>");
	ipsecExitFatal();
}
}



######################################################################
__END__

=head1 NAME

  p2_HTR_E_SelectSPD_ICMP_Type - Select SPD (ICMP Type)
                     - End-Node Transport Mode ESP 3DES-CBC with HMAC-SHA1 authentication

=head1 TARGET

  End-Node

=head1 SYNOPSIS

=begin html
<PRE>
ICMP Case:
  <A HREF="./p2_HTR_E_SelectSPD_ICMP_Type.seq">p2_HTR_E_SelectSPD_ICMP_Type.seq</A> [-tooloption ...] -pkt <A HREF="./p2_HTR_E_ICMP_Type.def">p2_HTR_E_ICMP_Type.def</A>
    -tooloption : v6eval tool option
  See also <A HREF="./p2_HTR_ICMP_common.def">p2_HTR_ICMP_common.def</A>
  See also <A HREF="./p2_ALGO_common.def">p2_ALGO_common.def</A>
<BR>
UDP Case:
  <A HREF="./p2_HTR_E_SelectSPD_ICMP_Type.seq">p2_HTR_E_SelectSPD_ICMP_Type.seq</A> [-tooloption ...] -pkt <A HREF="./p2_HTR_E_UDP_common.def">p2_HTR_E_UDP_common.def</A>
    -tooloption : v6eval tool option
  See also <A HREF="./p2_HTR_UDP_common.def">p2_HTR_UDP_common.def</A>
  See also <A HREF="./p2_ALGO_common.def">p2_ALGO_common.def</A>
</PRE>

=end html

=head1 INITIALIZATION

=begin html
<P>
For details of Network Topology, see <A HREF="00README">00README</A>
</P>
<P>
Set NUT's SAD and SPD as following:
</P>
<PRE>
                  NUT
                   |
   ------------+---+-------- NET0
               |
             Router
               |
   --------+---+---+-------- NET1
           |       |
         HOST1   HOST2
<BR>
                NET1          NET0
    HOST1_NET1 ------ Router ------ NUT
               ===================> SA1-I Transport
               <=================== SA1-O Transport
               ===================> SA2-I Transport
               <=================== SA2-O Transport
</PRE>
<P>
Security Association Database (SAD)
</P>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SAD for SA1-I</center></TD></TR>
  <TR>
    <TD>source address</TD>
    <TD>HOST1_NET1</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR>
    <TD>SPI</TD>
    <TD>0x1000</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>transport</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>ESP algorithm</TD>
    <TD>3DES-CBC</TD></TR>
  <TR>
    <TD>ESP algorithm key</TD>
    <TD>ipv6readylogo3descbcin01</TD></TR>
  <TR>
    <TD>ESP authentication</TD>
    <TD>HMAC-SHA1</TD></TR>
  <TR>
    <TD>ESP authentication key</TD>
    <TD>ipv6readylogsha1in01</TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SAD for SA1-O</center></TD></TR>
  <TR>
    <TD>source address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>HOST1_NET1</TD></TR>
  <TR>
    <TD>SPI</TD>
    <TD>0x2000</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>transport</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>ESP algorithm</TD>
    <TD>3DES-CBC</TD></TR>
  <TR>
    <TD>ESP algorithm key</TD>
    <TD>ipv6readylogo3descbcout1</TD></TR>
  <TR>
    <TD>ESP authentication</TD>
    <TD>HMAC-SHA1</TD></TR>
  <TR>
    <TD>ESP authentication key</TD>
    <TD>ipv6readylogsha1out1</TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SAD for SA2-I</center></TD></TR>
  <TR>
    <TD>source address</TD>
    <TD>HOST2_NET1</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR>
    <TD>SPI</TD>
    <TD>0x3000</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>transport</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>ESP algorithm</TD>
    <TD>3DES-CBC</TD></TR>
  <TR>
    <TD>ESP algorithm key</TD>
    <TD>ipv6readylogo3descbcin02</TD></TR>
  <TR>
    <TD>ESP authentication</TD>
    <TD>HMAC-SHA1</TD></TR>
  <TR>
    <TD>ESP authentication key</TD>
    <TD>ipv6readylogsha1in02</TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SAD for SA2-O</center></TD></TR>
  <TR>
    <TD>source address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>HOST2_NET1</TD></TR>
  <TR>
    <TD>SPI</TD>
    <TD>0x4000</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>transport</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>ESP algorithm</TD>
    <TD>3DES-CBC</TD></TR>
  <TR>
    <TD>ESP algorithm key</TD>
    <TD>ipv6readylogo3descbcout2</TD></TR>
  <TR>
    <TD>ESP authentication</TD>
    <TD>HMAC-SHA1</TD></TR>
  <TR>
    <TD>ESP authentication key</TD>
    <TD>ipv6readylogsha1out2</TD></TR>
</TABLE>
<BR>
<BR>
<P>
Security Policy Database (SPD)
</P>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SPD for SA1-I</center></TD>
  <TR>
    <TD>source address</TD>
    <TD>HOST1_NET1</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR>
    <TD>upper spec</TD>
    <TD>any</TD></TR>
  <TR>
    <TD>direction</TD>
    <TD>in</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>transport</TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SPD for SA1-O</center></TD>
  <TR>
    <TD>source address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>HOST1_NET1</TD></TR>
  <TR>
    <TD>upper spec</TD>
    <TD>any</TD></TR>
  <TR>
    <TD>direction</TD>
    <TD>out</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>transport</TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SPD for SA2-I</center></TD>
  <TR>
    <TD>source address</TD>
    <TD>HOST2_NET1</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR>
    <TD>upper spec</TD>
    <TD>any</TD></TR>
  <TR>
    <TD>direction</TD>
    <TD>in</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>transport</TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SPD for SA2-O</center></TD>
  <TR>
    <TD>source address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>HOST2_NET1</TD></TR>
  <TR>
    <TD>upper spec</TD>
    <TD>any</TD></TR>
  <TR>
    <TD>direction</TD>
    <TD>out</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>transport</TD></TR>
</TABLE>

=end html

=head1 TEST PROCEDURE

=begin html
<PRE>
 Tester                      Target
   |                           |
   |-------------------------->| From HOST1_NET1
   |      ICMP Echo Request    |
   |        (with ESP)         |
   |                           |
   |<--------------------------| To HOST1_NET1
   |      ICMP Echo Reply      |
   |        (with ESP)         |
   |                           |
   |                           |
   |-------------------------->| From HOST2_NET1
   |      ICMP Echo Request    |
   |        (with ESP)         |
   |                           |
   |<--------------------------| To HOST2_NET1
   |      ICMP Echo Reply      |
   |        (with ESP)         |
   |                           |
   v                           v
</PRE>
<OL>
  <LI>Send &quot;ICMP Echo Request with ESP from HOST1_NET1&quot;
  <LI>Receive &quot;ICMP Echo Reply with ESP to HOST1_NET1&quot;
  <LI>Send &quot;ICMP Echo Request with ESP from HOST2_NET1&quot;
  <LI>Receive &quot;ICMP Echo Reply with ESP to HOST2_NET1&quot;
</OL>
<P>
Packet Description
</P>
<TABLE border="1">
  <TR bgcolor="#ffffbb">
    <TD colspan="3"><center>ICMP Echo Request with ESP from HOST1_NET1</center></TD></TR>
  <TR bgcolor="#ddffdd">
    <TD rowspan="2">IP Header</TD>
    <TD>Source Address</TD>
    <TD>HOST1_NET1</TD></TR>
  <TR bgcolor="#ddffdd">
    <TD>Destination Address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD rowspan="5">ESP</TD>
    <TD>SPI</TD>
    <TD>0x1000</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Algorithm</TD>
    <TD>3DES-CBC</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Key</TD>
    <TD>ipv6readylogo3descbcin01</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Algorithm</TD>
    <TD>HMAC-SHA1</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Key</TD>
    <TD>ipv6readylogsha1in01</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>ICMP</TD>
    <TD>Type</TD>
    <TD>128 (Echo Request)</TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR bgcolor="#ffffbb">
    <TD colspan="3"><center>ICMP Echo Reply with ESP to HOST1_NET1</center></TD></TR>
  <TR bgcolor="#ddffdd">
    <TD rowspan="2">IP Header</TD>
    <TD>Source Address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR bgcolor="#ddffdd">
    <TD>Destination Address</TD>
    <TD>HOST1_NET1</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD rowspan="5">ESP</TD>
    <TD>SPI</TD>
    <TD>0x2000</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Algorithm</TD>
    <TD>3DES-CBC</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Key</TD>
    <TD>ipv6readylogo3descbcout1</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Algorithm</TD>
    <TD>HMAC-SHA1</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Key</TD>
    <TD>ipv6readylogsha1out1</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>ICMP</TD>
    <TD>Type</TD>
    <TD>129 (Echo Reply)</TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR bgcolor="#ffffbb">
    <TD colspan="3"><center>ICMP Echo Request with ESP from HOST2_NET1</center></TD></TR>
  <TR bgcolor="#ddffdd">
    <TD rowspan="2">IP Header</TD>
    <TD>Source Address</TD>
    <TD>HOST2_NET1</TD></TR>
  <TR bgcolor="#ddffdd">
    <TD>Destination Address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD rowspan="5">ESP</TD>
    <TD>SPI</TD>
    <TD>0x3000</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Algorithm</TD>
    <TD>3DES-CBC</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Key</TD>
    <TD>ipv6readylogo3descbcin02</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Algorithm</TD>
    <TD>HMAC-SHA1</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Key</TD>
    <TD>ipv6readylogsha1in02</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>ICMP</TD>
    <TD>Type</TD>
    <TD>128 (Echo Request)</TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR bgcolor="#ffffbb">
    <TD colspan="3"><center>ICMP Echo Reply with ESP to HOST2_NET1</center></TD></TR>
  <TR bgcolor="#ddffdd">
    <TD rowspan="2">IP Header</TD>
    <TD>Source Address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR bgcolor="#ddffdd">
    <TD>Destination Address</TD>
    <TD>HOST2_NET1</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD rowspan="5">ESP</TD>
    <TD>SPI</TD>
    <TD>0x4000</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Algorithm</TD>
    <TD>3DES-CBC</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Key</TD>
    <TD>ipv6readylogo3descbcout2</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Algorithm</TD>
    <TD>HMAC-SHA1</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Key</TD>
    <TD>ipv6readylogsha1out2</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>ICMP</TD>
    <TD>Type</TD>
    <TD>129 (Echo Reply)</TD></TR>
</TABLE>
<BR>

=end html

=head1 JUDGEMENT

=begin html
<UL>
PASS:
    <UL>
        Step-2:&quot;ICMP Echo Reply with ESP to HOST1_NET1&quot; Recieved<BR>
        Step-4:&quot;ICMP Echo Reply with ESP to HOST2_NET1&quot; Recieved<BR>
    </UL>
</UL>

=end html

=head1 SEE ALSO

  perldoc V6evalTool

=begin html
<PRE>
  <A HREF="./IPSEC.html">IPSEC.html</A> IPsec Test Common Utility
</PRE>

=cut

