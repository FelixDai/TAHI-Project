#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/ipsec.p2/p2_HTR_E_Padding.seq,v 1.19 2005/04/20 04:56:23 ozoe Exp $
#
######################################################################
BEGIN {
	$V6evalTool::TestVersion = '$Name: V6PC_P2_IPsec_1_11_1 $ ';
}

use V6evalTool;
use IPSEC;

require './keys.pl';

######################################################################
#----- Set defalut value
$EALGO_FROM="ealgo_3descbc_hmacsha1_pad_in";
$EALGO_TO="ealgo_3descbc_hmacsha1_pad_out";

##----- get sequence arguments
foreach (@ARGV) {
	/^app_type=(\S+)/ && do {$IPSEC::APP_TYPE=$1; # APPLICATION TYPE
					next; };
#       /^ealgo_from=(\S+)/ && do {$EALGO_FROM=$1;    # ESP ENCRYPTION ALGORITHM FOR INBOUND PACKET
#                                       next; };
#       /^ealgo_to=(\S+)/   && do {$EALGO_TO=$1;      # ESP ENCRYPTION ALGORITHM FOR OUTBOUND PACKET
#                                       next; };
#       /^ealgo=(\S+)/      && do {$EALGO=$1;         # ESP ENCRYPTION ALGORITHM PACKET
#                                       next; };
#       /^eauth=(\S+)/      && do {$EAUTH=$1;         # ESP with AUTHENTICATION ALGORITHM FOR INBOUND PACKET
#                                       next; };
#       /^einkey=(\S+)/     && do {$E_IN_KEY=$$1;     # ESP ENCRYPTION KEY FOR INBOUND PACKET
#                                       next; };
#       /^eoutkey=(\S+)/    && do {$E_OUT_KEY=$$1;    # ESP ENCRYPTION KEY FOR OUTBOUND PACKET
#                                       next; };
#       /^ainkey=(\S+)/     && do {$A_IN_KEY=$$1;     # AH KEY FOR INBOUND PACKET
#                                       next; };
#       /^aoutkey=(\S+)/    && do {$A_OUT_KEY=$$1;    # AH KEY FOR OUTBOUND PACKET
#                                       next; };
	/^test_type=(\S+)/  && do {$TEST_TYPE=$1;     # TEST TYPE
					next; };
	/^support=(\S+)/    && do {$SUPPORT=$1;       # SUPPORT FUNCTION CHECK
					next; };
	seqERROR("Unknown sequence option '$_'");
}
#######################################################################

$IPSEC::pktdesc{'echo_request_from_host1_esp_pad255'}
	= 'Send Echo Request from Host1(TN) to Host2(NUT) Padding Length: 255';

my $IF = Link0;

#----- Check NUT type
ipsecCheckNUT(host, $TEST_TYPE, $SUPPORT);

#----- Initilize target SA, SPD
vLogHTML("<FONT SIZE=3>*** Target initialization phase ***</FONT><BR>");
ipsecClearAll();

#----- Start capturing
vCapture($IF);

#----- Set Algorithms
my $cpp = "-DEALGO_FROM_HOST1=$EALGO_FROM -DEALGO_TO_HOST1=$EALGO_TO";
$cpp .= " -DESP_FROM_HOST1=esp_from_host_pad -DESP_TO_HOST1=esp_to_host_pad";
$cpp .= " -DIPSEC_ECHO_DATA=echo_data_odd";
vCPP($cpp);

#----- Set SAD,SPD
## HOST1 vs NUT, Inbound
ipsecSetSAD(
	"src=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}" ,
	"dst=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}" ,
	"spi=0x1000" ,
	"mode=transport" ,
	"protocol=esp" ,
	"ealgo=3des-cbc" ,
	"ealgokey=$E_3descbc_in_key" ,
	"eauth=hmac-sha1" ,
	"eauthkey=$A_hmacsha1_in_key"
	);

ipsecSetSPD(
	"src=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}" ,
	"dst=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}" ,
	"upperspec=any" ,
	"direction=in" ,
	"protocol=esp-auth" ,
	"mode=transport" ,
	);

## HOST1 vs NUT, Outbound
ipsecSetSAD(
	"src=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}" ,
	"dst=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}" ,
	"spi=0x2000" ,
	"mode=transport" ,
	"protocol=esp" ,
	"ealgo=3des-cbc" ,
	"ealgokey=$E_3descbc_out_key" ,
	"eauth=hmac-sha1" ,
	"eauthkey=$A_hmacsha1_out_key"
	);

ipsecSetSPD(
	"src=$IPSEC::IPsecAddr{IPSEC_NUT_NET0_ADDR}" ,
	"dst=$IPSEC::IPsecAddr{IPSEC_HOST1_NET1_ADDR}" ,
	"upperspec=any" ,
	"direction=out" ,
	"protocol=esp-auth" ,
	"mode=transport" ,
	);

## Enable IPsec
ipsecEnable();

#======================================================================
vLogHTML("<FONT SIZE=3>*** Target testing phase ***</FONT><BR>");

# ping TN(Host1) <-> NUT

($stat, %ret) = ipsecPing2NUT($IF, 'echo_request_from_host1_esp', 'echo_reply_to_host1_esp');

if ($stat ne 'GOT_REPLY') {
	vLogHTML("TN received no echo reply from NUT to HOST1.<BR>");
	ipsecExitFail();
}

vLogHTML("TN received echo reply from NUT to HOST1.<BR>");

#----- Padding check
if ($IPSEC::test_debug > 3){
	foreach my $key (keys %ret) {
		vLogHTML("$key: $ret{$key}<BR>");
	}
}

my $icmp_echo_reply_header = undef;
my $icmp_echo_reply_data = undef;
my $dataoffset = undef;
my $padlength = undef;
if($IPSEC::APP_TYPE eq 'udp'){
	$dataoffset = $ret{'Frame_Ether.Packet_IPv6.Hdr_ESP.Decrypted.ESPPayload.Upp_UDP.Hdr_UDP.Length'};
	$padlength = $ret{'Frame_Ether.Packet_IPv6.Hdr_ESP.Decrypted.ESPPayload.Upp_UDP.Payload.PadLength'};
}
else{
	$icmp_echo_reply_header = 8;
	$icmp_echo_reply_data = 7;
	$dataoffset = $icmp_echo_reply_header + $icmp_echo_reply_data;
	$padlength = $ret{'Frame_Ether.Packet_IPv6.Hdr_ESP.Decrypted.ESPPayload.ICMPv6_EchoReply.Payload.PadLength'};
}
my $pl_len = 1; #Padding Length field
my $nh_len = 1; #Next Header field
my $blocksize = $dataoffset + $pl_len + $nh_len + $padlength;
vLogHTML("The block size: $blocksize<BR>") if $IPSEC::test_debug;

if(7<=$padlength && $padlength<=255){
	vLogHTML("Padding Length: $padlength<BR>");
}
else{
	vLogHTML("<FONT COLOR=\"#FF0000\">Padding Length ($padlength) is outof order.</FONT><BR>");
	ipsecExitFail();
}

my $remainder = $blocksize % 8;
if($padlength != 0 &&  $remainder == 0){
	vLogHTML("the size of a block ciphere: $blocksize<BR>");
	vLogHTML("<FONT COLOR=\"#006600\">Padding Length is OK.</FONT><BR>");
	vLogHTML("<FONT COLOR=\"#006600\">Judgement #1: Padding Length 7 is OK.</FONT><BR>");
}
else{
	vLogHTML("<FONT COLOR=\"#FF0000\">The block size ($blocksize) is invalid.</FONT><BR>");
	ipsecExitFail();
}

#----- Set Algorithms
$cpp = "-DEALGO_FROM_HOST1=$EALGO_FROM -DEALGO_TO_HOST1=$EALGO_TO";
$cpp .= " -DESP_FROM_HOST1=esp_from_host_pad2 -DESP_TO_HOST1=esp_to_host_pad2";
$cpp .= " -DPADDING_LENGTH=255";
if($IPSEC::APP_TYPE eq 'udp'){
	$cpp .= " -DNEXTHEADER_VALUE=17";
}
else{
	$cpp .= " -DNEXTHEADER_VALUE=58";
}
$cpp .= " -DIPSEC_ECHO_DATA=echo_data_odd";
vCPP($cpp);

# ping TN(Host1) <-> NUT

($stat, %ret) = ipsecPing2NUT($IF, 'echo_request_from_host1_esp_pad255', 'echo_reply_to_host1_esp');

if ($stat ne 'GOT_REPLY') {
	vLogHTML("TN received no echo reply from NUT to HOST1.<BR>");
	ipsecExitFail();
}

vLogHTML("TN received echo reply from NUT to HOST1.<BR>");

#----- Padding check
if ($IPSEC::test_debug > 3){
	foreach my $key (keys %ret) {
		vLogHTML("$key: $ret{$key}<BR>");
	}
}

$icmp_echo_reply_header = undef;
$icmp_echo_reply_data = undef;
$dataoffset = undef;
$padlength = undef;
if($IPSEC::APP_TYPE eq 'udp'){
	$dataoffset = $ret{'Frame_Ether.Packet_IPv6.Hdr_ESP.Decrypted.ESPPayload.Upp_UDP.Hdr_UDP.Length'};
	$padlength = $ret{'Frame_Ether.Packet_IPv6.Hdr_ESP.Decrypted.ESPPayload.Upp_UDP.Payload.PadLength'};
}
else{
	$icmp_echo_reply_header = 8;
	$icmp_echo_reply_data = 7;
	$dataoffset = $icmp_echo_reply_header + $icmp_echo_reply_data;
	$padlength = $ret{'Frame_Ether.Packet_IPv6.Hdr_ESP.Decrypted.ESPPayload.ICMPv6_EchoReply.Payload.PadLength'};
}
$pl_len = 1; #Padding Length field
$nh_len = 1; #Next Header field
$blocksize = $dataoffset + $pl_len + $nh_len + $padlength;
vLogHTML("The block size: $blocksize<BR>") if $IPSEC::test_debug;

if(7<=$padlength && $padlength<=255){
	vLogHTML("Padding Length: $padlength<BR>");
}
else{
	vLogHTML("<FONT COLOR=\"#FF0000\">Padding Length ($padlength) is outof order.</FONT><BR>");
	ipsecExitFail();
}

my $remainder = $blocksize % 8;
if($padlength != 0 &&  $remainder == 0){
	vLogHTML("the size of a block ciphere: $blocksize<BR>");
	vLogHTML("<FONT COLOR=\"#006600\">Padding Length is OK.</FONT><BR>");
	vLogHTML("<FONT COLOR=\"#006600\">Judgement #2: Padding Length 255 is OK.</FONT><BR>");
}
else{
	vLogHTML("<FONT COLOR=\"#FF0000\">The block size ($blocksize) is invalid.</FONT><BR>");
	ipsecExitFail();
}

#----- End capturing
vStop($IF);
ipsecExitPass();

######################################################################
__END__

=head1 NAME

  p2_HTR_E_Padding - Processing Padding 
                   - End-Node Transport Mode ESP 3DES-CBC with HMAC-SHA1 authentication using Padding

=head1 TARGET

  End-Node

=head1 SYNOPSIS

=begin html
<PRE>
ICMP Case:
  <A HREF="./p2_HTR_E_Padding.seq">p2_HTR_E_Padding.seq</A> [-tooloption ...] -pkt <A HREF="./p2_HTR_E_ICMP_common.def">p2_HTR_E_ICMP_common.def</A>
    -tooloption : v6eval tool option
  See also <A HREF="./p2_HTR_ICMP_common.def">p2_HTR_ICMP_common.def</A>
  See also <A HREF="./p2_ALGO_common.def">p2_ALGO_common.def</A>
<BR>
UDP Case:
  <A HREF="./p2_HTR_E_Padding.seq">p2_HTR_E_Padding.seq</A> [-tooloption ...] -pkt <A HREF="./p2_HTR_E_UDP_common.def">p2_HTR_E_UDP_common.def</A>
    -tooloption : v6eval tool option
  See also <A HREF="./p2_HTR_UDP_common.def">p2_HTR_UDP_common.def</A>
  See also <A HREF="./p2_ALGO_common.def">p2_ALGO_common.def</A>
</PRE>

=end html

=head1 INITIALIZATION

=begin html
<P>
For details of Network Topology, see <A HREF="00README">00README</A>
</P>
<P>
Set NUT's SAD and SPD as following:
</P>
<PRE>
                  NUT
                   |
   ------------+---+-------- NET0
               |
             Router
               |
   ------------+---+-------- NET1
                   |
                 HOST1
<BR>
                NET1          NET0
    HOST1_NET1 ------ Router ------ NUT
               ===================> SA1-I Transport
               <=================== SA1-O Transport
</PRE>
<P>
Security Association Database (SAD)
</P>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SAD for SA1-I</center></TD></TR>
  <TR>
    <TD>source address</TD>
    <TD>HOST1_NET1</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR>
    <TD>SPI</TD>
    <TD>0x1000</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>transport</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>ESP algorithm</TD>
    <TD>3DES-CBC</TD></TR>
  <TR>
    <TD>ESP algorithm key</TD>
    <TD>ipv6readylogo3descbcin01</TD></TR>
  <TR>
    <TD>ESP authentication</TD>
    <TD>HMAC-SHA1</TD></TR>
  <TR>
    <TD>ESP authentication key</TD>
    <TD>ipv6readylogsha1in01</TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SAD for SA1-O</center></TD></TR>
  <TR>
    <TD>source address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>HOST1_NET1</TD></TR>
  <TR>
    <TD>SPI</TD>
    <TD>0x2000</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>transport</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>ESP algorithm</TD>
    <TD>3DES-CBC</TD></TR>
  <TR>
    <TD>ESP algorithm key</TD>
    <TD>ipv6readylogo3descbcout1</TD></TR>
  <TR>
    <TD>ESP authentication</TD>
    <TD>HMAC-SHA1</TD></TR>
  <TR>
    <TD>ESP authentication key</TD>
    <TD>ipv6readylogsha1out1</TD></TR>
</TABLE>
<P>
Security Policy Database (SPD)
</P>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SPD for SA1-I</center></TD>
  <TR>
    <TD>source address</TD>
    <TD>HOST1_NET1</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR>
    <TD>upper spec</TD>
    <TD>any</TD></TR>
  <TR>
    <TD>direction</TD>
    <TD>in</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>transport</TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR>
    <TD colspan=2 bgcolor="#ffffbb"><center>SPD for SA1-O</center></TD>
  <TR>
    <TD>source address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>HOST1_NET1</TD></TR>
  <TR>
    <TD>upper spec</TD>
    <TD>any</TD></TR>
  <TR>
    <TD>direction</TD>
    <TD>out</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>transport</TD></TR>
</TABLE>

=end html

=head1 TEST PROCEDURE

=begin html
<PRE>
 Tester                      Target
   |                           |
   |-------------------------->| From HOST1_NET1 (Padding Length 7)
   |      ICMP Echo Request    |
   |        (with ESP)         |
   |                           |
   |<--------------------------| To HOST1_NET1
   |      ICMP Echo Reply      |
   |        (with ESP)         |
   |                           |
   |                           |
   |-------------------------->| From HOST1_NET1 (Padding Length 255)
   |      ICMP Echo Request    | 
   |        (with ESP)         |
   |                           |
   |<--------------------------| To HOST1_NET1
   |      ICMP Echo Reply      |
   |        (with ESP)         |
   |                           |
   v                           v
</PRE>
<OL>
  <LI>Send &quot;ICMP Echo Request with ESP from HOST1_NET1 1&quot; (Padding Length 7)
  <LI>Receive &quot;ICMP Echo Reply with ESP to HOST1_NET1&quot;
  <LI>Send &quot;ICMP Echo Request with ESP from HOST1_NET1 2&quot; (Padding Length 255)
  <LI>Receive &quot;ICMP Echo Reply with ESP to HOST1_NET1&quot;
</OL>
<P>
Packet Description
</P>
<TABLE border="1">
  <TR bgcolor="#ffffbb">
    <TD colspan="3"><center>ICMP Echo Request with ESP from HOST1_NET1 1 (Padding Length 7)</center></TD></TR>
  <TR bgcolor="#ddffdd">
    <TD rowspan="2">IP Header</TD>
    <TD>Source Address</TD>
    <TD>HOST1_NET1</TD></TR>
  <TR bgcolor="#ddffdd">
    <TD>Destination Address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD rowspan="6">ESP</TD>
    <TD>SPI</TD>
    <TD>0x1000</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Algorithm</TD>
    <TD>3DES-CBC</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Key</TD>
    <TD>ipv6readylogo3descbcin01</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Algorithm</TD>
    <TD>HMAC-SHA1</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Key</TD>
    <TD>ipv6readylogsha1in01</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Padding Length</TD>
    <TD>7</TD></TR>
  <TR bgcolor="#ddddff">
    <TD rowspan=2>ICMP</TD>
    <TD>Type</TD>
    <TD>128 (Echo Request)</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>Data Length</TD>
    <TD>7</TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR bgcolor="#ffffbb">
    <TD colspan="3"><center>ICMP Echo Reply with ESP to HOST1_NET1</center></TD></TR>
  <TR bgcolor="#ddffdd">
    <TD rowspan="2">IP Header</TD>
    <TD>Source Address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR bgcolor="#ddffdd">
    <TD>Destination Address</TD>
    <TD>HOST1_NET1</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD rowspan="6">ESP</TD>
    <TD>SPI</TD>
    <TD>0x2000</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Algorithm</TD>
    <TD>3DES-CBC</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Key</TD>
    <TD>ipv6readylogo3descbcout1</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Algorithm</TD>
    <TD>HMAC-SHA1</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Key</TD>
    <TD>ipv6readylogsha1out1</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Padding Length</TD>
    <TD>7+8n ( 0 &lt; n &lt; 31)</TD></TR>
  <TR bgcolor="#ddddff">
    <TD rowspan=2>ICMP</TD>
    <TD>Type</TD>
    <TD>129 (Echo Reply)</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>Data Length</TD>
    <TD>7</TD></TR>
</TABLE>
<BR>
<TABLE border="1">
  <TR bgcolor="#ffffbb">
    <TD colspan="3"><center>ICMP Echo Request with ESP from HOST1_NET1 2 (Padding Length 255)</center></TD></TR>
  <TR bgcolor="#ddffdd">
    <TD rowspan="2">IP Header</TD>
    <TD>Source Address</TD>
    <TD>HOST1_NET1</TD></TR>
  <TR bgcolor="#ddffdd">
    <TD>Destination Address</TD>
    <TD>NUT_NET0</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD rowspan="6">ESP</TD>
    <TD>SPI</TD>
    <TD>0x1000</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Algorithm</TD>
    <TD>3DES-CBC</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Key</TD>
    <TD>ipv6readylogo3descbcin01</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Algorithm</TD>
    <TD>HMAC-SHA1</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Authentication Key</TD>
    <TD>ipv6readylogsha1in01</TD></TR>
  <TR bgcolor="#ffdddd">
    <TD>Padding Length</TD>
    <TD>255</TD></TR>
  <TR bgcolor="#ddddff">
    <TD rowspan=2>ICMP</TD>
    <TD>Type</TD>
    <TD>128 (Echo Request)</TD></TR>
  <TR bgcolor="#ddddff">
    <TD>Data Length</TD>
    <TD>7</TD></TR>
</TABLE>

=end html

=head1 JUDGEMENT

=begin html
<UL>
PASS:
    <UL>
        Step-2:"ICMP Echo Reply with ESP to HOST1_NET1" Recieved<BR>
        Step-4:"ICMP Echo Reply with ESP to HOST1_NET1" Recieved<BR>
    </UL>
</UL>

=end html

=head1 SEE ALSO

  perldoc V6evalTool

=begin html
<PRE>
  <A HREF="./IPSEC.html">IPSEC.html</A> IPsec Test Common Utility
</PRE>

=cut
