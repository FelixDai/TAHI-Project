//
// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
// Yokogawa Electric Corporation.
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $Name: V6PC_P2_IPsec_1_11_1 $
//
// $TAHI: ct/ipsec.p2/p2_SGW_E_ICMP_common.def,v 1.17 2005/04/20 04:56:23 ozoe Exp $
//

#ifndef IPSEC_ECHO_DATA
#define IPSEC_ECHO_DATA echo_data
#endif

#include "./p2_ALGO_common.def"
#include "./p2_SGW_ICMP_common.def"

//======================================================================

Payload echo_data {
	data = {
		0x50, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x20, 0x69,
		0x73, 0x20, 0x5a, 0x65, 0x72, 0x6f
	};
}

Payload echo_data_big {
	data = repeat(0xff, 1452);
}

Payload echo_data_big_1352 {
	data = repeat(0xff, 1352);
}

// echo request data "cracked "
#define ECHO_DATA_CRACK	{ \
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, \
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa \
	}

Payload echo_data_odd {
	data = { 0x4f, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61};
}

//======================================================================
// Host2 <--> SGW(TN) <--> Router <--> SGW(NUT) <--> Host1
//======================================================================
//======================================================================
//
// ESP Tunnel with SGW1_NET2 (Echo Request from Host1 (Net0) to Host2 (Net3) on Net1)
//

#ifndef ESP_TO_SGW1_NET2
#define ESP_TO_SGW1_NET2 esp_to_sg_host2_seq
#endif

FEM_hdr_ipv6_exth(
	esptun_to_sg1_net2_echo_request_from_host1_net0_to_host2_net3,
	hether_nut2router,
	{
		_SRC(v6(IPSEC_NUT_NET1_ADDR));
		_DST(v6(IPSEC_SGW1_NET2_ADDR));
	},
	{
		header = _HDR_IPV6_NAME(esptun_to_sg1_net2_echo_request_from_host1_net0_to_host2_net3);
		exthdr = ESP_TO_SGW1_NET2;
		upper = _PACKET_IPV6_NAME(echo_request_from_host1_net0_to_host2_net3);
	}
)

//======================================================================
//
// ESP Tunnel with SGW1_NET2 (1st Fragment Echo Request from Host1 (Net0) to Host2 (Net3) on Net1)
//

FEM_hdr_ipv6_exth(
	esptun_to_sg1_net2_echo_request_from_host1_net0_to_host2_net3_1st,
	hether_nut2router,
	{
		_SRC(v6(IPSEC_NUT_NET1_ADDR));
		_DST(v6(IPSEC_SGW1_NET2_ADDR));
	},
	{
		header = _HDR_IPV6_NAME(esptun_to_sg1_net2_echo_request_from_host1_net0_to_host2_net3_1st);
		exthdr = ESP_TO_SGW1_NET2;
		upper = _PACKET_IPV6_NAME(echo_request_from_host1_net0_to_host2_net3_1st);
	}
)

//======================================================================
//
// ESP Tunnel with SGW1_NET2 (2nd Fragment Echo Request from Host1 (Net0) to Host2 (Net3) on Net1)
//

FEM_hdr_ipv6_exth(
	esptun_to_sg1_net2_echo_request_from_host1_net0_to_host2_net3_2nd,
	hether_nut2router,
	{
		_SRC(v6(IPSEC_NUT_NET1_ADDR));
		_DST(v6(IPSEC_SGW1_NET2_ADDR));
	},
	{
		header = _HDR_IPV6_NAME(esptun_to_sg1_net2_echo_request_from_host1_net0_to_host2_net3_2nd);
		exthdr = ESP_TO_SGW1_NET2;
		upper = _PACKET_IPV6_NAME(echo_request_from_host1_net0_to_host2_net3_2nd);
	}
)

//======================================================================
//
// ESP Tunnel with SGW1_NET2 (Echo Request from Host2 (Net3) to Host1 (Net0) on Net1)
//

#ifndef ESP_FROM_SGW1_NET2
#define ESP_FROM_SGW1_NET2 esp_from_sg_host2
#endif

FEM_hdr_ipv6_exth(
	esptun_from_sg1_net2_echo_request_from_host2_net3_to_host1_net0,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_SGW1_NET2_ADDR));
		_DST(v6(IPSEC_NUT_NET1_ADDR));
	},
	{
		header = _HDR_IPV6_NAME(esptun_from_sg1_net2_echo_request_from_host2_net3_to_host1_net0);
		exthdr = ESP_FROM_SGW1_NET2;
		upper = _PACKET_IPV6_NAME(echo_request_from_host2_net3_to_host1_net0);
	}
)

//======================================================================
//
// ESP Tunnel with SGW1_NET2 (Echo Reply from Host1 (Net0) to Host2 (Net3) on Net1)
//

#ifndef ESP_TO_SGW1_NET2
#define ESP_TO_SGW1_NET2 esp_to_sg_host2
#endif

FEM_hdr_ipv6_exth(
	esptun_to_sg1_net2_echo_reply_from_host1_net0_to_host2_net3,
	hether_nut2router,
	{
		_SRC(v6(IPSEC_NUT_NET1_ADDR));
		_DST(v6(IPSEC_SGW1_NET2_ADDR));
	},
	{
		header = _HDR_IPV6_NAME(esptun_to_sg1_net2_echo_reply_from_host1_net0_to_host2_net3);
		exthdr = ESP_TO_SGW1_NET2;
		upper = _PACKET_IPV6_NAME(echo_reply_from_host1_net0_to_host2_net3);
	}
)

//======================================================================
//
// ESP Tunnel with SGW1_NET2 (Echo Reply from Host2 (Net3) to Host1 (Net0) on Net1) incremented Sequence Number 
//

#ifndef ESP_FROM_SGW1_NET2
#define ESP_FROM_SGW1_NET2 esp_from_sg_host2_seq2
#endif

FEM_hdr_ipv6_exth(
	esptun_from_sg1_net2_echo_request_from_host2_net3_to_host1_net0_seq2,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_SGW1_NET2_ADDR));
		_DST(v6(IPSEC_NUT_NET1_ADDR));
	},
	{
		header = _HDR_IPV6_NAME(esptun_from_sg1_net2_echo_request_from_host2_net3_to_host1_net0_seq2);
		exthdr = ESP_FROM_SGW1_NET2;
		upper = _PACKET_IPV6_NAME(echo_request_from_host2_net3_to_host1_net0);
	}
)

//======================================================================
// Host3 <--> SGW(TN) <--> Router <--> SGW(NUT) <--> Host1
//======================================================================
//======================================================================
//
// ESP Tunnel with SGW1_NET2 (Echo Request from Host3 (Net3) to Host1 (Net0) on Net1)
//

#ifndef ESP_FROM_SGW1_NET2_HOST3
#define ESP_FROM_SGW1_NET2_HOST3 esp_from_sg_host3
#endif

FEM_hdr_ipv6_exth(
	esptun_from_sg1_net2_echo_request_from_host3_net3_to_host1_net0,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_SGW1_NET2_ADDR));
		_DST(v6(IPSEC_NUT_NET1_ADDR));
	},
	{
		header = _HDR_IPV6_NAME(esptun_from_sg1_net2_echo_request_from_host3_net3_to_host1_net0);
		exthdr = ESP_FROM_SGW1_NET2_HOST3;
		upper = _PACKET_IPV6_NAME(echo_request_from_host3_net3_to_host1_net0);
	}
)

//======================================================================
//
// ESP Tunnel with SGW1_NET2 (Echo Reply from Host1 (Net0) to Host3 (Net3) on Net1)
//

#ifndef ESP_TO_SGW1_NET2_HOST3
#define ESP_TO_SGW1_NET2_HOST3 esp_to_sg_host3
#endif

FEM_hdr_ipv6_exth(
	esptun_to_sg1_net2_echo_reply_from_host1_net0_to_host3_net3,
	hether_nut2router,
	{
		_SRC(v6(IPSEC_NUT_NET1_ADDR));
		_DST(v6(IPSEC_SGW1_NET2_ADDR));
	},
	{
		header = _HDR_IPV6_NAME(esptun_to_sg1_net2_echo_reply_from_host1_net0_to_host3_net3);
		exthdr = ESP_TO_SGW1_NET2_HOST3;
		upper = _PACKET_IPV6_NAME(echo_reply_from_host1_net0_to_host3_net3);
	}
)

//======================================================================
// Host4 <--> SGW2(TN) <--> Router <--> SGW(NUT) <--> Host1
//======================================================================
//======================================================================
//
// ESP Tunnel with SGW2_NET2 (Echo Request from Host4 (Net4) to Host1 (Net0) on Net1)
//

#ifndef ESP_FROM_SGW2_NET2_HOST4
#define ESP_FROM_SGW2_NET2_HOST4 esp_from_sg2_host4
#endif

FEM_hdr_ipv6_exth(
	esptun_from_sg2_net2_echo_request_from_host4_net4_to_host1_net0,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_SGW2_NET2_ADDR));
		_DST(v6(IPSEC_NUT_NET1_ADDR));
	},
	{
		header = _HDR_IPV6_NAME(esptun_from_sg2_net2_echo_request_from_host4_net4_to_host1_net0);
		exthdr = ESP_FROM_SGW2_NET2_HOST4;
		upper = _PACKET_IPV6_NAME(echo_request_from_host4_net4_to_host1_net0);
	}
)

//======================================================================
//
// ESP Tunnel with SGW2_NET2 (Echo Reply from Host1 (Net0) to Host4 (Net4) on Net1)
//

#ifndef ESP_TO_SGW2_NET2_HOST4
#define ESP_TO_SGW2_NET2_HOST4 esp_to_sg2_host4
#endif

FEM_hdr_ipv6_exth(
	esptun_to_sg2_net2_echo_reply_from_host1_net0_to_host4_net4,
	hether_nut2router,
	{
		_SRC(v6(IPSEC_NUT_NET1_ADDR));
		_DST(v6(IPSEC_SGW2_NET2_ADDR));
	},
	{
		header = _HDR_IPV6_NAME(esptun_to_sg2_net2_echo_reply_from_host1_net0_to_host4_net4);
		exthdr = ESP_TO_SGW2_NET2_HOST4;
		upper = _PACKET_IPV6_NAME(echo_reply_from_host1_net0_to_host4_net4);
	}
)

//======================================================================
// Host2(TN) <-->  Router <--> SGW(NUT) <--> Host1(TN)
//======================================================================
//======================================================================
//
// ESP Tunnel with HOST2_NET2(End-Node) (Echo Request from Host3 (Net3) to Host1 (Net0) on Net1)

#ifndef ESP_FROM_HOST2_NET2
#define ESP_FROM_HOST2_NET2 esp_from_host2_net2
#endif

FEM_hdr_ipv6_exth(
	esptun_from_host2_net2_echo_request_from_host2_net2_to_host1_net0,
	hether_router2nut,
	{
		_DST(v6(IPSEC_NUT_NET1_ADDR));
		_SRC(v6(IPSEC_HOST2_NET2_ADDR));
	},
	{
		header = _HDR_IPV6_NAME(esptun_from_host2_net2_echo_request_from_host2_net2_to_host1_net0);
		exthdr = ESP_FROM_HOST2_NET2;
		upper = _PACKET_IPV6_NAME(echo_request_from_host2_net2_to_host1_net0);
	}
)

//======================================================================
//
// ESP Tunnel from HOST2_NET2(End-Node) (Echo Reply from HOST1_NET0 to HOST2_NET2)
//

#ifndef ESP_TO_HOST2_NET2
#define ESP_TO_HOST2_NET2 esp_to_host2_net2
#endif

FEM_hdr_ipv6_exth(
	esptun_to_host2_net2_echo_reply_from_host1_net0_to_host2_net2,
	hether_nut2router,
	{
		_SRC(v6(IPSEC_NUT_NET1_ADDR));
		_DST(v6(IPSEC_HOST2_NET2_ADDR));
	},
	{
		header = _HDR_IPV6_NAME(esptun_to_host2_net2_echo_reply_from_host1_net0_to_host2_net2);
		exthdr = ESP_TO_HOST2_NET2;
		upper = _PACKET_IPV6_NAME(echo_reply_from_host1_net0_to_host2_net2);
	}
)

//======================================================================
//
// Echo Request from Host1 IPsec ESP
// Modified ICMP data: "EchoData" -> "cracked "
//

// Common use Ether Header
Hdr_Ether hether_router2nut_0x86dd {
	SourceAddress=ether(IPSEC_ROUTER_NET1_MAC_ADDR);
	DestinationAddress=nutether();
	Type=0x86dd; // need to specify IPv6
}

// payload is modified
Frame_Ether esptun_from_sg1_net2_invalid_echo_request_from_host2_net3_to_host1_net0_seq2 {
	header=hether_router2nut_0x86dd;
	packet=echo_request_from_host2_net3_to_host1_net0_seq2_modpkt;
}

Payload echo_request_from_host2_net3_to_host1_net0_seq2_modpkt {
	data=substr(esptun_from_sg1_net2_echo_request_from_host2_net3_to_host1_net0_seq2, 14, 56);
	data=substr(esptun_from_sg1_net2_echo_request_from_host2_net3_to_host1_net0_seq2, 70, 8);
	data=substr(esptun_from_sg1_net2_echo_request_from_host2_net3_to_host1_net0_seq2, 78, 40);
	data=substr(esptun_from_sg1_net2_echo_request_from_host2_net3_to_host1_net0_seq2, 118, 8);
	data=ECHO_DATA_CRACK;	//crack data 14 byte
	data=substr(esptun_from_sg1_net2_echo_request_from_host2_net3_to_host1_net0_seq2, 140, 6);
}

//======================================================================
//
// ESP Tunnel with SGW1_NET2 (Echo Request from Host2 (Net3) to Host1 (Net0) on Net1) for Padding Check
//

#define PADDING_DATA_255 { \
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,  0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,  0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,  0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, \
	0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,  0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30,  0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,  0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, \
	0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,  0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50,  0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,  0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, \
	0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,  0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70,  0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,  0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, \
	0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88,  0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90,  0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,  0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, \
	0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8,  0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0,  0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8,  0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, \
	0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8,  0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0,  0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,  0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, \
	0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8,  0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0,  0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,  0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff \
}

// #define PADDING_LENGTH { 0xff }
// #define ESP_NEXTHEADER { 0x29 }

Payload echo_request_from_host2_net3_to_host1_net0_pad255{
	data = substr(echo_request_from_host2_net3_to_host1_net0_pad, 14, 55);
	data = PADDING_DATA_255;
//	data = PADDING_LENGTH;
//	data = NEXTHEADER_VALUE;
}

FEM_hdr_ipv6_exth(
	esptun_from_sg1_net2_echo_request_from_host2_net3_to_host1_net0_pad255,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_SGW1_NET2_ADDR));
		_DST(v6(IPSEC_NUT_NET1_ADDR));
	},
	{
		header = _HDR_IPV6_NAME(esptun_from_sg1_net2_echo_request_from_host2_net3_to_host1_net0_pad255);
		exthdr = ESP_FROM_SGW1_NET2;
		upper = echo_request_from_host2_net3_to_host1_net0_pad255;
	}
)

