//
// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
// Yokogawa Electric Corporation.
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $Name: V6PC_P2_IPsec_1_10_0 $
//
// $TAHI: ct/ipsec.p2/p2_HTR_E_ICMP_Type.def,v 1.3 2009/01/08 10:03:28 akisada Exp $
//

#include "./p2_ALGO_common.def"
#include "./p2_HTR_ICMP_common.def"



FEM_icmp6_echo_request_exth(
	echo_request_from_host1_esp1,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_HOST1_NET1_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
	},
	{
		header	= _HDR_IPV6_NAME(echo_request_from_host1_esp1);
		exthdr	= esp_from_host_128;
		upper	= _ICMPV6_NAME(echo_request_from_host1_esp1);
	},
	{
		payload = echo_data;
	}
)



#ifndef SPI_FROM_HOST_128
#define SPI_FROM_HOST_128	0x1000
#endif	// SPI_FROM_HOST_128

#ifndef EALGO_FROM_HOST_128
#define EALGO_FROM_HOST_128	ealgo_3descbc_hmacsha1_in
#endif	// EALGO_FROM_HOST_128

Hdr_ESP esp_from_host_128 {
	SPI	= SPI_FROM_HOST_128;
	SequenceNumber	= 1;
	algorithm	= EALGO_FROM_HOST_128;
}



FEM_icmp6_echo_request_exth(
	echo_request_to_host1_esp2,
	hether_nut2router,
	{
		_SRC(v6(IPSEC_NUT_NET0_ADDR));
		_DST(v6(IPSEC_HOST1_NET1_ADDR));
	},
	{
		header = _HDR_IPV6_NAME(echo_request_to_host1_esp2);
		exthdr = esp_to_host_128;
		upper = _ICMPV6_NAME(echo_request_to_host1_esp2);
	},
	{
		Identifier	= any;
		SequenceNumber	= any;
		payload = any;
	}
)



#ifndef SPI_TO_HOST_128
#define SPI_TO_HOST_128	0x2000
#endif	// SPI_TO_HOST_128

#ifndef EALGO_TO_HOST_128
#define EALGO_TO_HOST_128	ealgo_3descbc_hmacsha1_out
#endif	// EALGO_TO_HOST_128

Hdr_ESP esp_to_host_128 {
	SPI = SPI_TO_HOST_128;
	SequenceNumber = any;
	algorithm = EALGO_TO_HOST_128;
}



#ifndef ICMP_IDENTIFIER_DYN
#define ICMP_IDENTIFIER_DYN	0
#endif	// ICMP_IDENTIFIER_DYN

#ifndef ICMP_SEQUENCENUMBER_DYN
#define ICMP_SEQUENCENUMBER_DYN	0
#endif	// ICMP_SEQUENCENUMBER_DYN

#ifndef ESP_SEQUENCENUMBER_DYN
#define ESP_SEQUENCENUMBER_DYN	0
#endif	// ESP_SEQUENCENUMBER_DYN

FEM_icmp6_echo_reply_exth(
	echo_reply_from_host1_esp2,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_HOST1_NET1_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
	},
	{
		header	= _HDR_IPV6_NAME(echo_reply_from_host1_esp2);
		exthdr	= esp_from_host_129;
		upper	= _ICMPV6_NAME(echo_reply_from_host1_esp2);
	},
	{
		Identifier	= ICMP_IDENTIFIER_DYN;
		SequenceNumber	= ICMP_SEQUENCENUMBER_DYN;
		payload = echo_data_dyn;
	}
)



#ifndef SPI_FROM_HOST_129
#define SPI_FROM_HOST_129	0x3000
#endif	// SPI_FROM_HOST_129

#ifndef EALGO_FROM_HOST_129
#define EALGO_FROM_HOST_129	ealgo_3descbc_hmacsha1_in_2
#endif	// EALGO_FROM_HOST_129

Hdr_ESP esp_from_host_129 {
	SPI	= SPI_FROM_HOST_129;
	SequenceNumber	= ESP_SEQUENCENUMBER_DYN;
	algorithm	= EALGO_FROM_HOST_129;
}



FEM_icmp6_echo_reply_exth(
	echo_reply_to_host1_esp1,
	hether_nut2router,
	{
		_SRC(v6(IPSEC_NUT_NET0_ADDR));
		_DST(v6(IPSEC_HOST1_NET1_ADDR));
	},
	{
		header = _HDR_IPV6_NAME(echo_reply_to_host1_esp1);
		exthdr = esp_to_host_129;
		upper = _ICMPV6_NAME(echo_reply_to_host1_esp1);
	},
	{
		payload = echo_data;
	}
)



#ifndef SPI_TO_HOST_129
#define SPI_TO_HOST_129	0x4000
#endif	// SPI_TO_HOST_129

#ifndef EALGO_TO_HOST_129
#define EALGO_TO_HOST_129	ealgo_3descbc_hmacsha1_out_2
#endif	// EALGO_TO_HOST_129

Hdr_ESP esp_to_host_129 {
	SPI = SPI_TO_HOST_129;
	SequenceNumber = any;
	algorithm = EALGO_TO_HOST_129;
}


#ifndef ECHO_DATA_DYN
#define ECHO_DATA_DYN	"0000000000000000"
#endif	// ECHO_DATA_DYN

Payload echo_data_dyn {
	data = hexstr(ECHO_DATA_DYN);
}

Payload echo_data {
	data = {
		0x50, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x20, 0x69,
		0x73, 0x20, 0x5a, 0x65, 0x72, 0x6f
	};
}



////////////////////////////////////////////////////////////////////////



#ifndef DESTINATION_PORT
#define DESTINATION_PORT	31337
#endif	// DESTINATION_PORT

FEM_udp6(
	udp_from_host1,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_HOST1_NET1_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
	},
	{
		SourcePort	= 10000;
		DestinationPort	= DESTINATION_PORT;
	},
	{
		header	= _HDR_UDP_NAME(udp_from_host1);
		payload	= echo_data;
	}
)



FEM_icmp6_destination_unreachable_exth(
	destination_unreachable_to_host1_esp3,
	hether_nut2router,
	{
		_SRC(v6(IPSEC_NUT_NET0_ADDR));
		_DST(v6(IPSEC_HOST1_NET1_ADDR));
	},
	{
		header = _HDR_IPV6_NAME(destination_unreachable_to_host1_esp3);
		exthdr = esp_to_host_destination_unreachable;
		upper = _ICMPV6_NAME(destination_unreachable_to_host1_esp3);
	},
	{
		Code	= 4;
		payload = payload_destination_unreachable;
	}
)

Payload payload_destination_unreachable {
	data	= right(_PACKET_IPV6_NAME(udp_from_host1), 0);
}



#ifndef SPI_TO_HOST_DESTINATION_UNREACHABLE
#define SPI_TO_HOST_DESTINATION_UNREACHABLE	0x3000
#endif	// SPI_TO_HOST_DESTINATION_UNREACHABLE

#ifndef EALGO_TO_HOST_DESTINATION_UNREACHABLE
#define EALGO_TO_HOST_DESTINATION_UNREACHABLE	ealgo_3descbc_hmacsha1_out_3
#endif	// EALGO_TO_HOST_DESTINATION_UNREACHABLE

Hdr_ESP esp_to_host_destination_unreachable {
	SPI = SPI_TO_HOST_DESTINATION_UNREACHABLE;
	SequenceNumber = any;
	algorithm = EALGO_TO_HOST_DESTINATION_UNREACHABLE;
}



////////////////////////////////////////////////////////////////////////



FEM_icmp6_ns(
	onlink_ns_mcast_plaintext,
	_HETHER_tn2nutsolnode,
	{
		HopLimit        = 255;
		_SRC(v6(IPSEC_HOST1_NET0_ADDR));
		_DST(_IPV6_SOLNODE_MCAST(v6(IPSEC_NUT_NET0_ADDR)));
	},
	{
		TargetAddress	= v6(IPSEC_NUT_NET0_ADDR);
		option	= _SLLOPT_tn;
	}
)



#ifndef ISROUTER
#define ISROUTER	0
#endif	// ISROUTER

FEM_icmp6_na(
	onlink_na_plaintext,
	_HETHER_nut2tn,
	{
		HopLimit	= 255;
		_SRC(oneof(nutv6(), v6(IPSEC_NUT_NET0_ADDR)));
		_DST(v6(IPSEC_HOST1_NET0_ADDR));
	},
	{
		RFlag	= ISROUTER;
		SFlag	= 1;
		OFlag	= 1;
		TargetAddress	= v6(IPSEC_NUT_NET0_ADDR);
		option	= _TLLOPT_nut;
	}
)



FEM_icmp6_echo_request_exth(
	echo_request_from_host1_esp1_onlink,
	_HETHER_tn2nut,
	{
		_SRC(v6(IPSEC_HOST1_NET0_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
	},
	{
		header	= _HDR_IPV6_NAME(echo_request_from_host1_esp1_onlink);
		exthdr	= esp_from_host_128;
		upper	= _ICMPV6_NAME(echo_request_from_host1_esp1_onlink);
	},
	{
		payload = echo_data;
	}
)



FEM_icmp6_echo_reply_exth(
	echo_reply_to_host1_esp1_onlink,
	_HETHER_nut2tn,
	{
		_SRC(v6(IPSEC_NUT_NET0_ADDR));
		_DST(v6(IPSEC_HOST1_NET0_ADDR));
	},
	{
		header = _HDR_IPV6_NAME(echo_reply_to_host1_esp1_onlink);
		exthdr = esp_to_host_129;
		upper = _ICMPV6_NAME(echo_reply_to_host1_esp1_onlink);
	},
	{
		payload = echo_data;
	}
)



FEM_icmp6_ns_exth(
	onlink_ns_ucast_ciphertext,
	_HETHER_nut2tn,
	{
		HopLimit	= 255;
		_SRC(v6(IPSEC_NUT_NET0_ADDR));
		_DST(v6(IPSEC_HOST1_NET0_ADDR));
	},
	{
		header	= _HDR_IPV6_NAME(onlink_ns_ucast_ciphertext);
		exthdr	= esp_to_host_destination_unreachable;
		upper	= _ICMPV6_NAME(onlink_ns_ucast_ciphertext);
	},
	{
		TargetAddress	= v6(IPSEC_HOST1_NET0_ADDR);
	}
)



FEM_icmp6_ns_exth(
	onlink_ns_ucast_ciphertext_sll,
	_HETHER_nut2tn,
	{
		HopLimit	= 255;
		_SRC(v6(IPSEC_NUT_NET0_ADDR));
		_DST(v6(IPSEC_HOST1_NET0_ADDR));
	},
	{
		header	= _HDR_IPV6_NAME(onlink_ns_ucast_ciphertext_sll);
		exthdr	= esp_to_host_destination_unreachable;
		upper	= _ICMPV6_NAME(onlink_ns_ucast_ciphertext_sll);
	},
	{
		TargetAddress	= v6(IPSEC_HOST1_NET0_ADDR);
		option	= _SLLOPT_nut;
	}
)



FEM_icmp6_na_exth(
	onlink_na_ciphertext,
	_HETHER_tn2nut,
	{
		HopLimit	= 255;
		_SRC(v6(IPSEC_HOST1_NET0_ADDR));
		_DST(v6(IPSEC_NUT_NET0_ADDR));
	},
	{
		header	= _HDR_IPV6_NAME(onlink_na_ciphertext);
		exthdr	= esp_to_host_neighbor_advertisement;
		upper	= _ICMPV6_NAME(onlink_na_ciphertext);
	},
	{
		RFlag	= 0;
		SFlag	= 1;
		OFlag	= 1;
		TargetAddress	= v6(IPSEC_HOST1_NET0_ADDR);
		option	= _TLLOPT_tn;
	}
)



#ifndef SPI_TO_HOST_NEIGHBOR_ADVERTISEMENT
#define SPI_TO_HOST_NEIGHBOR_ADVERTISEMENT	0x4000
#endif	// SPI_TO_HOST_NEIGHBOR_ADVERTISEMENT

#ifndef EALGO_TO_HOST_NEIGHBOR_ADVERTISEMENT
#define EALGO_TO_HOST_NEIGHBOR_ADVERTISEMENT	ealgo_3descbc_hmacsha1_in_4
#endif	// EALGO_TO_HOST_NEIGHBOR_ADVERTISEMENT

Hdr_ESP esp_to_host_neighbor_advertisement {
	SPI = SPI_TO_HOST_NEIGHBOR_ADVERTISEMENT;
	SequenceNumber = 1;
	algorithm = EALGO_TO_HOST_NEIGHBOR_ADVERTISEMENT;
}
