//
// Copyright (C) IPv6 Promotion Council,
// NIPPON TELEGRAPH AND TELEPHONE CORPORATION (NTT),
// Yokogwa Electoric Corporation, YASKAWA INFORMATION SYSTEMS Corporation
// and NTT Advanced Technology Corporation(NTT-AT) All rights reserved.
// 
// Technology Corporation.
// 
// Redistribution and use of this software in source and binary forms, with 
// or without modification, are permitted provided that the following 
// conditions and disclaimer are agreed and accepted by the user:
// 
// 1. Redistributions of source code must retain the above copyright 
// notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright 
// notice, this list of conditions and the following disclaimer in the 
// documentation and/or other materials provided with the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project which 
// is related to this software (hereinafter referred to as "project") nor 
// the names of the contributors may be used to endorse or promote products 
// derived from this software without specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written 
// notification to the copyrighters. However, using this software for the 
// purpose of testing or evaluating any products including merchantable 
// products may be permitted without any notification to the copyrighters.
// 
// 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
//

/*----------------------------------------------------------------------------*
 *
 *  General
 *
 *----------------------------------------------------------------------------*/
#ifndef SRC_MAC_ANY
#define SRC_MAC_ANY         "00:00:00:00:00:00"
#endif

#define SRC_ETHER_ANY       ether(SRC_MAC_ANY)

#ifndef DEST_MAC_ANY
#define DEST_MAC_ANY        "00:00:00:00:00:00"
#endif

#define DEST_ETHER_ANY      ether(DEST_MAC_ANY)

#ifndef TARGET_MAC_ANY
#define TARGET_MAC_ANY      "00:00:00:00:00:00"
#endif

#define TARGET_ETHER_ANY    ether(TARGET_MAC_ANY)

#ifndef IP_ADDR_UNSPEC
#define IP_ADDR_UNSPEC      "::"
#endif

#ifndef IP_SRC_ADDR_ANY
#define IP_SRC_ADDR_ANY     "::"
#endif

#ifndef IP_DEST_ADDR_ANY
#define IP_DEST_ADDR_ANY    "::"
#endif

#ifndef IP_TAGET_ADDR_ANY
#define IP_TAGET_ADDR_ANY   "::"
#endif

#ifndef PREFIX_INFO_ANY
#define PREFIX_INFO_ANY     "fe80::200:ff:fe00:a0a0"
#endif

// for receive
_HETHER_define(_HETHER_any, any, any)

// for send
_HETHER_define(_HETHER_any_to_any, SRC_ETHER_ANY, DEST_ETHER_ANY)

// #define LLOCAL_PREFIX           "fe80::"
// #define LINK_LOCAL_MULTICAST    "ff02::1"

/*----------------------------------------------------------------------------*
 *
 *  Link0 Ether Frame Header
 *
 *----------------------------------------------------------------------------*/

#define NUT0_ETHER_ADDR     ether(NUT0_MAC_ADDR)

#define NUT0_SOL_ETHER_ADDR ether(NUT0_SOL_MAC_ADDR)

#define HA0_ETHER_ADDR      ether(HA0_MAC_ADDR)

#define HA1_ETHER_ADDR      ether(HA1_MAC_ADDR)

#define HA2_ETHER_ADDR      ether(HA2_MAC_ADDR)

#define NODE0_ETHER_ADDR    ether(NODE0_MAC_ADDR)

// #define CN00_ETHER_ADDR     ether(CN00_MAC_ADDR)

// NUT0 -> NUT0 (solnode for DAD)
_HETHER_define(_HETHER_nut0_dad,            NUT0_ETHER_ADDR, NUT0_SOL_ETHER_ADDR)

// NUT0 -> ALL
_HETHER_define(_HETHER_nut0_to_all,         NUT0_ETHER_ADDR, v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))

// NUT0 -> HA0
_HETHER_define(_HETHER_nut0_to_ha0,         NUT0_ETHER_ADDR, HA0_ETHER_ADDR)
_HETHER_define(_HETHER_nut0_to_ha0solnode,  NUT0_ETHER_ADDR, _ETHER_SOLNODE_MCAST(v6ether(HA0_MAC_ADDR)))

// NUT0 -> HA1
_HETHER_define(_HETHER_nut0_to_ha1,         NUT0_ETHER_ADDR, HA1_ETHER_ADDR)
_HETHER_define(_HETHER_nut0_to_ha1solnode,  NUT0_ETHER_ADDR, _ETHER_SOLNODE_MCAST(v6(HA1_GLOBAL_UCAST)))

// NUT0 -> HA2
_HETHER_define(_HETHER_nut0_to_ha2,         NUT0_ETHER_ADDR, HA2_ETHER_ADDR)
_HETHER_define(_HETHER_nut0_to_ha2solnode,  NUT0_ETHER_ADDR, _ETHER_SOLNODE_MCAST(v6(HA2_GLOBAL_UCAST)))

// NUT0 -> NODE0
_HETHER_define(_HETHER_nut0_to_node0,        NUT0_ETHER_ADDR, NODE0_ETHER_ADDR)
_HETHER_define(_HETHER_nut0_to_node0solnode, NUT0_ETHER_ADDR, _ETHER_SOLNODE_MCAST(v6ether(NODE0_MAC_ADDR)))

// HA0 -> NUT0
_HETHER_define(_HETHER_ha0_to_all,          HA0_ETHER_ADDR, v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))
_HETHER_define(_HETHER_ha0_to_nut0,         HA0_ETHER_ADDR, NUT0_ETHER_ADDR)
_HETHER_define(_HETHER_ha0_to_nut0solnode,  HA0_ETHER_ADDR, NUT0_SOL_ETHER_ADDR)

// HA1 -> NUT0
_HETHER_define(_HETHER_ha1_to_all,          HA1_ETHER_ADDR, v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))
_HETHER_define(_HETHER_ha1_to_nut0,         HA1_ETHER_ADDR, NUT0_ETHER_ADDR)
_HETHER_define(_HETHER_ha1_to_nut0solnode,  HA1_ETHER_ADDR, NUT0_SOL_ETHER_ADDR)

// HA2 -> NUT0
_HETHER_define(_HETHER_ha2_to_all,          HA2_ETHER_ADDR, v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))
_HETHER_define(_HETHER_ha2_to_nut0,         HA2_ETHER_ADDR, NUT0_ETHER_ADDR)
_HETHER_define(_HETHER_ha2_to_nut0solnode,  HA2_ETHER_ADDR, NUT0_SOL_ETHER_ADDR)

// NODE0 -> NUT0
_HETHER_define(_HETHER_node0_to_allrouter,    NODE0_ETHER_ADDR, v62ethermulti(v6(_ALLROUTERS_MCAST_ADDR)))
_HETHER_define(_HETHER_node0_to_all,          NODE0_ETHER_ADDR, v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))
_HETHER_define(_HETHER_node0_to_nut0,         NODE0_ETHER_ADDR, NUT0_ETHER_ADDR)
_HETHER_define(_HETHER_node0_to_nut0solnode,  NODE0_ETHER_ADDR, NUT0_SOL_ETHER_ADDR)

/*----------------------------------------------------------------------------*
 *
 *  LinkX Ether Frame Header
 *
 *----------------------------------------------------------------------------*/

#define NUTX_ETHER_ADDR     ether(NUTX_MAC_ADDR)

#define NUTX_SOL_ETHER_ADDR ether(NUTX_SOL_MAC_ADDR)

#define R1_ETHER_ADDR       ether(R1_MAC_ADDR)

#define NODE1_ETHER_ADDR    ether(NODE1_MAC_ADDR)

#define CN0X_ETHER_ADDR     ether(CN0X_MAC_ADDR)

// NUTX -> NUTX (solnode for DAD)
_HETHER_define(_HETHER_nutx_dad,            NUTX_ETHER_ADDR, NUTX_SOL_ETHER_ADDR)

// NUTX -> ALL
_HETHER_define(_HETHER_nutx_to_all,         NUTX_ETHER_ADDR, v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))

// NUTX -> R1
_HETHER_define(_HETHER_nutx_to_r1,          NUTX_ETHER_ADDR, R1_ETHER_ADDR)
_HETHER_define(_HETHER_nutx_to_r1solnode,   NUTX_ETHER_ADDR, _ETHER_SOLNODE_MCAST(v6ether(R1_MAC_ADDR)))

// NUTX -> NODE1
_HETHER_define(_HETHER_nutx_to_node1,        NUTX_ETHER_ADDR, NODE1_ETHER_ADDR)
_HETHER_define(_HETHER_nutx_to_node1solnode, NUTX_ETHER_ADDR, _ETHER_SOLNODE_MCAST(v6ether(NODE1_MAC_ADDR)))

// NUTX -> CN0X
_HETHER_define(_HETHER_nutx_to_cn0x,        NUTX_ETHER_ADDR, CN0X_ETHER_ADDR)
_HETHER_define(_HETHER_nutx_to_cn0xsolnode, NUTX_ETHER_ADDR, _ETHER_SOLNODE_MCAST(v6ether(CN0X_MAC_ADDR)))

// R1 -> NUTX
_HETHER_define(_HETHER_r1_to_all,           R1_ETHER_ADDR, v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))
_HETHER_define(_HETHER_r1_to_nutx,          R1_ETHER_ADDR, NUTX_ETHER_ADDR)
_HETHER_define(_HETHER_r1_to_nutxsolnode,   R1_ETHER_ADDR, NUTX_SOL_ETHER_ADDR)

// NODE1 -> NUTX
_HETHER_define(_HETHER_node1_to_allrouter,    NODE1_ETHER_ADDR, v62ethermulti(v6(_ALLROUTERS_MCAST_ADDR)))
_HETHER_define(_HETHER_node1_to_all,          NODE1_ETHER_ADDR, v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))
_HETHER_define(_HETHER_node1_to_nutx,         NODE1_ETHER_ADDR, NUTX_ETHER_ADDR)
_HETHER_define(_HETHER_node1_to_nutxsolnode,  NODE1_ETHER_ADDR, NUTX_SOL_ETHER_ADDR)

// CN0X -> NUTX
_HETHER_define(_HETHER_cn0x_to_nutx,        CN0X_ETHER_ADDR, NUTX_ETHER_ADDR)
_HETHER_define(_HETHER_cn0x_to_nutxsolnode, CN0X_ETHER_ADDR, NUTX_SOL_ETHER_ADDR)

/*----------------------------------------------------------------------------*
 *
 *  LinkY Ether Frame Header
 *
 *----------------------------------------------------------------------------*/

#define NUTY_ETHER_ADDR     ether(NUTY_MAC_ADDR)

#define NUTY_SOL_ETHER_ADDR ether(NUTY_SOL_MAC_ADDR)

#define R2_ETHER_ADDR       ether(R2_MAC_ADDR)

#define CN0Y_ETHER_ADDR     ether(CN0Y_MAC_ADDR)

// NUTY -> NUTY (solnode for DAD)
_HETHER_define(_HETHER_nuty_dad,            NUTY_ETHER_ADDR, NUTY_SOL_ETHER_ADDR)

// NUTY -> ALL
_HETHER_define(_HETHER_nuty_to_all,         NUTY_ETHER_ADDR, v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))

// NUTY -> R2
_HETHER_define(_HETHER_nuty_to_r2,          NUTY_ETHER_ADDR, R2_ETHER_ADDR)
_HETHER_define(_HETHER_nuty_to_r2solnode,   NUTY_ETHER_ADDR, _ETHER_SOLNODE_MCAST(v6ether(R2_MAC_ADDR)))

// NUTY -> CN0Y
_HETHER_define(_HETHER_nuty_to_cn0y,        NUTY_ETHER_ADDR, CN0Y_ETHER_ADDR)
_HETHER_define(_HETHER_nuty_to_cn0ysolnode, NUTY_ETHER_ADDR, _ETHER_SOLNODE_MCAST(v6ether(CN0Y_MAC_ADDR)))

// R2 -> NUTY
_HETHER_define(_HETHER_r2_to_all,           R2_ETHER_ADDR, v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))
_HETHER_define(_HETHER_r2_to_nuty,          R2_ETHER_ADDR, NUTY_ETHER_ADDR)
_HETHER_define(_HETHER_r2_to_nutysolnode,   R2_ETHER_ADDR, NUTY_SOL_ETHER_ADDR)

// CN0Y -> NUTY
_HETHER_define(_HETHER_cn0y_to_nuty,        CN0Y_ETHER_ADDR, NUTY_ETHER_ADDR)
_HETHER_define(_HETHER_cn0y_to_nutysolnode, CN0Y_ETHER_ADDR, NUTY_SOL_ETHER_ADDR)

/*----------------------------------------------------------------------------*
 *
 *  LinkZ "3ffe:501:ffff:104::" Address and Ether Frame Header
 *
 *----------------------------------------------------------------------------*/

#define NUTZ_ETHER_ADDR     ether(NUTZ_MAC_ADDR)

#define NUTZ_SOL_ETHER_ADDR ether(NUTZ_SOL_MAC_ADDR)

#define HA3_ETHER_ADDR      ether(HA3_MAC_ADDR)

#define CN0_ETHER_ADDR      ether(CN0_MAC_ADDR)

// #define CN1_ETHER_ADDR      ether(CN1_MAC_ADDR)

// NUTZ -> NUTZ (solnode for DAD)
_HETHER_define(_HETHER_nutz_dad,            NUTZ_ETHER_ADDR, NUTZ_SOL_ETHER_ADDR)

// NUTZ -> ALL
_HETHER_define(_HETHER_nutz_to_all,         NUTZ_ETHER_ADDR, v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))

// NUTZ -> HA3
_HETHER_define(_HETHER_nutz_to_ha3,         NUTZ_ETHER_ADDR, HA3_ETHER_ADDR)
_HETHER_define(_HETHER_nutz_to_ha3solnode,  NUTZ_ETHER_ADDR, _ETHER_SOLNODE_MCAST(v6ether(HA3_MAC_ADDR)))

// NUTZ -> CN0
_HETHER_define(_HETHER_nutz_to_cn0,         NUTZ_ETHER_ADDR, CN0_ETHER_ADDR)
_HETHER_define(_HETHER_nutz_to_cn0solnode,  NUTZ_ETHER_ADDR, _ETHER_SOLNODE_MCAST(v6ether(CN0_MAC_ADDR)))

// HA3 -> NUTZ
_HETHER_define(_HETHER_ha3_to_nutz,         HA3_ETHER_ADDR, NUTZ_ETHER_ADDR)
_HETHER_define(_HETHER_ha3_to_all,          HA3_ETHER_ADDR, v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))

// CN0 -> NUTZ
_HETHER_define(_HETHER_cn0_to_nutz,         CN0_ETHER_ADDR, NUTZ_ETHER_ADDR)
_HETHER_define(_HETHER_cn0_to_nutzsolnode,  CN0_ETHER_ADDR, NUTZ_SOL_ETHER_ADDR)

/*----------------------------------------------------------------------------*
 *
 *  Link1 Ether Frame Header
 *
 *----------------------------------------------------------------------------*/

#define NUT1_ETHER_ADDR     ether(NUT1_MAC_ADDR)

#define LFN0_ETHER_ADDR     ether(LFN0_MAC_ADDR)

#define LFN1_ETHER_ADDR     ether(LFN1_MAC_ADDR)

#define VMN11_ETHER_ADDR    ether(VMN11_MAC_ADDR)

// NUT1 -> NUT1 (solnode for DAD)
_HETHER_define(_HETHER_nut1_dad,            NUT1_ETHER_ADDR, _ETHER_SOLNODE_MCAST(v6ether(NUT1_MAC_ADDR)))

// NUT1 -> ALL
_HETHER_define(_HETHER_nut1_to_all,         NUT1_ETHER_ADDR, v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))

// NUT1 -> LFN0
_HETHER_define(_HETHER_nut1_to_lfn0,        NUT1_ETHER_ADDR, LFN0_ETHER_ADDR)
_HETHER_define(_HETHER_nut1_to_lfn0solnode, NUT1_ETHER_ADDR, _ETHER_SOLNODE_MCAST(v6ether(LFN0_MAC_ADDR)))

// NUT1 -> LFN1
_HETHER_define(_HETHER_nut1_to_lfn1,        NUT1_ETHER_ADDR, LFN1_ETHER_ADDR)
_HETHER_define(_HETHER_nut1_to_lfn1solnode, NUT1_ETHER_ADDR, _ETHER_SOLNODE_MCAST(v6ether(LFN1_MAC_ADDR)))

// NUT1 -> VMN11
_HETHER_define(_HETHER_nut1_to_vmn11,        NUT1_ETHER_ADDR, VMN11_ETHER_ADDR)
_HETHER_define(_HETHER_nut1_to_vmn11solnode, NUT1_ETHER_ADDR, _ETHER_SOLNODE_MCAST(v6ether(VMN11_MAC_ADDR)))

// LFN0 -> NUT1
_HETHER_define(_HETHER_lfn0_to_allrouter,   LFN0_ETHER_ADDR, v62ethermulti(v6(_ALLROUTERS_MCAST_ADDR)))
_HETHER_define(_HETHER_lfn0_to_nut1,        LFN0_ETHER_ADDR, NUT1_ETHER_ADDR)
_HETHER_define(_HETHER_lfn0_to_nut1solnode, LFN0_ETHER_ADDR, _ETHER_SOLNODE_MCAST(v6ether(NUT1_MAC_ADDR)))

// LFN1 -> NUT1
_HETHER_define(_HETHER_lfn1_to_nut1,        LFN1_ETHER_ADDR, NUT1_ETHER_ADDR)
_HETHER_define(_HETHER_lfn1_to_nut1solnode, LFN1_ETHER_ADDR, _ETHER_SOLNODE_MCAST(v6ether(NUT1_MAC_ADDR)))

// VMN11 -> NUT1
_HETHER_define(_HETHER_vmn11_to_nut1,        VMN11_ETHER_ADDR, NUT1_ETHER_ADDR)
_HETHER_define(_HETHER_vmn11_to_nut1solnode, VMN11_ETHER_ADDR, _ETHER_SOLNODE_MCAST(v6ether(NUT1_MAC_ADDR)))

// End of File
