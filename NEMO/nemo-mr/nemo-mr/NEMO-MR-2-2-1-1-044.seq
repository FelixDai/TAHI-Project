#!/usr/bin/perl
#
# Copyright (C) IPv6 Promotion Council,
# NIPPON TELEGRAPH AND TELEPHONE CORPORATION (NTT),
# Yokogwa Electoric Corporation, YASKAWA INFORMATION SYSTEMS Corporation
# and NTT Advanced Technology Corporation(NTT-AT) All rights reserved.
#
# Technology Corporation.
#
# Redistribution and use of this software in source and binary forms, with
# or without modification, are permitted provided that the following
# conditions and disclaimer are agreed and accepted by the user:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the names of the copyrighters, the name of the project which
# is related to this software (hereinafter referred to as "project") nor
# the names of the contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.
#
# 4. No merchantable use may be permitted without prior written
# notification to the copyrighters. However, using this software for the
# purpose of testing or evaluating any products including merchantable
# products may be permitted without any notification to the copyrighters.
#
#
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.
#

#--------------------------------------------------------------#
# ENTRANCE
#--------------------------------------------------------------#
# Set the test version used for the display.
BEGIN { $V6evalTool::TestVersion = '$Name: NEMO_1_0_2 $'; }

# Import the package.
use V6evalTool;
use mip6_mn_config;
use mip6_mn_common;
use mip6_mn_get;
use mip6_mn_send;
use mip6_mn_recv;
use mip6_mn_msg;

#--------------------------------------------------------------#
# INITIALIZATION
#--------------------------------------------------------------#
# Do the test satisfied the condition.
my @options = (
	'TEST_STATE_ABNORMAL',      'YES',                0,
	'TEST_FUNC_REAL_HOME_LINK', 'YES',                0,
	'TEST_FUNC_DHAAD',          'YES',                0,
	'FUNC_DETAIL_BU_TO_HA_140', 'YES',                0,
	'FUNC_DETAIL_BU_TO_HA_140', 'NO',                 0,
#	'ENV_INITIALIZE',           'BOOT',               0,
);

# Set the special environment
$MN_CONF{ENV_HA1_SET} = 'YES';

# Initialize the state of TARGET.
Init_MN(@options);

#--------------------------------------------------------------#
# PREPARATION
#--------------------------------------------------------------#
# Prepare other variables.
my @value;
my $sec;

#--------------------------------------------------------------#
# TEST PROCEDURE
#--------------------------------------------------------------#
#--------------------------------------------------------------#
# NUT starts at Link0.
#--------------------------------------------------------------#
# Send Router Advertisement. (HA0 -> HA0_allnode_multi)
#   The Home Agent (H) bit is clear.
vRecv_at_Link0_NonHA($IF0, $FIRST_RA_TIME);

#--------------------------------------------------------------#
# NUT moves from Link0 to LinkX.
#--------------------------------------------------------------#
##while reg##
# check1 bu     -->last
# check2 haadreq-->send haadrep continue
# check3 bu implicit-->noreply
# check4 bu explicit-->noreply

@HA_BA_VALUE = ('BA_Status', 140, 'BA_Rflag', 1);

vLogHTML_Info("<B>waits for BU</B>");

$now_time = time;
$end_time = $now_time + $BU_TIME;

while ($now_time < $end_time) {
	$sec = $end_time - $now_time;

	%packet = vRecv_at_LinkX($IF0, $sec,
		'haadrequest_nutxga_link0haany',
		'bu_nutxga_ha0ga_hoa_nuthga',
		'bu_nutxga_ha0ga_hoa_nuthga_implicit',
		'bu_nutxga_ha0ga_hoa_nuthga_explicit',
	);
	$now_time = time;

	if($packet{recvFrame} eq 'bu_nutxga_ha0ga_hoa_nuthga'){
		vLogHTML_Info("<B>HA0 sends Binding Acknowledgement, Status 140 , (R) bit 1.</B>");
		vSend_ba($IF0, 'ba_ha0ga_nutxga_rh2_nuthga', \%packet);
		$bu_flag = 1;
		last;
	}
	elsif($packet{recvFrame} eq 'haadrequest_nutxga_link0haany'){
		@value = ('HAADRep_Rflag',1);
		vSend_haadreply($IF0, 'haadreply_ha0ga_nutxga_list_ha0ha1', \%packet, @value);
		%value_haadreq = get_value_of_haadrequest(0, \%packet);

#		if ( $value_haadreq{'HAADReq_Rflag'} eq '0') {
		if ( $value_haadreq{'RFlag'} eq '0') {
			vLogHTML_Fail("INIT FAIL: HA0 does not receive Home Agent Address Discovery Request with R bit =1.");
			$initcount ++;
			goto TERM;
		}
	}
}

if($bu_flag != 1){
	vLogHTML_Fail("INIT FAIL: HA0 does not receive Binding Update.");
	$initcount ++;
	goto TERM;
}


##while new reg##
#check1 bu ha0 -->fail err
#check2 bu ha1 -->last
#check3 haadreq-->send haadrep
#check4 bu implicit-->noreply
#check5 bu explicit-->noreply
vLogHTML_Info("<B>waits for re-registration</B>");

my $numHA0 = 0;
my $numHA1 = 0;

$now_time = time;
$end_time = $now_time + $BU_TIME;

while ($now_time < $end_time) {
	$sec = $end_time - $now_time;

	%packet = vRecv_at_LinkX($IF0, $sec,
		'bu_nutxga_ha1ga_hoa_nuthga',
		'haadrequest_nutxga_link0haany',
		'bu_nutxga_ha0ga_hoa_nuthga',
		'bu_nutxga_ha0ga_hoa_nuthga_implicit',
		'bu_nutxga_ha0ga_hoa_nuthga_explicit',
	);
	$now_time = time;
	
	if($packet{recvFrame} eq 'bu_nutxga_ha1ga_hoa_nuthga'){
		#--------------------------------------------------------------#
		vLogHTML_Info("<B>HA1 sends Binding Acknowledgement(status=0 and R=ON).</B>");
		#--------------------------------------------------------------#
		@value = ('BA_Status', 0, 'BA_Rflag', 1);
		%packet_ha1_ba = vSend_ba($IF0, 'ba_ha1ga_nutxga_rh2_nuthga', \%packet, @value);
		%packet_ha1_bu = %packet;
		$numHA1 ++;
		$HA1_re_bu_flag = 1;
		last;
	}
	elsif($packet{recvFrame} eq 'haadrequest_nutxga_link0haany'){
		#--------------------------------------------------------------#
		vLogHTML_Info("<B>HA0 sends Home Agent Address Discovery Reply(List HA0 HA1).</B>");
		#--------------------------------------------------------------#
		@value = ('HAADRep_Rflag',1);
		vSend_haadreply($IF0, 'haadreply_ha0ga_nutxga_list_ha0ha1', \%packet, @value);
		%value_haadreq = get_value_of_haadrequest(0, \%packet);

#		if ( $value_haadreq{'HAADReq_Rflag'} eq '0') {
		if ( $value_haadreq{'RFlag'} eq '0') {
			vLogHTML_Fail("INIT FAIL: HA0 does not receive Home Agent Address Discovery Request with R bit =1.");
			$initcount ++;
			goto TERM;
		}
	}
	elsif($packet{recvFrame} eq 'bu_nutxga_ha0ga_hoa_nuthga'){
	#	vLogHTML_Fail("FAIL: HA0 receives re-registration.");
	#	$failcount ++;
	#	goto TERM;
		
		#--------------------------------------------------------------#
		vLogHTML_Info("<B>HA0 sends Binding Acknowledgement(status=140).</B>");
		#--------------------------------------------------------------#
		@value = ('BA_Status', 140, 'BA_Rflag', 1);
		%packet_ha0_ba = vSend_ba($IF0, 'ba_ha0ga_nutxga_rh2_nuthga', \%packet, @value);
		%packet_ha0_bu = %packet;
		$numHA0 ++;
		if ($numHA0 > $BU_RETRIES) {
			$HA0_re_bu_flag = 1;
		}
	}
	elsif(($packet{recvFrame} eq 'bu_nutxga_ha0ga_hoa_nuthga_explicit') || 
		($packet{recvFrame} eq 'bu_nutxga_ha0ga_hoa_nuthga_implicit')){
		vLogHTML_Info("no reply.");
		$changemode = 1;
		last;
	}
}

if($HA1_re_bu_flag != 1){
	vLogHTML_Fail("INIT FAIL: HA1 does not receive Binding Update.");
	$initcount ++;
	goto JUDGE_1;
}

#--------------------------------------------------------------#
# update default receive pakcets for HA1 binding
#--------------------------------------------------------------#
if ($MN_CONF{'TEST_FUNC_MPD'} eq 'YES') {
	set_recv_packet_at_linkX('mps_nutxga_ha1ga_hoa_nuthga');
}

#--------------------------------------------------------------#
vLogHTML_Info("<B>HA1 sends ICMP Echo Request with Type2 Routing Header.</B>");
#--------------------------------------------------------------#
# Send ICMP Echo Request. (HA1 -> NUTX with Type2 Routing Header)
# check2 bu to ha0-->fail err
# check3 echorep ha1 hoa    -->last
# check4 echorep ha1 hoa tnl-->fail
# check5 echorep ha1 tnl    -->fail
# check6 echorep ha1 l2any  -->fail
#(check7 mps-->err)
# check8 haadreq -->send haadrep
#check9 bu implicit-->noreply
#check10 bu explicit-->noreply


my $id_no = 100;
@value = ('ECHO_IDENTIFIER', $id_no);
vSend_echorequest($IF0, 'echorequest_ha1ga_nutxga_rh2_nuthga', 0, @value);

$now_time = time;
$end_time = $now_time + $ECHO_TIME;
while ($now_time < $end_time) {

	$sec = $end_time - $now_time;
	%packet = vRecv_at_LinkX($IF0, $sec,
		'bu_nutxga_ha1ga_hoa_nuthga',
		'echoreply_nutxga_ha1ga_hoa_nuthga',
		'echoreply_nuthga_ha1ga_tnl_nutx_ha1',
		'echoreply_nutxga_ha1ga_hoa_nuthga_tnl_nutx_ha1',
		'echoreply_nuthga_ha1ga_l2_any',
		'haadrequest_nutxga_link0haany',
#		'mps_nutxga_ha0ga_hoa_nuthga',
		'bu_nutxga_ha0ga_hoa_nuthga_implicit',
		'bu_nutxga_ha0ga_hoa_nuthga_explicit',
		);
	$now_time = time;

	if ($packet{recvFrame} eq 'bu_nutxga_ha1ga_hoa_nuthga') {
		#--------------------------------------------------------------#
		vLogHTML_Info("<B>HA1 sends Binding Acknowledgement, Status 0, (R) bit 1.</B>");
		#--------------------------------------------------------------#
		@value = ('BA_Status', 0, 'BA_Rflag', 1);
		%packet_ha1_ba = vSend_ba($IF0, 'ba_ha1ga_nutxga_rh2_nuthga', \%packet, @value);
		%packet_ha1_bu = %packet;
		$numHA1 ++;

		# Send ICMP Echo Request. (HA1 -> NUTX with Type2 Routing Header)
		$id_no ++;
		@value = ('ECHO_IDENTIFIER', $id_no);
		vSend_echorequest($IF0, 'echorequest_ha1ga_nutxga_rh2_nuthga', 0, @value);
	}
	elsif ($packet{recvFrame} eq 'echoreply_nutxga_ha1ga_hoa_nuthga') {
		$echo_hoa_flag = 1;
		last;
	}
	elsif ($packet{recvFrame} eq 'echoreply_nuthga_ha1ga_tnl_nutx_ha1') {
		$echo_tnl_flag = 1;
		# can't judge to have BUL
		vLogHTML_Info("INFO: HA1 receives ICMP Echo Reply by reversed tunnel.");
		last;
	}
	elsif ($packet{recvFrame} eq 'echoreply_nutxga_ha1ga_hoa_nuthga_tnl_nutx_ha1') {
		$echo_tnl_hoa_flag = 1;
		vLogHTML_Fail("FAIL: HA1 receives ICMP Echo Reply with HoA option by reversed tunnel.");
		last;
	}
	elsif ($packet{recvFrame} eq 'echoreply_nuthga_ha1ga_l2_any') {
		$echo_link0_flag = 1;
		vLogHTML_Fail("FAIL: HA0 receives ICMP Echo reply from a different location.");
		last;
	}
	elsif ($packet{recvFrame} eq 'haadrequest_nutxga_link0haany') {
		#--------------------------------------------------------------#
		vLogHTML_Info("<B>HA0 sends Home Agent Address Discovery Reply(List HA0 HA1).</B>");
		#--------------------------------------------------------------#
		vSend_haadreply($IF0, 'haadreply_ha0ga_nutxga_list_ha0ha1', \%packet);
		%value_haadrequest = get_value_of_haadrequest(0, \%packet);

#		if ($value_haadrequest{'HAADReq_Rflag'} eq '0') {
		if ($value_haadrequest{'RFlag'} eq '0') {
			vLogHTML_Warn("WARN: HA0 receives Home Agent Address Discovery Request, (R) bit 0.");
			$warncount ++;
		}
	}
#	elsif ($packet{recvFrame} eq 'mps_nutxga_ha0ga_hoa_nuthga') {
#		vLogHTML_Fail("INIT FAIL: HA0 receives Moblie Prefix Solicitation.");
#		$initcount ++;
#		goto TERM;
#	}
	elsif(($packet{recvFrame} eq 'bu_nutxga_ha0ga_hoa_nuthga_explicit') || 
	      ($packet{recvFrame} eq 'bu_nutxga_ha0ga_hoa_nuthga_implicit')){
		vLogHTML_Fail("INIT FAIL: HA0 receives re-registration.");
		$initcount ++;
		goto TERM;
	}
}

#--------------------------------------------------------------#
# update default receive pakcets for HA1 binding
#--------------------------------------------------------------#
set_recv_packet_at_linkX('bu_nutxga_ha1ga_hoa_nuthga');

#--------------------------------------------------------------#
vLogHTML_Info("<B>HA1 sends ICMP Echo Request by tunnel.</B>");
#--------------------------------------------------------------#
$packet_chk2 = vRecv_to_fowarding($FOWRDING_WAITING_TIME, echorequest_cn0ga_lfn0ga_tnl_ha1_nutx, 0, 0);


JUDGE_1:
#--------------------------------------------------------------#
# JUDGEMENT
#--------------------------------------------------------------#
# check bu to HA1
if ($MN_CONF{FUNC_DETAIL_BU_TO_HA_140} eq 'YES') {
	if ($HA1_re_bu_flag == 1) {
		vLogHTML_Pass("(*1) PASS: HA1 receive Binding Update to other Home Agent.");
	}
	else {
		vLogHTML_Fail("(*1) FAIL: HA1 does not receive Binding Update to other Home Agent.");
		$failcount ++;
		goto TERM;
	}
}
else {
	if ($HA1_re_bu_flag == 1) {
		vLogHTML_Pass("(*1) PASS: HA1 receive Binding Update to other Home Agent.");
	}
	else {
		vLogHTML_Fail("(*1) FAIL: HA1 does not receive Binding Update to other Home Agent.");
		$failcount ++;
		goto TERM;
	}
}


# retrans bu
%value_bu = get_value_of_bu(0, \%packet_ha1_bu);

# check Rflag
if ($value_bu{RFlag} == 1) {
	vLogHTML_Pass("The Mobile Router Flag (R) is set to 1");
}
else {
	vLogHTML_Fail("FAIL: The Mobile Router Flag (R) is not set to 1.");
	$failcount ++;
}


# check echoreply to HA
if ($echo_hoa_flag == 1) {
	vLogHTML_Pass("(*2) PASS: HA1 receives ICMP Echo Reply with Home Address Option.");
}
elsif ($echo_tnl_flag == 1) {
	vLogHTML_Info("(*2) INFO: HA1 receives ICMP Echo Reply by reversed tunnel.");
}
elsif ($echo_tnl_hoa_flag == 1) {
	vLogHTML_Fail("(*2) FAIL: HA1 receives ICMP Echo Reply with Home Address Option and reversed tunnel.");
	$failcount ++;
}
elsif ($echo_link0_flag == 1) {
	vLogHTML_Fail("(*2) FAIL: HA1 receives ICMP Echo Reply from a different location.");
	$failcount ++;
}
else {
	vLogHTML_Fail("(*2) FAIL: HA1 does not receive ICMP Echo Reply.");
	if ($MN_CONF{ENV_DETAIL_INFO} != 0) {
		vLogHTML_Info("           MR does not has BUL entry.");
	}
	$failcount ++;
}


# check fwd
if($packet_chk2 == 1){
	vLogHTML_Fail("(*3) FAIL: LFN0 does not receive ICMP Echo Request.");
	$failcount ++;
}
elsif($packet_chk2 == 2){
	vLogHTML_Pass("(*3) PASS: LFN0 receives ICMP Echo Request.");
	vLogHTML_Fail("(*4) FAIL: CN0 does not receive ICMP Echo Reply.");
	$failcount ++;
}
else{
	vLogHTML_Pass("(*3) PASS: LFN0 receives ICMP Echo Request.");
	vLogHTML_Pass("(*4) PASS: CN0 receives ICMP Echo Reply.");
}


TERM:
#--------------------------------------------------------------#
# TERMINATION
#--------------------------------------------------------------#
# Terminate the state of TARGET.
Term_MN($IF0, 1);

################################################################
__END__


=head1 NAME

=begin html
  NEMO-MR-2-2-1-1-044 - BU rejected (Status = 140) when multiple HA in home-link

=end html

=head1 TARGET

=begin html
<PRE>
Router
</PRE>

=end html


=head1 REQUIREMENT of TEST

=begin html
<PRE>
                    
    - Function of Real Home Link: YES
    - Function of Dynamic Home Agent Address Discovery: YES
                    
    - NUT re-transmits BU to HA for BA(status 140): YES/NO
                    
</PRE>

=end html

=head1 TOPOLOGY

=begin html
<PRE>
<UL>
<LI><B><FONT SIZE="+1">TOPOLOGY-3 Real Home Link</FONT></B>
  There are two home agents.
</UL>
                          |
                         HA3                  CN0           VMN1
                          |                    |             |
                ---+------+--------------------+-------------+------ LinkZ
                   |
                                              LFN1   LFN0  VMN11
                   :                           |      |      |
                                     ---+------+------+------+------ Link1
                   |                    |
                   R2                  NUTY
                   |                    |
                ---+------+-------------+--------------------------- LinkY
                          |
                                              LFN1   LFN0  VMN11
                          :                    |      |      |
                                     ---+------+------+------+------ Link1
                          |             |
                          R1   NODE1   NUTX
                          |      |      |
  ----------+------+------+------+------+--------------------------- LinkX
            |      |
                                              LFN1   LFN0  VMN11
            :      :                           |      |      |
                                     ---+------+------+------+------ Link1
            |      |                    |
           HA1    HA0          NODE0   NUT0
            |      |             |      |
  ----------+------+-------------+------+--------------------------- Link0
</PRE>
<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD><TT>Link0</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:100::/64</TT></TD>
<TD><TT>home link</TT></TD>
</TR>
<TR>
<TD><TT>LinkX</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:200::/64</TT></TD>
<TD><TT>foreign link</TT></TD>
</TR>
<TR>
<TD><TT>LinkY</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:300::/64</TT></TD>
<TD><TT>foreign link</TT></TD>
</TR>
<TR>
<TD><TT>LinkZ</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:400::/64</TT></TD>
<TD><TT>foreign link</TT></TD>
</TR>
<TR>
<TD><TT>Link1</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:104::/64</TT></TD>
<TD><TT>NEMO link</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>HA0 (Link0)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:100:200:ff:fe00:a0a0</TT></TD>
<TD ROWSPAN="3"><TT>home agent</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::200:ff:fe00:a0a0</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>00:00:00:00:a0:a0</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>HA1 (Link0)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:100:200:ff:fe00:a1a1</TT></TD>
<TD ROWSPAN="3"><TT>home agent</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::200:ff:fe00:a1a1</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>00:00:00:00:a1:a1</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>NODE0</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:100:200:ff:fe00:a3a3</TT></TD>
<TD ROWSPAN="3"><TT>&nbsp;</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::200:ff:fe00:a3a3</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>00:00:00:00:a3:a3</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>R1 (LinkX)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:200:200:ff:fe00:a4a4</TT></TD>
<TD ROWSPAN="3"><TT>&nbsp;</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::200:ff:fe00:a4a4</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>00:00:00:00:a4:a4</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>NODE1</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:200:200:ff:fe00:a5a5</TT></TD>
<TD ROWSPAN="3"><TT>&nbsp;</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::200:ff:fe00:a5a5</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>00:00:00:00:a5:a5</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>R2 (LinkY)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:300:200:ff:fe00:a6a6</TT></TD>
<TD ROWSPAN="3"><TT>&nbsp;</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::200:ff:fe00:a6a6</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>00:00:00:00:a6:a6</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>HA3 (LinkZ)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:400:200:ff:fe00:a8a8</TT></TD>
<TD ROWSPAN="3"><TT> home agent of VMN1</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::200:ff:fe00:a8a8</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>00:00:00:00:a8:a8</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>CN0</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:400:200:ff:fe00:aaaa</TT></TD>
<TD ROWSPAN="3"><TT>correspondent node</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::200:ff:fe00:aaaa</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>00:00:00:00:aa:aa</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>VMN1</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:400:200:ff:fe00:abab</TT></TD>
<TD ROWSPAN="3"><TT>visited mobile node</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::200:ff:fe00:abab</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>00:00:00:00:ab:ab</TT></TD>
</TR>
<TR>
<TD><TT>VMN11 (Link1)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:104:200:ff:fe00:abab</TT></TD>
<TD><TT> care-of address of VMN1</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>LFN0</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:104:200:ff:fe00:b0b0</TT></TD>
<TD ROWSPAN="3"><TT>local fixed node</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::200:ff:fe00:b0b0</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>00:00:00:00:b0:b0</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>LFN1</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:104:200:ff:fe00:b1b1</TT></TD>
<TD ROWSPAN="3"><TT>local fixed node</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::200:ff:fe00:b1b1</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>00:00:00:00:b1:b1</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>NUT0 (Link0)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:100::&lt;NutDef.Link0_addr&gt;</TT></TD>
<TD ROWSPAN="3"><TT>egress interface</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::&lt;NutDef.Link0_addr&gt;</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>&lt;NutDef.Link0_addr&gt;</TT></TD>
</TR>
<TR>
<TD><TT>NUTX (LinkX)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:200::&lt;NutDef.Link0_addr&gt;</TT></TD>
<TD><TT>care-of address</TT></TD>
</TR>
<TR>
<TD><TT>NUTY (LinkY)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:300::&lt;NutDef.Link0_addr&gt;</TT></TD>
<TD><TT>care-of address</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>NUT0 (Link1)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:104::&lt;NutDef.Link1_addr&gt;</TT></TD>
<TD ROWSPAN="3"><TT>ingress interface</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::&lt;NutDef.Link1_addr&gt;</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>&lt;NutDef.Link1_addr&gt;</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

=head1 SETUP

=begin html
<PRE>
<LI><B><FONT SIZE="+1">Common Setup-1</FONT></B>
<UL>
<LI>Reboot NUT
<LI>Enable MR function
<UL>
<LI>Turn on MR functions
</UL>
<LI>Initialize IPsec configuration
<LI>Set IPsec configuration
<UL>
<LI>This test requires following configurations.
<UL>
<LI><A HREF="SETUP_IPsec_HA0_SA1_SA2.html">MR-HA0 SA1/SA2, Transport mode, Binding Update/Binding Acknowledgement</A>
</UL>
<LI>This test requires following configurations, If a related message is used.
<UL>
<LI><A HREF="SETUP_IPsec_HA0_SA3_SA4.html">MR-HA0 SA3/SA4, Tunnel mode, Return Routability Signaling</A>
<LI><A HREF="SETUP_IPsec_HA0_SA5_SA6.html">MR-HA0 SA5/SA6, Transport mode, Prefix Discovery</A>
</UL>
<LI>This test also allow to use following configurations.
<UL>
<LI><A HREF="SETUP_IPsec_HA0_SA7_SA8.html">MR-HA0 SA7/SA8, Tunnel mode, Payload Packets</A>
<LI><A HREF="SETUP_IPsec_HA0_SA9_SA10.html">MR-HA0 SA9/SA10, Tunnel mode, Payload Packets that belong to mobile network prefix</A>
<LI><A HREF="SETUP_IPsec_CN0_SA.html">MR-CN0, Transport mode, ICMP</A>
</UL>
</UL>
</UL>
</PRE>

=end html

=head1 INITIALIZATION

=begin html
<PRE>
                    
      LFN0    NUT0     HA0     HA1      R1      R2     CN0
        |       |       |       |       |       |       |
        |       | <---- |       |       |       |       | 1.Router Advertisement
        |       |       |       |       |       |       |
        |     NUTX      |       |       |       |       |
        |       |       |       |       |       |       |
        |       | <-------------------- |       |       | 2.Router Advertisement
        |       |       |       |       |       |       |
        |       | ----> |       |       |       |       | 3.Neighbor Solicitation (NUD)
        |       |       |       |       |       |       | 4.(no reply)
        |       |       |       |       |       |       |
                    
        1. Send Router Advertisement. (HA0 -> HA0_allnode_multi)
        2. Send Router Advertisement. (R1 -> R1_allnode_multi)
        3. Receive Neighbor Solicitation (NUD). (NUT0 -> HA0)
        4. (no reply)
                    
</PRE>

=end html

=head1 TEST PROCEDURE

=begin html
<PRE>
                    
      LFN0    NUTX     HA0     HA1      R1      R2     CN0
        |       |       |       |       |       |       |
        |       | <-------------------- |       |       | 1.Router Advertisement
        |       |       |       |       |       |       |
        |       | ----> |       |       |       |       | 2.Binding Update
        |       | <---- |       |       |       |       | 3.Binding Acknowledgement (status=140)
        |       |       |       |       |       |       |
        |       | ----> |       |       |       |       | 4.Home Agent Address Discovery Request
        |       | <---- |       |       |       |       | 5.Home Agent Address Discovery Reply
        |       |       |       |       |       |       |
        |       | ------------> |       |       |       | 6.Binding Update (*1)
        |       | <------------ |       |       |       | 7.Binding Acknowledgement (status=0)
        |       |       |       |       |       |       |
        |       | <------------ |       |       |       | 8.ICMP Echo Request
        |       | ------------> |       |       |       | 9.ICMP Echo Reply (*2)
        |       |       |       |       |       |       |
        | <---- | <============ | <-------------------- | 10.ICMP Echo Request (*3)
        | ----> | ============> | --------------------> | 11.ICMP Echo Reply (*4)
        |       |       |       |       |       |       |
                    
        1. Send Router Advertisement. (R1 -> R1_allnode_multi)
        2. Receive Binding Update. (NUTX -> HA0)
            # The Mobile Router Flag (R) is set to 1.
        3. Send Binding Acknowledgement. (HA0 -> NUTX)
            # The Status field is set to 140(Mobile Router Operation not permitted).
            # The Mobile Router Flag (R) is set to 1.
        4. Receive Home Agent Address Discovery Request. (NUTX -> NUT0_ha_any)
            # The Mobile Router Support Flag (R) is set to 1.
        5. Send Home Agent Address Discovery Reply. (HA0 -> NUTX)
            # The Mobile Router Support Flag (R) is set to 1.
            # The Home Agent Addresses field contains global IP address for HA0.
            # The Home Agent Addresses field contains global IP address for HA1.
        6. Receive Binding Update. (NUTX -> HA1)
            # The Mobile Router Flag (R) is set to 1.
        7. Send Binding Acknowledgement. (HA1 -> NUTX)
            # The Status field is set to 0(Binding Update accepted).
            # The Mobile Router Flag (R) is set to 1.
        8. Send ICMP Echo Request. (HA1 -> NUTX with Type2 Routing Header)
        9. Receive ICMP Echo Reply. (NUTX -> HA1 with Home Address Option)
       10. Send ICMP Echo Request. (out: HA1 -> NUTX, in: CN0 -> LFN0)
            Receive ICMP Echo Request. (CN0 -> LFN0)
       11. Send ICMP Echo Reply. (LFN0 -> CN0)
            Receive ICMP Echo Reply. (out: NUTX -> HA1, in: LFN0 -> CN0)
                    
    Focus Packet Format:
        <A HREF="../images/NEMO_Binding_Update_message_format_ESP_Exp_from_MR_to_HA.gif">2. Binding Update</A>
        <A HREF="../images/NEMO_Binding_Update_message_format_ESP_Imp_from_MR_to_HA.gif">2. Binding Update</A>
        <A HREF="../images/NEMO_Binding_Acknowledgement_message_format_ESP_from_HA_to_MR.gif">3. Binding Acknowledgement</A>
        <A HREF="../images/NEMO_HAA_Discovery_request_message_format_from_MR_to_HA.gif">4. Home Agent Address Discovery Request</A>
        <A HREF="../images/NEMO_HAA_Discovery_reply_message_format_from_HA_to_MR.gif">5. Home Agent Address Discovery Reply</A>
        <A HREF="../images/NEMO_Binding_Update_message_format_ESP_Exp_from_MR_to_HA.gif">6. Binding Update</A>
        <A HREF="../images/NEMO_Binding_Update_message_format_ESP_Imp_from_MR_to_HA.gif">6. Binding Update</A>
        <A HREF="../images/NEMO_Binding_Acknowledgement_message_format_ESP_from_HA_to_MR.gif">7. Binding Acknowledgement</A>
</PRE>

=end html

=head1 JUDGEMENT

=begin html
<PRE>
 (*1) PASS: HA1 receive Binding Update to other Home Agent.
            Then, check whether this packet fills all of the following,
            - The Mobile Router Flag (R) is set to 1.
 (*2) PASS: HA1 receives ICMP Echo Reply with Home Address Option.
 (*3) PASS: LFN0 receives ICMP Echo Request.
 (*4) PASS: CN0 receives ICMP Echo Reply.
                    
</PRE>

=end html

=head1 REFERENCE

=begin html
<PRE>
RFC3963 NEMO Basic Support Protocol
    See Section 5.4.1, 5.4.2
</PRE>

=end html

