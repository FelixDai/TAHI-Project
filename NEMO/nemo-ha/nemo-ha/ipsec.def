//
// Copyright (C) IPv6 Promotion Council,
// NIPPON TELEGRAPH AND TELEPHONE CORPORATION (NTT),
// Yokogwa Electoric Corporation, YASKAWA INFORMATION SYSTEMS Corporation
// and NTT Advanced Technology Corporation(NTT-AT) All rights reserved.
// 
// Technology Corporation.
// 
// Redistribution and use of this software in source and binary forms, with 
// or without modification, are permitted provided that the following 
// conditions and disclaimer are agreed and accepted by the user:
// 
// 1. Redistributions of source code must retain the above copyright 
// notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright 
// notice, this list of conditions and the following disclaimer in the 
// documentation and/or other materials provided with the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project which 
// is related to this software (hereinafter referred to as "project") nor 
// the names of the contributors may be used to endorse or promote products 
// derived from this software without specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written 
// notification to the copyrighters. However, using this software for the 
// purpose of testing or evaluating any products including merchantable 
// products may be permitted without any notification to the copyrighters.
// 
// 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
//
////////////////////////////////////////////////////////////////////////

#ifndef HAVE_IPSEC_DEF
#define HAVE_IPSEC_DEF


#ifndef SA1_SEQ
#define SA1_SEQ 0
#endif

#ifndef SA3_SEQ
#define SA3_SEQ 0
#endif

#ifndef SA5_SEQ
#define SA5_SEQ 0
#endif

#ifndef SA7_SEQ
#define SA7_SEQ 0
#endif

#ifndef SA9_SEQ
#define SA9_SEQ 0
#endif

#ifndef nest_SA1_SEQ
#define nest_SA1_SEQ    0
#endif

#ifndef nest_SA3_SEQ
#define nest_SA3_SEQ    0
#endif

#ifndef nest_SA5_SEQ
#define nest_SA5_SEQ    0
#endif

#ifndef nest_SA7_SEQ
#define nest_SA7_SEQ    0
#endif

#ifndef nest_SA9_SEQ
#define nest_SA9_SEQ    0
#endif


//-------------------
// HA <-> MR device1
//-------------------

#ifndef ext_esp_bu
#define ext_esp_bu      ext_esp_sa1
#endif

#ifndef ext_esp_ba
#define ext_esp_ba      ext_esp_sa2
#endif

#ifndef ext_esp_hoti
#define ext_esp_hoti    ext_esp_sa3
#endif

#ifndef ext_esp_hot
#define ext_esp_hot     ext_esp_sa4
#endif

#ifndef ext_esp_mps
#define ext_esp_mps     ext_esp_sa5
#endif

#ifndef ext_esp_mpa
#define ext_esp_mpa     ext_esp_sa6
#endif

#ifndef ext_esp_mn2cn
#define ext_esp_mn2cn   ext_esp_sa7
#endif

#ifndef ext_esp_cn2mn
#define ext_esp_cn2mn   ext_esp_sa8
#endif

#ifndef ext_esp_mnp2cn
#define ext_esp_mnp2cn  ext_esp_sa9
#endif

#ifndef ext_esp_cn2mnp
#define ext_esp_cn2mnp  ext_esp_sa10
#endif


//-------------------
// HA <-> MR device2
//-------------------

#ifndef ext_esp_d2_bu
#define ext_esp_d2_bu       ext_esp_d2_sa1
#endif

#ifndef ext_esp_d2_ba
#define ext_esp_d2_ba       ext_esp_d2_sa2
#endif

#ifndef ext_esp_d2_hoti
#define ext_esp_d2_hoti     ext_esp_d2_sa3
#endif

#ifndef ext_esp_d2_hot
#define ext_esp_d2_hot      ext_esp_d2_sa4
#endif

#ifndef ext_esp_d2_mps
#define ext_esp_d2_mps      ext_esp_d2_sa5
#endif

#ifndef ext_esp_d2_mpa
#define ext_esp_d2_mpa      ext_esp_d2_sa6
#endif

#ifndef ext_esp_d2_mn2cn
#define ext_esp_d2_mn2cn    ext_esp_d2_sa7
#endif

#ifndef ext_esp_d2_cn2mn
#define ext_esp_d2_cn2mn    ext_esp_d2_sa8
#endif

#ifndef ext_esp_d2_mnp2cn
#define ext_esp_d2_mnp2cn   ext_esp_d2_sa9
#endif

#ifndef ext_esp_d2_cn2mnp
#define ext_esp_d2_cn2mnp   ext_esp_d2_sa10
#endif

#ifndef ext_esp_d2_mnp22cn
#define ext_esp_d2_mnp22cn  ext_esp_d2_2_sa9
#endif

#ifndef ext_esp_d2_cn2mnp2
#define ext_esp_d2_cn2mnp2  ext_esp_d2_2_sa10
#endif


//-------------------
// HA <-> MR device4
//-------------------

#ifndef ext_esp_d4_bu
#define ext_esp_d4_bu       ext_esp_d4_sa1
#endif

#ifndef ext_esp_d4_ba
#define ext_esp_d4_ba       ext_esp_d4_sa2
#endif

#ifndef ext_esp_d4_hoti
#define ext_esp_d4_hoti     ext_esp_d4_sa3
#endif

#ifndef ext_esp_d4_hot
#define ext_esp_d4_hot      ext_esp_d4_sa4
#endif

#ifndef ext_esp_d4_mps
#define ext_esp_d4_mps      ext_esp_d4_sa5
#endif

#ifndef ext_esp_d4_mpa
#define ext_esp_d4_mpa      ext_esp_d4_sa6
#endif

#ifndef ext_esp_d4_mn2cn
#define ext_esp_d4_mn2cn    ext_esp_d4_sa7
#endif

#ifndef ext_esp_d4_cn2mn
#define ext_esp_d4_cn2mn    ext_esp_d4_sa8
#endif

#ifndef ext_esp_d4_mnp2cn
#define ext_esp_d4_mnp2cn   ext_esp_d4_sa9
#endif

#ifndef ext_esp_d4_cn2mnp
#define ext_esp_d4_cn2mnp   ext_esp_d4_sa10
#endif


//-------------------
// HA <-> MR device1
//-------------------

Hdr_ESP ext_esp_sa1 {
	SPI             = SA1_SPI;
	SequenceNumber  = SA1_SEQ;
	algorithm       = algorithm_SA1;
}


Hdr_ESP ext_esp_sa2 {
	SPI             = SA2_SPI;
	SequenceNumber  = any;
	algorithm       = algorithm_SA2;
}


Hdr_ESP ext_esp_sa3 {
	SPI             = SA3_SPI;
	SequenceNumber  = SA3_SEQ;
	algorithm       = algorithm_SA3;
}


Hdr_ESP ext_esp_sa4 {
	SPI             = SA4_SPI;
	SequenceNumber  = any;
	algorithm       = algorithm_SA4;
}


Hdr_ESP ext_esp_sa5 {
	SPI             = SA5_SPI;
	SequenceNumber  = SA5_SEQ;
	algorithm       = algorithm_SA5;
}


Hdr_ESP ext_esp_sa6 {
	SPI             = SA6_SPI;
	SequenceNumber  = any;
	algorithm       = algorithm_SA6;
}


Hdr_ESP ext_esp_sa7 {
	SPI             = SA7_SPI;
	SequenceNumber  = SA7_SEQ;
	algorithm       = algorithm_SA7;
}


Hdr_ESP ext_esp_sa8 {
	SPI             = SA8_SPI;
	SequenceNumber  = any;
	algorithm       = algorithm_SA8;
}


Hdr_ESP ext_esp_sa9 {
	SPI             = SA9_SPI;
	SequenceNumber  = SA9_SEQ;
	algorithm       = algorithm_SA9;
}


Hdr_ESP ext_esp_sa10 {
	SPI             = SA10_SPI;
	SequenceNumber  = any;
	algorithm       = algorithm_SA10;
}


//-------------------
// HA <-> MR device2
//-------------------

Hdr_ESP ext_esp_d2_sa1 {
	SPI             = D2_SA1_SPI;
	SequenceNumber  = SA1_SEQ;
	algorithm       = algorithm_D2_SA1;
}


Hdr_ESP ext_esp_d2_sa2 {
	SPI             = D2_SA2_SPI;
	SequenceNumber  = any;
	algorithm       = algorithm_D2_SA2;
}


Hdr_ESP ext_esp_d2_sa3 {
	SPI             = D2_SA3_SPI;
	SequenceNumber  = SA3_SEQ;
	algorithm       = algorithm_D2_SA3;
}


Hdr_ESP ext_esp_d2_sa4 {
	SPI             = D2_SA4_SPI;
	SequenceNumber  = any;
	algorithm       = algorithm_D2_SA4;
}


Hdr_ESP ext_esp_d2_sa5 {
	SPI             = D2_SA5_SPI;
	SequenceNumber  = SA5_SEQ;
	algorithm       = algorithm_D2_SA5;
}


Hdr_ESP ext_esp_d2_sa6 {
	SPI             = D2_SA6_SPI;
	SequenceNumber  = any;
	algorithm       = algorithm_D2_SA6;
}


Hdr_ESP ext_esp_d2_sa7 {
	SPI             = D2_SA7_SPI;
	SequenceNumber  = SA7_SEQ;
	algorithm       = algorithm_D2_SA7;
}


Hdr_ESP ext_esp_d2_sa8 {
	SPI             = D2_SA8_SPI;
	SequenceNumber  = any;
	algorithm       = algorithm_D2_SA8;
}


Hdr_ESP ext_esp_d2_sa9 {
	SPI             = D2_SA9_SPI;
	SequenceNumber  = SA9_SEQ;
	algorithm       = algorithm_D2_SA9;
}


Hdr_ESP ext_esp_d2_sa10 {
	SPI             = D2_SA10_SPI;
	SequenceNumber  = any;
	algorithm       = algorithm_D2_SA10;
}


Hdr_ESP ext_esp_d2_2_sa9 {
	SPI             = D2_2_SA9_SPI;
	SequenceNumber  = SA9_SEQ;
	algorithm       = algorithm_D2_2_SA9;
}


Hdr_ESP ext_esp_d2_2_sa10 {
	SPI             = D2_2_SA10_SPI;
	SequenceNumber  = any;
	algorithm       = algorithm_D2_2_SA10;
}


//-------------------
// HA <-> MR device4
//-------------------

Hdr_ESP ext_esp_d4_sa1 {
	SPI             = D4_SA1_SPI;
	SequenceNumber  = nest_SA1_SEQ;
	algorithm       = algorithm_D4_SA1;
}


Hdr_ESP ext_esp_d4_sa2 {
	SPI             = D4_SA2_SPI;
	SequenceNumber  = any;
	algorithm       = algorithm_D4_SA2;
}


Hdr_ESP ext_esp_d4_sa3 {
	SPI             = D4_SA3_SPI;
	SequenceNumber  = nest_SA3_SEQ;
	algorithm       = algorithm_D4_SA3;
}


Hdr_ESP ext_esp_d4_sa4 {
	SPI             = D4_SA4_SPI;
	SequenceNumber  = any;
	algorithm       = algorithm_D4_SA4;
}


Hdr_ESP ext_esp_d4_sa5 {
	SPI             = D4_SA5_SPI;
	SequenceNumber  = nest_SA5_SEQ;
	algorithm       = algorithm_D4_SA5;
}


Hdr_ESP ext_esp_d4_sa6 {
	SPI             = D4_SA6_SPI;
	SequenceNumber  = any;
	algorithm       = algorithm_D4_SA6;
}


Hdr_ESP ext_esp_d4_sa7 {
	SPI             = D4_SA7_SPI;
	SequenceNumber  = nest_SA7_SEQ;
	algorithm       = algorithm_D4_SA7;
}


Hdr_ESP ext_esp_d4_sa8 {
	SPI             = D4_SA8_SPI;
	SequenceNumber  = any;
	algorithm       = algorithm_D4_SA8;
}


Hdr_ESP ext_esp_d4_sa9 {
	SPI             = D4_SA9_SPI;
	SequenceNumber  = nest_SA9_SEQ;
	algorithm       = algorithm_D4_SA9;
}


Hdr_ESP ext_esp_d4_sa10 {
	SPI             = D4_SA10_SPI;
	SequenceNumber  = any;
	algorithm       = algorithm_D4_SA10;
}


//
// algorithms
//

//-------------------
// HA <-> MR device1
//-------------------

ESPAlgorithm algorithm_SA1 {
#if HAVE_IKE
	#if USE_SA1_DES_CBC
		crypt   = descbc_2(hexstr(SA1_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(SA1_ENC_KEY, 24));
	#endif
	#if USE_SA1_HMAC_MD5
		auth    = hmacmd5_2(hexstr(SA1_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(SA1_HASH_KEY, 20));
	#endif
#else
	#if USE_SA1_DES_CBC
		crypt   = descbc(SA1_ENC_KEY);
	#else
		crypt   = des3cbc(SA1_ENC_KEY);
	#endif
	#if USE_SA1_HMAC_MD5
		auth    = hmacmd5(SA1_HASH_KEY);
	#else
		auth    = hmacsha1(SA1_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_SA2 {
#if HAVE_IKE
	#if USE_SA2_DES_CBC
		crypt   = descbc_2(hexstr(SA2_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(SA2_ENC_KEY, 24));
	#endif
	#if USE_SA2_HMAC_MD5
		auth    = hmacmd5_2(hexstr(SA2_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(SA2_HASH_KEY, 20));
	#endif
#else
	#if USE_SA2_DES_CBC
		crypt   = descbc(SA2_ENC_KEY);
	#else
		crypt   = des3cbc(SA2_ENC_KEY);
	#endif
	#if USE_SA2_HMAC_MD5
		auth    = hmacmd5(SA2_HASH_KEY);
	#else
		auth    = hmacsha1(SA2_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_SA3 {
#if HAVE_IKE
	#if USE_SA3_DES_CBC
		crypt   = descbc_2(hexstr(SA3_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(SA3_ENC_KEY, 24));
	#endif
	#if USE_SA3_HMAC_MD5
		auth    = hmacmd5_2(hexstr(SA3_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(SA3_HASH_KEY, 20));
	#endif
#else
	#if USE_SA3_DES_CBC
		crypt   = descbc(SA3_ENC_KEY);
	#else
		crypt   = des3cbc(SA3_ENC_KEY);
	#endif
	#if USE_SA3_HMAC_MD5
		auth    = hmacmd5(SA3_HASH_KEY);
	#else
		auth    = hmacsha1(SA3_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_SA4 {
#if HAVE_IKE
	#if USE_SA4_DES_CBC
		crypt   = descbc_2(hexstr(SA4_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(SA4_ENC_KEY, 24));
	#endif
	#if USE_SA4_HMAC_MD5
		auth    = hmacmd5_2(hexstr(SA4_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(SA4_HASH_KEY, 20));
	#endif
#else
	#if USE_SA4_DES_CBC
		crypt   = descbc(SA4_ENC_KEY);
	#else
		crypt   = des3cbc(SA4_ENC_KEY);
	#endif
	#if USE_SA4_HMAC_MD5
		auth    = hmacmd5(SA4_HASH_KEY);
	#else
		auth    = hmacsha1(SA4_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_SA5 {
#if HAVE_IKE
	#if USE_SA5_DES_CBC
		crypt   = descbc_2(hexstr(SA5_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(SA5_ENC_KEY, 24));
	#endif
	#if USE_SA5_HMAC_MD5
		auth    = hmacmd5_2(hexstr(SA5_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(SA5_HASH_KEY, 20));
	#endif
#else
	#if USE_SA5_DES_CBC
		crypt   = descbc(SA5_ENC_KEY);
	#else
		crypt   = des3cbc(SA5_ENC_KEY);
	#endif
	#if USE_SA5_HMAC_MD5
		auth    = hmacmd5(SA5_HASH_KEY);
	#else
		auth    = hmacsha1(SA5_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_SA6 {
#if HAVE_IKE
	#if USE_SA6_DES_CBC
		crypt   = descbc_2(hexstr(SA6_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(SA6_ENC_KEY, 24));
	#endif
	#if USE_SA6_HMAC_MD5
		auth    = hmacmd5_2(hexstr(SA6_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(SA6_HASH_KEY, 20));
	#endif
#else
	#if USE_SA6_DES_CBC
		crypt   = descbc(SA6_ENC_KEY);
	#else
		crypt   = des3cbc(SA6_ENC_KEY);
	#endif
	#if USE_SA6_HMAC_MD5
		auth    = hmacmd5(SA6_HASH_KEY);
	#else
		auth    = hmacsha1(SA6_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_SA7 {
#if HAVE_IKE
	#if USE_SA7_DES_CBC
		crypt   = descbc_2(hexstr(SA7_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(SA7_ENC_KEY, 24));
	#endif
	#if USE_SA7_HMAC_MD5
		auth    = hmacmd5_2(hexstr(SA7_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(SA7_HASH_KEY, 20));
	#endif
#else
	#if USE_SA7_DES_CBC
		crypt   = descbc(SA7_ENC_KEY);
	#else
		crypt   = des3cbc(SA7_ENC_KEY);
	#endif
	#if USE_SA7_HMAC_MD5
		auth    = hmacmd5(SA7_HASH_KEY);
	#else
		auth    = hmacsha1(SA7_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_SA8 {
#if HAVE_IKE
	#if USE_SA8_DES_CBC
		crypt   = descbc_2(hexstr(SA8_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(SA8_ENC_KEY, 24));
	#endif
	#if USE_SA8_HMAC_MD5
		auth    = hmacmd5_2(hexstr(SA8_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(SA8_HASH_KEY, 20));
	#endif
#else
	#if USE_SA8_DES_CBC
		crypt   = descbc(SA8_ENC_KEY);
	#else
		crypt   = des3cbc(SA8_ENC_KEY);
	#endif
	#if USE_SA8_HMAC_MD5
		auth    = hmacmd5(SA8_HASH_KEY);
	#else
		auth    = hmacsha1(SA8_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_SA9 {
#if HAVE_IKE
	#if USE_SA9_DES_CBC
		crypt   = descbc_2(hexstr(SA9_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(SA9_ENC_KEY, 24));
	#endif
	#if USE_SA9_HMAC_MD5
		auth    = hmacmd5_2(hexstr(SA9_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(SA9_HASH_KEY, 20));
	#endif
#else
	#if USE_SA9_DES_CBC
		crypt   = descbc(SA9_ENC_KEY);
	#else
		crypt   = des3cbc(SA9_ENC_KEY);
	#endif
	#if USE_SA9_HMAC_MD5
		auth    = hmacmd5(SA9_HASH_KEY);
	#else
		auth    = hmacsha1(SA9_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_SA10 {
#if HAVE_IKE
	#if USE_SA10_DES_CBC
		crypt   = descbc_2(hexstr(SA10_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(SA10_ENC_KEY, 24));
	#endif
	#if USE_SA10_HMAC_MD5
		auth    = hmacmd5_2(hexstr(SA10_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(SA10_HASH_KEY, 20));
	#endif
#else
	#if USE_SA10_DES_CBC
		crypt   = descbc_2(SA10_ENC_KEY);
	#else
		crypt   = des3cbc(SA10_ENC_KEY);
	#endif
	#if USE_SA10_HMAC_MD5
		auth    = hmacmd5(SA10_HASH_KEY);
	#else
		auth    = hmacsha1(SA10_HASH_KEY);
	#endif
#endif
}


//-------------------
// HA <-> MR device2
//-------------------

ESPAlgorithm algorithm_D2_SA1 {
#if HAVE_IKE
	#if USE_SA1_DES_CBC
		crypt   = descbc_2(hexstr(D2_SA1_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D2_SA1_ENC_KEY, 24));
	#endif
	#if USE_SA1_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D2_SA1_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D2_SA1_HASH_KEY, 20));
	#endif
#else
	#if USE_SA1_DES_CBC
		crypt   = descbc(D2_SA1_ENC_KEY);
	#else
		crypt   = des3cbc(D2_SA1_ENC_KEY);
	#endif
	#if USE_SA1_HMAC_MD5
		auth    = hmacmd5(D2_SA1_HASH_KEY);
	#else
		auth    = hmacsha1(D2_SA1_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_D2_SA2 {
#if HAVE_IKE
	#if USE_SA2_DES_CBC
		crypt   = descbc_2(hexstr(D2_SA2_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D2_SA2_ENC_KEY, 24));
	#endif
	#if USE_SA2_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D2_SA2_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D2_SA2_HASH_KEY, 20));
	#endif
#else
	#if USE_SA2_DES_CBC
		crypt   = descbc(D2_SA2_ENC_KEY);
	#else
		crypt   = des3cbc(D2_SA2_ENC_KEY);
	#endif
	#if USE_SA2_HMAC_MD5
		auth    = hmacmd5(D2_SA2_HASH_KEY);
	#else
		auth    = hmacsha1(D2_SA2_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_D2_SA3 {
#if HAVE_IKE
	#if USE_SA3_DES_CBC
		crypt   = descbc_2(hexstr(D2_SA3_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D2_SA3_ENC_KEY, 24));
	#endif
	#if USE_SA3_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D2_SA3_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D2_SA3_HASH_KEY, 20));
	#endif
#else
	#if USE_SA3_DES_CBC
		crypt   = descbc(D2_SA3_ENC_KEY);
	#else
		crypt   = des3cbc(D2_SA3_ENC_KEY);
	#endif
	#if USE_SA3_HMAC_MD5
		auth    = hmacmd5(D2_SA3_HASH_KEY);
	#else
		auth    = hmacsha1(D2_SA3_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_D2_SA4 {
#if HAVE_IKE
	#if USE_SA4_DES_CBC
		crypt   = descbc_2(hexstr(D2_SA4_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D2_SA4_ENC_KEY, 24));
	#endif
	#if USE_SA4_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D2_SA4_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D2_SA4_HASH_KEY, 20));
	#endif
#else
	#if USE_SA4_DES_CBC
		crypt   = descbc(D2_SA4_ENC_KEY);
	#else
		crypt   = des3cbc(D2_SA4_ENC_KEY);
	#endif
	#if USE_SA4_HMAC_MD5
		auth    = hmacmd5(D2_SA4_HASH_KEY);
	#else
		auth    = hmacsha1(D2_SA4_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_D2_SA5 {
#if HAVE_IKE
	#if USE_SA5_DES_CBC
		crypt   = descbc_2(hexstr(D2_SA5_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D2_SA5_ENC_KEY, 24));
	#endif
	#if USE_SA5_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D2_SA5_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D2_SA5_HASH_KEY, 20));
	#endif
#else
	#if USE_SA5_DES_CBC
		crypt   = descbc(D2_SA5_ENC_KEY);
	#else
		crypt   = des3cbc(D2_SA5_ENC_KEY);
	#endif
	#if USE_SA5_HMAC_MD5
		auth    = hmacmd5(D2_SA5_HASH_KEY);
	#else
		auth    = hmacsha1(D2_SA5_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_D2_SA6 {
#if HAVE_IKE
	#if USE_SA6_DES_CBC
		crypt   = descbc_2(hexstr(D2_SA6_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D2_SA6_ENC_KEY, 24));
	#endif
	#if USE_SA6_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D2_SA6_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D2_SA6_HASH_KEY, 20));
	#endif
#else
	#if USE_SA6_DES_CBC
		crypt   = descbc(D2_SA6_ENC_KEY);
	#else
		crypt   = des3cbc(D2_SA6_ENC_KEY);
	#endif
	#if USE_SA6_HMAC_MD5
		auth    = hmacmd5(D2_SA6_HASH_KEY);
	#else
		auth    = hmacsha1(D2_SA6_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_D2_SA7 {
#if HAVE_IKE
	#if USE_SA7_DES_CBC
		crypt   = descbc_2(hexstr(D2_SA7_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D2_SA7_ENC_KEY, 24));
	#endif
	#if USE_SA7_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D2_SA7_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D2_SA7_HASH_KEY, 20));
	#endif
#else
	#if USE_SA7_DES_CBC
		crypt   = descbc(D2_SA7_ENC_KEY);
	#else
		crypt   = des3cbc(D2_SA7_ENC_KEY);
	#endif
	#if USE_SA7_HMAC_MD5
		auth    = hmacmd5(D2_SA7_HASH_KEY);
	#else
		auth    = hmacsha1(D2_SA7_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_D2_SA8 {
#if HAVE_IKE
	#if USE_SA8_DES_CBC
		crypt   = descbc_2(hexstr(D2_SA8_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D2_SA8_ENC_KEY, 24));
	#endif
	#if USE_SA8_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D2_SA8_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D2_SA8_HASH_KEY, 20));
	#endif
#else
	#if USE_SA8_DES_CBC
		crypt   = descbc(D2_SA8_ENC_KEY);
	#else
		crypt   = des3cbc(D2_SA8_ENC_KEY);
	#endif
	#if USE_SA8_HMAC_MD5
		auth    = hmacmd5(D2_SA8_HASH_KEY);
	#else
		auth    = hmacsha1(D2_SA8_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_D2_SA9 {
#if HAVE_IKE
	#if USE_SA9_DES_CBC
		crypt   = descbc_2(hexstr(D2_SA9_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D2_SA9_ENC_KEY, 24));
	#endif
	#if USE_SA9_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D2_SA9_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D2_SA9_HASH_KEY, 20));
	#endif
#else
	#if USE_SA9_DES_CBC
		crypt   = descbc(D2_SA9_ENC_KEY);
	#else
		crypt   = des3cbc(D2_SA9_ENC_KEY);
	#endif
	#if USE_SA9_HMAC_MD5
		auth    = hmacmd5(D2_SA9_HASH_KEY);
	#else
		auth    = hmacsha1(D2_SA9_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_D2_SA10 {
#if HAVE_IKE
	#if USE_SA10_DES_CBC
		crypt   = descbc_2(hexstr(D2_SA10_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D2_SA10_ENC_KEY, 24));
	#endif
	#if USE_SA10_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D2_SA10_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D2_SA10_HASH_KEY, 20));
	#endif
#else
	#if USE_SA10_DES_CBC
		crypt   = descbc_2(D2_SA10_ENC_KEY);
	#else
		crypt   = des3cbc(D2_SA10_ENC_KEY);
	#endif
	#if USE_SA10_HMAC_MD5
		auth    = hmacmd5(D2_SA10_HASH_KEY);
	#else
		auth    = hmacsha1(D2_SA10_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_D2_2_SA9 {
#if HAVE_IKE
	#if USE_SA9_DES_CBC
		crypt   = descbc_2(hexstr(D2_2_SA9_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D2_2_SA9_ENC_KEY, 24));
	#endif
	#if USE_SA9_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D2_2_SA9_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D2_2_SA9_HASH_KEY, 20));
	#endif
#else
	#if USE_SA9_DES_CBC
		crypt   = descbc(D2_2_SA9_ENC_KEY);
	#else
		crypt   = des3cbc(D2_2_SA9_ENC_KEY);
	#endif
	#if USE_SA9_HMAC_MD5
		auth    = hmacmd5(D2_2_SA9_HASH_KEY);
	#else
		auth    = hmacsha1(D2_2_SA9_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_D2_2_SA10 {
#if HAVE_IKE
	#if USE_SA10_DES_CBC
		crypt   = descbc_2(hexstr(D2_2_SA10_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D2_2_SA10_ENC_KEY, 24));
	#endif
	#if USE_SA10_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D2_2_SA10_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D2_2_SA10_HASH_KEY, 20));
	#endif
#else
	#if USE_SA10_DES_CBC
		crypt   = descbc_2(D2_2_SA10_ENC_KEY);
	#else
		crypt   = des3cbc(D2_2_SA10_ENC_KEY);
	#endif
	#if USE_SA10_HMAC_MD5
		auth    = hmacmd5(D2_2_SA10_HASH_KEY);
	#else
		auth    = hmacsha1(D2_2_SA10_HASH_KEY);
	#endif
#endif
}


//-------------------
// HA <-> MR device4
//-------------------

ESPAlgorithm algorithm_D4_SA1 {
#if HAVE_IKE
	#if USE_SA1_DES_CBC
		crypt   = descbc_2(hexstr(D4_SA1_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D4_SA1_ENC_KEY, 24));
	#endif
	#if USE_SA1_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D4_SA1_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D4_SA1_HASH_KEY, 20));
	#endif
#else
	#if USE_SA1_DES_CBC
		crypt   = descbc(D4_SA1_ENC_KEY);
	#else
		crypt   = des3cbc(D4_SA1_ENC_KEY);
	#endif
	#if USE_SA1_HMAC_MD5
		auth    = hmacmd5(D4_SA1_HASH_KEY);
	#else
		auth    = hmacsha1(D4_SA1_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_D4_SA2 {
#if HAVE_IKE
	#if USE_SA2_DES_CBC
		crypt   = descbc_2(hexstr(D4_SA2_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D4_SA2_ENC_KEY, 24));
	#endif
	#if USE_SA2_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D4_SA2_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D4_SA2_HASH_KEY, 20));
	#endif
#else
	#if USE_SA2_DES_CBC
		crypt   = descbc(D4_SA2_ENC_KEY);
	#else
		crypt   = des3cbc(D4_SA2_ENC_KEY);
	#endif
	#if USE_SA2_HMAC_MD5
		auth    = hmacmd5(D4_SA2_HASH_KEY);
	#else
		auth    = hmacsha1(D4_SA2_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_D4_SA3 {
#if HAVE_IKE
	#if USE_SA3_DES_CBC
		crypt   = descbc_2(hexstr(D4_SA3_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D4_SA3_ENC_KEY, 24));
	#endif
	#if USE_SA3_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D4_SA3_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D4_SA3_HASH_KEY, 20));
	#endif
#else
	#if USE_SA3_DES_CBC
		crypt   = descbc(D4_SA3_ENC_KEY);
	#else
		crypt   = des3cbc(D4_SA3_ENC_KEY);
	#endif
	#if USE_SA3_HMAC_MD5
		auth    = hmacmd5(D4_SA3_HASH_KEY);
	#else
		auth    = hmacsha1(D4_SA3_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_D4_SA4 {
#if HAVE_IKE
	#if USE_SA4_DES_CBC
		crypt   = descbc_2(hexstr(D4_SA4_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D4_SA4_ENC_KEY, 24));
	#endif
	#if USE_SA4_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D4_SA4_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D4_SA4_HASH_KEY, 20));
	#endif
#else
	#if USE_SA4_DES_CBC
		crypt   = descbc(D4_SA4_ENC_KEY);
	#else
		crypt   = des3cbc(D4_SA4_ENC_KEY);
	#endif
	#if USE_SA4_HMAC_MD5
		auth    = hmacmd5(D4_SA4_HASH_KEY);
	#else
		auth    = hmacsha1(D4_SA4_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_D4_SA5 {
#if HAVE_IKE
	#if USE_SA5_DES_CBC
		crypt   = descbc_2(hexstr(D4_SA5_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D4_SA5_ENC_KEY, 24));
	#endif
	#if USE_SA5_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D4_SA5_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D4_SA5_HASH_KEY, 20));
	#endif
#else
	#if USE_SA5_DES_CBC
		crypt   = descbc(D4_SA5_ENC_KEY);
	#else
		crypt   = des3cbc(D4_SA5_ENC_KEY);
	#endif
	#if USE_SA5_HMAC_MD5
		auth    = hmacmd5(D4_SA5_HASH_KEY);
	#else
		auth    = hmacsha1(D4_SA5_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_D4_SA6 {
#if HAVE_IKE
	#if USE_SA6_DES_CBC
		crypt   = descbc_2(hexstr(D4_SA6_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D4_SA6_ENC_KEY, 24));
	#endif
	#if USE_SA6_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D4_SA6_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D4_SA6_HASH_KEY, 20));
	#endif
#else
	#if USE_SA6_DES_CBC
		crypt   = descbc(D4_SA6_ENC_KEY);
	#else
		crypt   = des3cbc(D4_SA6_ENC_KEY);
	#endif
	#if USE_SA6_HMAC_MD5
		auth    = hmacmd5(D4_SA6_HASH_KEY);
	#else
		auth    = hmacsha1(D4_SA6_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_D4_SA7 {
#if HAVE_IKE
	#if USE_SA7_DES_CBC
		crypt   = descbc_2(hexstr(D4_SA7_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D4_SA7_ENC_KEY, 24));
	#endif
	#if USE_SA7_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D4_SA7_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D4_SA7_HASH_KEY, 20));
	#endif
#else
	#if USE_SA7_DES_CBC
		crypt   = descbc(D4_SA7_ENC_KEY);
	#else
		crypt   = des3cbc(D4_SA7_ENC_KEY);
	#endif
	#if USE_SA7_HMAC_MD5
		auth    = hmacmd5(D4_SA7_HASH_KEY);
	#else
		auth    = hmacsha1(D4_SA7_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_D4_SA8 {
#if HAVE_IKE
	#if USE_SA8_DES_CBC
		crypt   = descbc_2(hexstr(D4_SA8_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D4_SA8_ENC_KEY, 24));
	#endif
	#if USE_SA8_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D4_SA8_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D4_SA8_HASH_KEY, 20));
	#endif
#else
	#if USE_SA8_DES_CBC
		crypt   = descbc(D4_SA8_ENC_KEY);
	#else
		crypt   = des3cbc(D4_SA8_ENC_KEY);
	#endif
	#if USE_SA8_HMAC_MD5
		auth    = hmacmd5(D4_SA8_HASH_KEY);
	#else
		auth    = hmacsha1(D4_SA8_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_D4_SA9 {
#if HAVE_IKE
	#if USE_SA9_DES_CBC
		crypt   = descbc_2(hexstr(D4_SA9_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D4_SA9_ENC_KEY, 24));
	#endif
	#if USE_SA9_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D4_SA9_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D4_SA9_HASH_KEY, 20));
	#endif
#else
	#if USE_SA9_DES_CBC
		crypt   = descbc(D4_SA9_ENC_KEY);
	#else
		crypt   = des3cbc(D4_SA9_ENC_KEY);
	#endif
	#if USE_SA9_HMAC_MD5
		auth    = hmacmd5(D4_SA9_HASH_KEY);
	#else
		auth    = hmacsha1(D4_SA9_HASH_KEY);
	#endif
#endif
}


ESPAlgorithm algorithm_D4_SA10 {
#if HAVE_IKE
	#if USE_SA10_DES_CBC
		crypt   = descbc_2(hexstr(D4_SA10_ENC_KEY, 8));
	#else
		crypt   = des3cbc_2(hexstr(D4_SA10_ENC_KEY, 24));
	#endif
	#if USE_SA10_HMAC_MD5
		auth    = hmacmd5_2(hexstr(D4_SA10_HASH_KEY, 16));
	#else
		auth    = hmacsha1_2(hexstr(D4_SA10_HASH_KEY, 20));
	#endif
#else
	#if USE_SA10_DES_CBC
		crypt   = descbc_2(D4_SA10_ENC_KEY);
	#else
		crypt   = des3cbc(D4_SA10_ENC_KEY);
	#endif
	#if USE_SA10_HMAC_MD5
		auth    = hmacmd5(D4_SA10_HASH_KEY);
	#else
		auth    = hmacsha1(D4_SA10_HASH_KEY);
	#endif
#endif
}


#endif
