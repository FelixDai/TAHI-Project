#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: dhcpv6.p2/rfc3633/C_RFC3633_ValidRep_resReq_10_1_2_A.seq,v 1.2 2009/12/03 06:03:40 akisada Exp $
#
########################################################################

BEGIN{
	$V6evalTool::TestVersion = '$Name: T_DHCPv6_Self_Test_P2_1_1_4 $';
}
use strict;
use V6evalTool;

use lib '../.';
use DHCPv6_common;
use Client_pktdesc;

my $type=$V6evalTool::NutDef{Type};
if($type ne 'router') {
	vLogHTML('<FONT COLOR="#FF0000">This test does not support Host!</FONT>');
	exit $V6evalTool::exitRouterOnly;
}

dhcpExitNS if(ChkFuncSupport('PREFIX_DELEGATION'));

#--------------------------------------------------------------#
# Initialization variables
#--------------------------------------------------------------#
my $IF0_NUT = $V6evalTool::NutDef{"Link0_device"};
my $IF0 = "Link0";
my ($plifetime, $vlifetime) = (100, 200);
my ($time1, $time2) = (0.5*$plifetime, 0.8*$plifetime);
my $timeout = $time1 + 5;

vClear($IF0);
vCapture($IF0);
#--------------------------------------------------------------#
# Initialize DHCPv6 Client
#--------------------------------------------------------------#
my $ret = vRemote("dhcp6c.rmt", "start", "prefix", "pd_iaid", "rd_iaid", "rentime=50","rebtime=80", "link0=$IF0_NUT");

if($ret != 0) {
        vLogHTML('<FONT COLOR="#FF0000">Cannot Initialize DHCPv6 Client program.</FONT><BR>');
        dhcpExitFail;
};

#--------------------------------------------------------------#
#1.  Wait until Solicit arrives 
#--------------------------------------------------------------#
my ($retsol,%sol) = wait_for_solicit($IF0,30);
if($retsol != 0){
	dhcpExitFail;
}
vClear($IF0);
#--------------------------------------------------------------#
#2. Send Advertise to reply to Solicit
#--------------------------------------------------------------#
$SID_OPTION = "opt_SID_LLT_server1";
$IA_PD_OPTION = "opt_IA_PD_Prefix2";

my ($retadv, %adv) = send_advertise($IF0, "advertise_server1_to_nut", \%sol, "");
if($retadv != 0){
	dhcpExitFail;
}

#--------------------------------------------------------------#
#3.  Wait until Request arrives 
#--------------------------------------------------------------#
my ($retreq, %req) = wait_for_request($IF0,30);
if($retreq != 0){
	dhcpExitFail;
}
#--------------------------------------------------------------#
# Judge
#--------------------------------------------------------------#
# A msg-type field set to REQUEST(3)
        my $basereq = "Frame_Ether.Packet_IPv6.Upp_UDP.Udp_DHCPv6_Request";
        my $baserep = "Frame_Ether.Packet_IPv6.Upp_UDP.Udp_DHCPv6_Reply";
if (3 != $req{"$basereq.Type"}){
        dhcpExitFail();
}


# A Server Identifier option (containing DUID)
if (0 != options_exist(\%req,$CMP_SID)){
        dhcpExitError("Can not find necessary(SID) option! ");
}
if(0 != (compare_id(\%adv, \%req, ($CMP_SID)))){
         dhcpExitFail();
}

# Check the format of IA_PD option
if (0 != parse_IAPD_option2(\%req)){
        dhcpExitError("<B>Do not include necessary options!</B>");
}

#if (0 != parse_IAPrefix_option(\%req)){
#        dhcpExitError("<B>Do not include necessary options!</B>");
#}

vClear($IF0);
#--------------------------------------------------------------#
#4. send Reply message
#--------------------------------------------------------------#
$IA_PD_OPTION = "opt_IA_PD_Prefix2";
$StatusCode_OPTION = "opt_StatusCode";

my ($retrep, %rep) = send_reply($IF0, "reply_server1_to_nut", \%req, "");
if($retrep != 0){
	dhcpExitFail;
}


#--------------------------------------------------------------#
#5. Wait until Renew arrives 
#--------------------------------------------------------------#
my ($retren,%ren) = wait_for_renew($IF0, $timeout);
if($retren != 0){
	dhcpExitFail;
	}

# check recvtime
if (0 != check_RecvTime(\%rep, \%ren, $time1)){
        dhcpExitError("<B>The Received time error! </B><BR>");
}


#--------------------------------------------------------------#
# Judge
#--------------------------------------------------------------#

my $base = "Frame_Ether.Packet_IPv6.Upp_UDP.Udp_DHCPv6_Renew";
my $msgtype =$ren{"$base"."."."Type"};
vLogHTML("<B> Type is $msgtype </B><BR>");
if($msgtype != 5){
        vLogHTML('<FONT COLOR="#FF0000">msg-type is not a proper value.</FONT><BR>');
        dhcpExitFail;
}

my $identifier =$ren{"$base"."."."Identifier"};
vLogHTML("<B> Identifier is $identifier </B><BR>");
if($identifier == 0){
        vLogHTML('<FONT COLOR="#FF0000">Identifier is not non-zero value.</FONT><BR>');
        dhcpExitFail;
}

if(0 != options_exist(\%ren,($CMP_SID|$CMP_CID|$CMP_IA_PD))){
vLogHTML('<FONT COLOR="#FF0000">option is not a proper format.</FONT><BR>');
        dhcpExitFail;
}
# compare prefix
if (0 != compare_prefix(\%rep, \%ren, ($CMP_IA_PREFIX))){
        dhcpExitError("<B>The option error!Do not same as the previous message</B><BR>");
}

vClear($IF0);
vStop($IF0);
dhcpExitPass;
###############################################################################
__END__

=head1 NAME 

  C_RFC3633_ValidRep_resReq_10_1_2_A.seq - Test case of Solicit-Advertise-Request-Reply Exchange

=head1 TARGET

  Requesting Router

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./C_RFC3633_ValidRep_resReq_10_1_2_A.seq"> C_RFC3633_ValidRep_resReq_10_1_2_A.seq</A> [-tooloption...] <BR>  -pkt  <A HREF="./C_RFC3633_ValidRep_resReq_10_1_2_A.def"> C_RFC3633_ValidRep_resReq_10_1_2_A.def</A> <BR>  -tooloption : v6eval tool option
<BR>
  See Also <A HREF="../DHCPv6.def"> DHCPv6.def </A> 
</PRE>

=end html

=head1 INITIALIZATION

=begin html
  <ul>
  <li><STRONG>Network Topology</STRONG></li> 
   <PRE>
          NUT(Requesting Router)
          |           
          |                        
Link0   --+--------+------------------------ 3ffe:501:ffff:100::/64
                   |
                   |          
                   TN(Delegating Router) 
   </PRE>
  </ul>
  <ul>    
  <li><STRONG>Verification Points</STRONG></li><br>
   <PRE>
   To request the assignment of one or more IPv6 addresses, a client
   first locates a DHCP server and then requests the assignment of
   addresses from the server.  The client sends a Solicit message to the
   All_DHCP_Relay_Agents_and_Servers address to find available DHCP
   servers.  Any server that can meet the client's requirements responds
   with an Advertise message.  The client then chooses one of the
   servers and sends a Request message to the server asking for
   confirmed assignment of addresses and other configuration
   information.  The server responds with a Reply message that contains
   the confirmed addresses and configuration.
   <BR>
   In order to test whether the client(NUT) has accepted the assignment of
   DHCPv6 Server(TN), TN sends Echo Request to NUT. And NUT sends Echo Reply
   in response to Echo Request from TN.

   </PRE>
  </ul>
  <ul>
  <li><STRONG>Configurations</STRONG></li><br>
   <BR>
    <TABLE BORDER="1">
    <TR>
    <TD><TT>Device Name</TT></TD>
    <TD><TT>Device Type</TT></TD>
    <TD><TT>Interface</TT></TD>
    <TD><TT>Assigned Prefix</TT></TD>
    <TD><TT>Link Local Addr</TT></TD>
    <TD><TT>MAC Addr</TT></TD>
    </TR>
    <TR>
    <TD><TT>Requesting Router</TT></TD>
    <TD><TT>NUT</TT></TD>
    <TD><TT>Link0</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>NUT's Linklocal address</TT></TD>
    <TD><TT>NUT's MAC address</TT></TD>
    </TR>
    <TR>
    <TD><TT>Delegating Router</TT></TD>
    <TD><TT>TN</TT></TD>
    <TD><TT>Link0</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>fe80::200:ff:fe00:a1a1</TT></TD>
    <TD><TT>00:00:00:00:a1:a1</TT></TD>
    </TR>
    </TABLE>
  </ul>

=end html

=head1 TEST PROCEDURE

=begin html
<PRE>
<BR>
       NUT      TN
        |       |
        |       |Initialize NUT(as a DHCPv6 requesting router)
        |       |
        | ----> |<B>Solicit</B> (1*)
        | <---- |<B>Advertise</B> (2*)
        | ----> |<B>Request</B> (3*)
        | <---- |<B>Reply</B> w/IA_NA option(T1=50,T2=80) (4*)
        |       |
        |       | Wait T1 time expire
        |       |
        | ----> |<B>Renew</B> (5*)
        |       |
<BR>
</PRE>

=end html

=head1 JUDGEMENT

=begin html
<PRE>
<BR>
  (1*)PASS: TN receives Solicit from NUT.
  (2*)PASS: TN receives Request form NUT.
  (5*)PASS: TN receives Renew from NUT.
</PRE>

=end html

=head1 TERMINATION

=begin html
<PRE>
  N/A
</PRE>

=end html

=head1 REFERENCE

=begin html
<PRE>
  Also see RFC3315
<BR>

<BR>
</PRE>

=end html

=head1 SEE ALSO

=begin html
<PRE>
<BR>
  perldoc  V6evalTool
<BR>
</PRE>

=end html
