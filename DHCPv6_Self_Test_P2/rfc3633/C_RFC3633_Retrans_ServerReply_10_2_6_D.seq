#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: dhcpv6.p2/rfc3633/C_RFC3633_Retrans_ServerReply_10_2_6_D.seq,v 1.2 2009/12/03 06:03:40 akisada Exp $
#
########################################################################

BEGIN{
	$V6evalTool::TestVersion = '$Name: T_DHCPv6_Self_Test_P2_1_1_4 $';
}
use strict;
use V6evalTool;

use lib '../.';
use DHCPv6_common;
use Client_pktdesc;

my $type=$V6evalTool::NutDef{Type};
if($type ne 'router') {
	vLogHTML('<FONT COLOR="#FF0000">This test does not support Host!</FONT>');
	exit $V6evalTool::exitRouterOnly;
}

dhcpExitNS if(ChkFuncSupport('PREFIX_DELEGATION'));

#--------------------------------------------------------------#
# Initialization variables
#--------------------------------------------------------------#
my $IF0_NUT = $V6evalTool::NutDef{"Link0_device"};
my $IF0 = "Link0";
my ($time1, $time2) = (50, 80);
my $timeout = 20*$REL_TIMEOUT;


vCapture($IF0);
#--------------------------------------------------------------#
# Initialize DHCPv6 Client
#--------------------------------------------------------------#
my $ret = vRemote("dhcp6c.rmt", "start", "pd_iaid", "rd_iaid", "prefix", "rentime=50", "rebtime=80", "link0=$IF0_NUT");
if($ret != 0) {
	vLogHTML('<FONT COLOR="#FF0000">Cannot Initialize DHCPv6 Client program.</FONT><BR>');
	dhcpExitFail;
};
#--------------------------------------------------------------#
#1.  Wait until Solicit arrives 
#--------------------------------------------------------------#
my ($retsol,%sol1) = wait_for_solicit($IF0,30);
if($retsol != 0){
	dhcpExitFail;
}
#vClear($IF0);
#--------------------------------------------------------------#
#2. Send Advertise to reply to Solicit
#--------------------------------------------------------------#
$SID_OPTION = "opt_SID_LLT_server1";
$IA_PD_OPTION = "opt_IA_PD_Prefix2";

my ($retadv, %adv2) = send_advertise($IF0, "advertise_server1_to_nut", \%sol1, "");
if($retadv != 0){
	dhcpExitFail;
}
#--------------------------------------------------------------#
#3.  Wait until Request arrives 
#--------------------------------------------------------------#
my ($retreq, %req3) = wait_for_request($IF0,30);
if($retreq != 0){
	dhcpExitFail;
}
vClear($IF0);
#--------------------------------------------------------------#
#4. send Reply message
#--------------------------------------------------------------#
#$IA_PD_OPTION = "opt_IA_PD_Prefix2";
$StatusCode_OPTION = "opt_StatusCode";

my ($retrep, %rep4) = send_reply($IF0, "reply_server1_to_nut", \%req3, "");
if($retrep != 0){
	dhcpExitFail;
}
vClear($IF0);

#--------------------------------------------------------------#
#5. Wait until Renew arrives 
#--------------------------------------------------------------#
my $rentimeout = $time1 + 5;
# Judge CID,SID option
my ($retren,%ren5) = wait_for_renew($IF0, $rentimeout);
if($retren != 0){
	dhcpExitFail;
}

# check recvtime
if (0 != check_RecvTime(\%rep4, \%ren5, $time1)){
        dhcpExitError("<B>The Received time error! </B><BR>");
}

#--------------------------------------------------------------#
#6. send Reply message
#--------------------------------------------------------------#
#$IA_PD_OPTION = "opt_IA_PD_Prefix2";
#$StatusCode_OPTION = "opt_StatusCode";

#my ($plifetime, $vlifetime) = (60, 90);
#my ($time1, $time2) = (0.5*$plifetime, 0.8*$plifetime);
#my ($time1, $time2) = (50, 80);
#my ($retrep, %rep6) = send_reply($IF0, "reply_server1_to_nut", \%ren5, "-DIA_PD_TIME1=$time1 -DIA_PD_TIME2=$time2 -DIA_PREFIX_PLTIME=$plifetime -DIA_PREFIX_VLTIME=$vlifetime ");
#my ($retrep, %rep6) = send_reply($IF0, "reply_server1_to_nut", \%ren5, "");
#if($retrep != 0){
#        dhcpExitFail;
#}

#vClear($IF0);
#--------------------------------------------------------------#
# NUT Releases prefix(es)
#--------------------------------------------------------------#
$ret = vRemote("dhcp6c.rmt", "release", "link0=$IF0_NUT");
if($ret != 0) {
    vLogHTML('<FONT COLOR="#FF0000">Release Prefix failed !</FONT><BR>');
    dhcpExitFail;
};

#--------------------------------------------------------------#
#7. Wait until Release arrives 
#--------------------------------------------------------------#
my ($retrel1,%rel1) = wait_for_release($IF0, $timeout);
if($retrel1 != 0){
	dhcpExitFail;
}


#--------------------------------------------------------------#
#8. Wait until retransmitted message arrives 
#--------------------------------------------------------------#
my ($retrel1,%rel1) = wait_for_release($IF0, $timeout);
if($retrel1 != 0){
	dhcpExitFail;
}

#--------------------------------------------------------------#
#6. Reply with status code of NoBinding
#--------------------------------------------------------------#
$IA_PD_OPTION = "opt_IA_PD_StatusOnly";
$StatusCode_OPTION = undef;
my $cppstr = " -DIA_PREFIX_STATUSCODE=3";
my ($retrep, %rep) = send_reply($IF0, "reply_server1_to_nut", \%rel1, $cppstr);
if($retrep !=0){
	dhcpExitFail;
}
#--------------------------------------------------------------#
#7. wait for new solicitation 
#--------------------------------------------------------------#
my ($retrel2, %rel2) = wait_for_release($IF0, $timeout);
if($retrel2 == 0){
	dhcpExitFail;
}

vClear($IF0);
vStop($IF0);
dhcpExitPass;
###############################################################################
__END__

=head1 NAME 

  C_RFC3633_Retrans_ServerReply_10_2_6_D.seq - Check Failure of Release-Reply Exchange 

=head1 TARGET

  Client

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./C_RFC3633_Retrans_ServerReply_10_2_6_D.seq"> C_RFC3633_Retrans_ServerReply_10_2_6_D.seq</A> [-tooloption...] <BR>  -pkt  <A HREF="./C_RFC3633_Retrans_ServerReply_10_2_6_D.def"> C_RFC3633_Retrans_ServerReply_10_2_6_D.def</A> <BR>  -tooloption : v6eval tool option
<BR>
  See Also <A HREF="../DHCPv6.def"> DHCPv6.def </A> 
</PRE>

=end html

=head1 INITIALIZATION

=begin html
  <ul>
  <li><STRONG>Network Topology</STRONG></li> 
   <PRE>
          NUT(Client)
          |           
          |                        
Link0   --+--------+------------------------ 3ffe:501:ffff:100::/64
                   |
                   |          
                   TN(Server) 
   </PRE>
  </ul>
  <ul>  
  <li><STRONG>Verification Points</STRONG></li><br>
   <PRE>
   If addresses are released but the Reply from a DHCP server is lost,
   the client will retransmit the Release message, and the server may
   respond with a Reply indicating a status of NoBinding.  Therefore,
   the client does not treat a Reply message with a status of NoBinding
   in a Release message exchange as if it indicates an error.
   </PRE>
  </ul>
  <ul> 
  <li><STRONG>Configurations</STRONG></li><br>
   <BR>
    <TABLE BORDER="1">
    <TR>
    <TD><TT>Device Name</TT></TD>
    <TD><TT>Device Type</TT></TD>
    <TD><TT>Interface</TT></TD>
    <TD><TT>Assigned Prefix</TT></TD>
    <TD><TT>Link Local Addr</TT></TD>
    <TD><TT>MAC Addr</TT></TD>
    </TR>
    <TR>
    <TD><TT>Client</TT></TD>
    <TD><TT>NUT</TT></TD>
    <TD><TT>Link0</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>NUT's Linklocal address</TT></TD>
    <TD><TT>NUT's MAC address</TT></TD>
    </TR>
    <TR>
    <TD><TT>Server</TT></TD>
    <TD><TT>TN</TT></TD>
    <TD><TT>Link0</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>fe80::200:ff:fe00:a1a1</TT></TD>
    <TD><TT>00:00:00:00:a1:a1</TT></TD>
    </TR>
    </TABLE>
  </ul>

=end html

=head1 TEST PROCEDURE

=begin html
<PRE>
<BR>
       NUT      TN
        |       |
        |       |Initialize NUT (as a DHCPv6 Client)
        |       |
        | ----> |<B>Solicit</B> 
        | <---- |<B>Advertise</B> 
        | ----> |<B>Request</B> 
        | <---- |<B>Reply</B> 
        |       |
        | <---- |<B>Echo Request</B>
        | ----> |<B>Echo Reply</B>
        |       |	 
        |       |NUT initiates the Release-Reply Exchange
        |       |
        | ----> |<B>Release</B> 
        |       |
        |       |Before first RT time expires
        |       |
        | ----> |<B>Release</B> 
        | <---- |<B>Reply</B>(W/Status code/NoBinding) 
        | ----> |<B>Release</B> (10*)
        |       |
</PRE>

=end html


=head1 JUDGEMENT

=begin html
<PRE>
<BR>  
  (10*)PASS: NUT does not transmit Release any more.
</PRE>

=end html

=head1 TERMINATION

=begin html
<PRE>
  N/A
</PRE>

=end html

=head1 REFERENCE

=begin html
<PRE>
  Also see RFC3315
<BR>
  18.1.6. Creation and Transmission of Release Messages
<BR>
</PRE>

=end html

=head1 SEE ALSO

=begin html
<PRE>
<BR>
  perldoc  V6evalTool
<BR>
</PRE>

=end html

