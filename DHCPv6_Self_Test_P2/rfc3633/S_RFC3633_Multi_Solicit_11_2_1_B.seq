#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: dhcpv6.p2/rfc3633/S_RFC3633_Multi_Solicit_11_2_1_B.seq,v 1.2 2009/12/03 06:03:41 akisada Exp $
#
########################################################################

BEGIN { $V6evalTool::TestVersion = '$Name: T_DHCPv6_Self_Test_P2_1_1_4 $';
}

use strict;
use V6evalTool;

use lib '../.';
use DHCPv6_common;
use Server_pktdesc;

my $type=$V6evalTool::NutDef{Type};
if($type ne 'router') {
	vLogHTML('<FONT COLOR="#FF0000">This test does not support Host!</FONT>');
	exit $V6evalTool::exitRouterOnly;
}

dhcpExitNS if(ChkFuncSupport('PREFIX_DELEGATION'));

#--------------------------------------------------------------#
# Initialization
#--------------------------------------------------------------#

vLogHTML('<B>==== NUT Initialization ====</B><BR>');
my $IF0 = "Link0";

#initial NUT config parameters,
my %NUT_Delegating_Config = (
       'if_nut0'=> "$V6evalTool::NutDef{Link0_device}",
#      'if_nut1' => "$V6evalTool::NutDef{Link1_device}",
#      'if_add0' => "$NUTRELAY1_LINK0_GLOBAL_UCAST",
#      'if_add1' => "$NUTRELAY1_LINK1_GLOBAL_UCAST",
#      'if_length0' => "64",
#      'if_length1' => "64",
#      'if_type0'=> "unicast",
#      'if_type1'=> "unicast",
       'init_opcode' => "vRemote(\"dhcp6s.rmt\", \"start\",\"link0=$V6evalTool::NutDef{Link0_device}\",\"startaddr=3ffe:501:ffff:100::10\",\"endaddr=3ffe:501:ffff:100::11\",\"delegateprefix=2001:db8:ffff::\",\"other_delegateprefix=2001:db9:ffff::\",\"delegateprefix_range=48\",\"delegateprefixlength=48\",\"preferredlifetime=10000\", \"validlifetime=20000\", \"renewtime=50\",\"rebindtime=80\")");

dhcpDelegatingInit(\%NUT_Delegating_Config);


vClear($IF0);
#--------------------------------------------------------------#
# Main Procedure
#--------------------------------------------------------------#

# send DHCPv6 Solicit Message
$CID_OPTION = "opt_CID_LLT_client1";
$IA_PD_OPTION = "opt_IA_PD_Prefix2";
$ElapsedTime_OPTION = "opt_ElapsedTime";
my ($ret1, %sol1) = send_solicit($IF0, "solicit_client1_to_alldhcp", "");
if (0 != $ret1){
	dhcpExitFail();
}



# wait for DHCPv6 Advertise Message
my ($ret2, %adv2) = wait_for_advertise($IF0, 5);
if (0 != $ret2) {
	vLogHTML("NUT did not send Advertise Message.<BR>");
	dhcpExitFail();
}

#--------------------------------------------------------------#
# Judge
#--------------------------------------------------------------#
# Destination address set to TN1's unicast address same as the solicit message's source address
if (! ($sol1{'Frame_Ether.Packet_IPv6.Hdr_IPv6.SourceAddress'} eq $adv2{'Frame_Ether.Packet_IPv6.Hdr_IPv6.DestinationAddress'})) {
        dhcpExitFail();
}

# A msg-type field set to ADVERTISE(2)
        my $basesol = "Frame_Ether.Packet_IPv6.Upp_UDP.Udp_DHCPv6_Solicit";
        my $baseadv = "Frame_Ether.Packet_IPv6.Upp_UDP.Udp_DHCPv6_Advertise";
if (2 != $adv2{"$baseadv.Type"}){
        dhcpExitFail();
}

# Transaction-id set to the same as Solicit message's transaction-id
if(0 != (compare_transactionID(\%sol1, \%adv2))){
	 vLogHTML('<FONT COLOR="#FF0000">Transaction-id is not matched.</FONT><BR>');
	 dhcpExitFail();
}


# Check the format of IA_PD option
if (0 != parse_IAPD_option2(\%adv2)){
        dhcpExitError("<B>Do not include necessary options!</B>");
}

if (0 != parse_IAPrefix_option(\%adv2)){
        dhcpExitError("<B>Do not include necessary options!</B>");
}


# A Server Identifier option (containing DUID)
if (0 != options_exist(\%adv2,$CMP_SID)){
        dhcpExitError("Can not find necessary(SID) option! ");
}

# A Client identifier option set to the same as Solicit message's Client identifier option
if (0 != options_exist(\%adv2,$CMP_CID)){
        dhcpExitError("Can not find necessary(CID) option! ");
}

if(0 != (compare_id(\%sol1, \%adv2, ($CMP_CID)))){
	 vLogHTML('<FONT COLOR="#FF0000">DUID is not matched.</FONT><BR>');
         dhcpExitFail();
}

vClear($IF0);
#--------------------------------------------------------------#
# Main Procedure
#--------------------------------------------------------------#

# send DHCPv6 Solicit Message
$CID_OPTION = "opt_CID_LLT_client2";
$IA_PD_OPTION = "opt_IA_PD_Prefix_Multi";
$ElapsedTime_OPTION = "opt_ElapsedTime";
my ($ret3, %sol3) = send_solicit($IF0, "solicit_client2_to_alldhcp", "");
if (0 != $ret3){
	dhcpExitFail();
}


# wait for DHCPv6 Advertise Message
my ($ret4, %adv4) = wait_for_advertise($IF0, 5);
if (0 != $ret4) {
        vLogHTML("NUT did not send Advertise Message.<BR>");
        dhcpExitFail();
}
#--------------------------------------------------------------#
# Judge
#--------------------------------------------------------------#
# Destination address set to TN2's unicast address same as the solicit message's source address
if (! ($sol3{'Frame_Ether.Packet_IPv6.Hdr_IPv6.SourceAddress'} eq $adv4{'Frame_Ether.Packet_IPv6.Hdr_IPv6.DestinationAddress'})) {
        dhcpExitFail();
}

# A msg-type field set to ADVERTISE(2)
        my $basesol = "Frame_Ether.Packet_IPv6.Upp_UDP.Udp_DHCPv6_Solicit";
        my $baseadv = "Frame_Ether.Packet_IPv6.Upp_UDP.Udp_DHCPv6_Advertise";
if (2 != $adv4{"$baseadv.Type"}){
        dhcpExitFail();
}

# Transaction-id set to the same as Solicit message's transaction-id
if(0 != (compare_transactionID(\%sol3, \%adv4))){
         vLogHTML('<FONT COLOR="#FF0000">Transaction-id is not matched.</FONT><BR>');
         dhcpExitFail();
}


# Check the format of IA_PD option
if (0 != parse_IAPD_option2(\%adv4)){
        dhcpExitError("<B>Do not include necessary options!</B>");
}

if (0 != parse_IAPrefix_option(\%adv4)){
        dhcpExitError("<B>Do not include necessary options!</B>");
}

unless (0 != compare_prefix(\%adv2, \%adv4, $CMP_IA_PREFIX)){
         dhcpExitFail();
}


# A Server Identifier option (containing DUID)
if (0 != options_exist(\%adv4,$CMP_SID)){
        dhcpExitError("Can not find necessary(SID) option! ");
}

# A Client identifier option set to the same as Solicit message's Client identifier option
if (0 != options_exist(\%adv4,$CMP_CID)){
        dhcpExitError("Can not find necessary(CID) option! ");
}

if(0 != (compare_id(\%sol3, \%adv4, ($CMP_CID)))){
         vLogHTML('<FONT COLOR="#FF0000">DUID is not matched.</FONT><BR>');
         dhcpExitFail();
}

#-------------------------------------------------------------------
vLogHTML("<B><FONT COLOR=#006666>Messages Exchange is correct</FONT></B><BR>");
#-------------------------------------------------------------------

vClear($IF0);
vStop($IF0);
dhcpExitPass;



#NOTREACHED

########################################################################
__END__

=head1 NAME

  S_RFC3633_Multi_Solicit_11_2_1_B.seq - Checking Advertise in response to multi solicit. 

=head1 TARGET

  Server

=head1 SYNOPSIS

=begin html
 <PRE>
 <A HREF="./S_RFC3633_Multi_Solicit_11_2_1_B.seq">S_RFC3633_Multi_Solicit_11_2_1_B.seq </A>[-tooloption ...]
 -pkt <A HREF="./S_RFC3633_Multi_Solicit_11_2_1_B.def">S_RFC3633_Multi_Solicit_11_2_1_B.def </A>
 -tooloption: v6eval tool option
See Also <A HREF="../DHCPv6.def"> DHCPv6.def </A>
 </PRE>

=head1 INITIALIZATION

=begin html
  <ul>
  <li><STRONG>Network Topology</STRONG></li>
  </ul>
  <PRE>
          TN1(RequestingRouter1)          TN2(RequestingRouter2) 
             |                     |
Link0 -------+----------+----------+----- 3ffe:501:ffff:100::/64
                        |
                       NUT(DelegatingRouter1)
  </PRE>
  <ul>
      <li><STRONG>Verification Points</STRONG></li>
	<ul>
	<PRE>
   A requesting router first creates an IA_PD and assigns it an IAID.
   The requesting router then transmits a Solicit message containing an
   IA_PD option describing the IA_PD.  Delegating routers that can
   delegate prefixes to the IA_PD respond to the requesting router with
   an Advertise message.

   The delegating router MUST include an IA_PD option, 
   identifying any prefix(es) that the delegating router will delegate 
   to the requesting router.

	</ul>
	</PRE>
  </ul>
  <ul>
      <li><STRONG>Configuration</STRONG></li>
	<BLOCKQUOTE>
	<TABLE BORDER>
	<TR>
	<TD><TT>Device Name</TT></TD>
	<TD><TT>Device Type</TT></TD>
	<TD><TT>I/F</TT></TD>
	<TD><TT>Assigned Prefix</TT></TD>
	<TD><TT>Link Local Addr</TT></TD>
	<TD><TT>MAC Addr</TT></TD>
	</TR>
	<TR>
	<TD><TT>DelegatingRouter1</TT></TD>
	<TD><TT>NUT</TT></TD>
	<TD><TT>Link0</TT></TD>
	<TD><TT>3ffe:501:ffff:100::/64</TT></TD>
	<TD><TT>NUT's Linklocal address</TT></TD>
	<TD><TT>NUT's MAC address</TT></TD>
	</TR>
	<TR>
	<TD><TT>RequestingRouter1</TT></TD>
	<TD><TT>TN</TT></TD>
	<TD><TT>Link0</TT></TD>
	<TD><TT>3ffe:501:ffff:100::/64</TT></TD>
	<TD><TT>fe80::200:ff:fe00:a2a2</TT></TD>
	<TD><TT>00:00:00:00:a2:a2</TT></TD>
	</TR>
        <TR>
        <TD><TT>RequestingRouter2</TT></TD>
        <TD><TT>TN</TT></TD>
        <TD><TT>Link0</TT></TD>
        <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
        <TD><TT>fe80::200:ff:fe00:a3a3</TT></TD>
        <TD><TT>00:00:00:00:a3:a3</TT></TD>
        </TR>

	</TABLE>
	</BLOCKQUOTE>
</ul>

=end html

=head1 TEST PROCEDURE

=begin html
<PRE>
       NUT     TN
        |       | 
        |       | initialize NUT (as a DHCPv6 Server)
        |       | 
        | <---- | Solicit   (TN1)
        | ----> | Advertise (w/ IA_PD option)(*1)
        |       | 
        | <---- | Solicit   (TN2)
        | ----> | Advertise (w/ IA_PD option)(*2)
</PRE>

=end html

=head1 JUDGEMENT

<PRE>
The Solicit message must exchanged correctly.
(*1) PASS:The Advertise message must include IA_PD option.
(*2) PASS:The Advertise message must include IA_PD option(except (*1)).
</PRE>

=head1 TERMINATION

  N/A

=head1 REFERENCE

=begin html
<PRE>
   see also RFC3633
   7.   Overview of DHCP with Prefix Delegation
</PRE>

=end html

=head1 SEE ALSO

  perldoc V6evalTool

=cut


