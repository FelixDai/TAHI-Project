#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: dhcpv6.p2/rfc3633/C_RFC3633_RetransRebLinkDown_10_2_5_D.seq,v 1.7 2012/02/08 23:33:27 miyata Exp $
#
########################################################################

BEGIN{
	$V6evalTool::TestVersion = '$Name: T_DHCPv6_Self_Test_P2_1_1_4 $';
}
use strict;
use V6evalTool;

use lib '../.';
use DHCPv6_common;
use Client_pktdesc;

my $type=$V6evalTool::NutDef{Type};
if($type ne 'router') {
	vLogHTML('<FONT COLOR="#FF0000">This test does not support Host!</FONT>');
	exit $V6evalTool::exitRouterOnly;
}

dhcpExitNS if(ChkFuncSupport('PREFIX_DELEGATION'));

#--------------------------------------------------------------#
# Initialization variables
#--------------------------------------------------------------#
my $IF0_NUT = $V6evalTool::NutDef{"Link0_device"};
my $IF0 = "Link0";
my ($pretime, $nextime, $interval) = (0, 0, 0);
my ($plifetime, $vlifetime) = (1000, 2000);
my ($time1, $time2) = (50, 80);
my ($timeout, $timeout1) = (0, 0);
my ($start, $rd, $MRD) = (0, 0, $CNF_MAX_RD);
my $IRT = $CNF_TIMEOUT;
my $MRT = $CNF_MAX_RT;
my $mrdflag = 0;
my $mrtflag = 0;
my $reb_retrans = 0;
my $MAXCOUNT = 1;

vClear($IF0);
vCapture($IF0);
#--------------------------------------------------------------#
# Initialize DHCPv6 Client
#--------------------------------------------------------------#
my $ret = vRemote("dhcp6c.rmt", "start", "pd_iaid", "rd_iaid", "prefix", "rentime=50", "rebtime=80", "link0=$IF0_NUT");
if($ret != 0) {
	vLogHTML('<FONT COLOR="#FF0000">Cannot Initialize DHCPv6 Client program.</FONT><BR>');
	dhcpExitFail;
};
#--------------------------------------------------------------#
#1.  Wait until Solicit arrives 
#--------------------------------------------------------------#
my ($retsol,%sol) = wait_for_solicit($IF0,30);
if($retsol != 0){
	dhcpExitFail;
}
vClear($IF0);
#--------------------------------------------------------------#
#2. Send Advertise to reply to Solicit
#--------------------------------------------------------------#
$SID_OPTION = "opt_SID_LLT_server1";
$IA_PD_OPTION = "opt_IA_PD_Prefix2";

my ($retadv, %adv) = send_advertise($IF0, "advertise_server1_to_nut", \%sol, "");
if($retadv != 0){
        dhcpExitFail;
}

#--------------------------------------------------------------#
#3.  Wait until Request arrives 
#--------------------------------------------------------------#
my ($retreq, %req) = wait_for_request($IF0,30);
if($retreq != 0){
	dhcpExitFail;
}
vClear($IF0);
#--------------------------------------------------------------#
#4. send Reply message
#--------------------------------------------------------------#
$IA_PD_OPTION = "opt_IA_PD_Prefix2";
$StatusCode_OPTION = "opt_StatusCode";

my ($retrep, %rep) = send_reply($IF0, "reply_server1_to_nut", \%req, "-DIA_PD_TIME3=$time1 -DIA_PD_TIME4=$time2 -DIA_PREFIX_PLTIME=$plifetime -DIA_PREFIX_VLTIME=$vlifetime ");
#my ($retrep, %rep) = send_reply($IF0, "reply_server1_to_nut", \%req, "");
if($retrep != 0){
        dhcpExitFail;
}

my $pretime_rep = $rep{sentTime1};
my $start_rep = $pretime_rep;
#--------------------------------------------------------------#
#5. Physically disconnect and reconnect the NUT's interface
#--------------------------------------------------------------#


my $ret = vRemote("dhcp6c.rmt", "link0=$IF0_NUT", "ifdown");
if($ret != 0) {
	vLogHTML('<FONT COLOR="#FF0000">Cannot disconnect interface.</FONT><BR>');
	dhcpExitFail;
};

vSleep(5);

my $ret = vRemote("dhcp6c.rmt", "link0=$IF0_NUT", "ifup");
if($ret != 0) {
	vLogHTML('<FONT COLOR="#FF0000">Cannot reconnect interface.</FONT><BR>');
	dhcpExitFail;
};
#--------------------------------------------------------------#
#6. Wait until Rebind arrives 
#--------------------------------------------------------------#
my $retrans     = allocate_retransmission_instance($CNF_TIMEOUT, $CNF_MAX_RT, 0, $CNF_MAX_RD);

my $timeout = $time2 + 5;
my ($retreb1,%reb1) = wait_for_rebind2($IF0, $timeout);
if($retreb1 != 0){
	dhcpExitFail;
}

my $ret = options_exist(\%reb1,$CMP_ETIME);
if($ret != 0){
        dhcpExitFail;
}

my $base        = 'Frame_Ether.Packet_IPv6.Upp_UDP.Udp_DHCPv6_Rebind.Opt_DHCPv6_ElapsedTime.';

unless(defined($reb1{$base . 'Time'})) {
        vLogHTML('<FONT COLOR="#FF0000">Elapsed Time option is missing</FONT><BR>');
        dhcpExitFail;
}

my $time        = $reb1{$base . 'Time'};
vLogHTML("<B> Time of Elapsed Time Option is $time </B><BR>");

if($time != 0){
        vLogHTML('<FONT COLOR="#FF0000">Elapsed Time is not a proper time.</FONT><BR>');
        dhcpExitFail;
}

$pretime = getReceivedtime(\%reb1);
$start = $pretime;

register_retransmission($retrans, $pretime, $time);

#--------------------------------------------------------------#
#7. Wait until retransmitted message arrives
#--------------------------------------------------------------#
my ($retreb2,%reb2) = (1, ());
my $initflag = 0;

vLogHTML('<PRE>');
vLogHTML("<FONT COLOR=\"#FF0000\">IRT is $IRT sec, MRT is $MRT sec, MRD is $MRD sec</FONT><BR>");
vLogHTML('<FONT COLOR="#FF0000">Retransmitted Maximum Rebind RT.</FONT><BR>');
vLogHTML('<FONT COLOR="#FF0000">1st 2nd  3rd</FONT><BR>');
vLogHTML('<FONT COLOR="#FF0000">1.1 2.31 4.4</FONT><BR>');
vLogHTML('</PRE>');

while($mrtflag < $MAXCOUNT || $mrdflag < $MAXCOUNT){
	if($initflag != 0){
		$timeout = (2 + $RAND) * $interval;
		$timeout1 = (2 - $RAND) * $interval;  
	}else{
		$timeout = (1 + $RAND) * $IRT;
		$timeout1 = (1 - $RAND) * $IRT;
	}
	$initflag = 1;

	# If $timeout is bigger than MRT, expected RT is MRT + RAND * MRT
	if($timeout > $MRT){
		$timeout = (1 + $RAND) * $MRT;
		$timeout1 = (1 - $RAND) * $MRT;
	}


#
#----------- Wait for next retransmission
#
	($retreb2,%reb2) = wait_for_rebind($IF0, $timeout + 1);
	if($retreb2 != 0){
		dhcpExitFail;
	}
	$reb_retrans += 1;
 
	$ret = compare_message(\%reb1,\%reb2);
	if($ret != 0){
		vLogHTML('<FONT COLOR="#FF0000">Message has been changed!</FONT><BR>');
		dhcpExitFail;
	}

	$ret = compare_transactionID(\%reb1, \%reb2);
	if($ret !=0){
		vLogHTML('<FONT COLOR="#FF0000">Transaction-ID is not the same value!</FONT><BR>');
		dhcpExitFail;
	}

#
#----------- Calcurate current RT
#
	$nextime = getReceivedtime(\%reb2);
	$rd = $nextime - $start;
        $interval = $nextime - $pretime;        
	$pretime = $nextime;    

	if($interval < $timeout1  || $interval > $timeout ) {
		vLogHTML("<FONT COLOR=\"#FF0000 \">Actual RT $interval is not within  expected RT range </FONT><BR>");
		dhcpExitFail;
		vLogHTML("<FONT COLOR=\"#FF0000 \"> Actual RT is $interval, RD is $rd</FONT><BR>");
        }

	unless(defined($reb2{$base . 'Time'})) {
		vLogHTML('<FONT COLOR="#FF0000">Elapsed Time option is missing</FONT><BR>');  
		dhcpExitFail;
	}
     
	register_retransmission($retrans, $nextime, $reb2{$base . 'Time'});

#
#----------- MRD Expiration, but it must not happen
#
	if($rd > $MRD){
		vLogHTML('<FONT COLOR="#FF0000">MRD expired!</FONT><BR>');
		dhcpExitFail;
	}

#
#----------- Check if RT satisfies RT = MRT(1+RAND)
#
	if(!check_equal($interval,$MRT,$RAND)){
		$mrtflag += 1;
	}

	if($mrtflag == $MAXCOUNT) { 
		if($reb_retrans >= 3) {
			vLogHTML('<FONT COLOR="#FF0000">3 Retransmissions are achieved, lets calculate next RT and see if Actual RD > MRD check that next rebind must not come</FONT><BR>');
			my $interval_neg_RAND = 2 * $interval - ( $interval * $RAND );
			my $interval_pos_RAND = 2 * $interval + ( $interval * $RAND );
			my $rd1 = $rd + $interval_neg_RAND;
			my $rd2 = $rd + $interval_pos_RAND;
			if($rd1 > $MRD || $rd2 > $MRD) {
				$mrdflag += 1;
				vLogHTML('<FONT COLOR="#FF0000">Next retransmission will result in RD > MRD</FONT><BR>');
				vLogHTML('<FONT COLOR="#FF0000">REBIND must not come</FONT><BR>');
				#----------- Wait for next retransmission

				($retreb2,%reb2) = wait_for_rebind($IF0, $interval_pos_RAND + 1);
				if($retreb2 == 0){
					vLogHTML("<FONT COLOR=\"#FF0000 \">REBIND arrived,HENCE failing</FONT><BR>");
					dhcpExitFail;
				}
				vLogHTML("<FONT COLOR=\"#FF0000 \">For next retransmission,rd=$rd2  is greater than MRD,REBIND did not arrive</FONT><BR>"); 
			}
		}
	}
}

if($mrtflag == 1) {
	vLogHTML('<FONT COLOR="#FF0000">RT = MRT(1+RAND) observed</FONT><BR>');
}

vStop($IF0);

if(evaluate_retransmission($retrans)) {
        dhcpExitFail;
}

dhcpExitPass;
###############################################################################
__END__

=head1 NAME 

  C_RFC3633_RetransRebLinkDown_10_2_5_D.seq - Check retransmission of Rebind

=head1 TARGET

  Client

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./C_RFC3633_RetransRebLinkDown_10_2_5_D.seq"> C_RFC3633_RetransRebLinkDown_10_2_5_D.seq</A> [-tooloption...] <BR>  -pkt  <A HREF="./C_RFC3633_RetransRebLinkDown_10_2_5_D.def"> C_RFC3633_RetransRebLinkDown_10_2_5_D.def</A> <BR>  -tooloption : v6eval tool option
<BR>
  See Also <A HREF="./DHCPv6.def"> DHCPv6.def </A> 
</PRE>

=end html

=head1 INITIALIZATION

=begin html
  <ul>
  <li><STRONG>Network Topology</STRONG></li> 
   <PRE>
          NUT(Client)
          |           
          |                        
Link0   --+--------+------------------------ 3ffe:501:ffff:100::/64
                   |
                   |          
                   TN(Server) 
   </PRE>
  </ul>
  <ul>  
  <li><STRONG>Verification Points</STRONG></li><br>
   <PRE>
   The client transmits the message according to section 14, using the
   following parameters:<BR>
      IRT   REB_TIMEOUT  <BR>
      MRT   REB_MAX_RT   <BR>
      MRC   0            <BR>
      MRD   Remaining time until valid lifetimes of all addresses have
            expired      <BR>
   When duration of retransmission reaches to MRD, the client stops 
   retransmission of Rebind.  
   </PRE>
  </ul>
  <ul>
  <li><STRONG>Configurations</STRONG></li><br>
   <BR>
    <TABLE BORDER="1">
    <TR>
    <TD><TT>Device Name</TT></TD>
    <TD><TT>Device Type</TT></TD>
    <TD><TT>Interface</TT></TD>
    <TD><TT>Assigned Prefix</TT></TD>
    <TD><TT>Link Local Addr</TT></TD>
    <TD><TT>MAC Addr</TT></TD>
    </TR>
    <TR>
    <TD><TT>Client</TT></TD>
    <TD><TT>NUT</TT></TD>
    <TD><TT>Link0</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>NUT's Linklocal address</TT></TD>
    <TD><TT>NUT's MAC address</TT></TD>
    </TR>
    <TR>
    <TD><TT>Server</TT></TD>
    <TD><TT>TN</TT></TD>
    <TD><TT>Link0</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>fe80::200:ff:fe00:a1a1</TT></TD>
    <TD><TT>00:00:00:00:a1:a1</TT></TD>
    </TR>
    </TABLE>
  </ul>

=end html

=head1 TEST PROCEDURE

=begin html
<PRE>
<BR>
       NUT      TN
        |       |
        |       |Initialize NUT(as a DHCPv6 client)
        |       |
        | ----> |<B>Solicit</B> 
        | <---- |<B>Advertise</B> 
        | ----> |<B>Request</B> 
        | <---- |<B>Reply</B> w/IA_NA option(T2=80,valid-lifetime=300)
        |       |
        | <---- |<B>Echo Request</B>
        | ----> |<B>Echo Reply</B>
        |       |
        |       |Wait T2 time expires
        |       |
        | ----> |<B>Rebind</B> 
        |       |	
        .       .Repeat until evaluating retransmission time is more than MRD(valid lifetime)
        |       |
        | ----> |<B>Rebind</B> (8*)
        |       |
<BR>
</PRE>

=end html

=head1 JUDGEMENT

=begin html
<PRE>
<BR>  
  (8*)PASS: NUT does not transmit Rebind. 
</PRE>

=end html

=head1 TERMINATION

=begin html
<PRE>
  N/A
</PRE>

=end html

=head1 REFERENCE

=begin html
<PRE>
  Also see RFC3315
<BR>
  18.1.4. Creation and Transmission of Rebind Messages
</PRE>

=end html

=head1 SEE ALSO

=begin html
<PRE>
<BR>
  perldoc  V6evalTool
<BR>
</PRE>

=end html

