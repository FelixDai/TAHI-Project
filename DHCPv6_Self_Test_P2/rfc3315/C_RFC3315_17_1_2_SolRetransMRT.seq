#!/usr/bin/perl
#
#Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
#Yokogawa Electric Corporation.
#All rights reserved.
#
#Redistribution and use of this software in source and binary
#forms, with or without modification, are permitted provided that
#the following conditions and disclaimer are agreed and accepted
#by the user:
#
#1. Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
#2. Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with
#   the distribution.
#
#3. Neither the names of the copyrighters, the name of the project
#   which is related to this software (hereinafter referred to as
#   "project") nor the names of the contributors may be used to
#   endorse or promote products derived from this software without
#   specific prior written permission.
#
#4. No merchantable use may be permitted without prior written
#   notification to the copyrighters.
#
#5. The copyrighters, the project and the contributors may prohibit
#   the use of this software at any time.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
#CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
#BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
#COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
#INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#POSSIBILITY OF SUCH DAMAGE.
#
#$Id: C_RFC3315_17_1_2_SolRetransMRT.seq,v 1.10 2009/12/03 06:03:14 akisada Exp $
###############################################################################
BEGIN{
	$V6evalTool::TestVersion = '$Name: T_DHCPv6_Self_Test_P2_1_1_4 $';
}
use strict;
use V6evalTool;

use lib '../.';
use DHCPv6_common;
use Client_pktdesc;

my $type	= $V6evalTool::NutDef{'Type'};
if($type ne 'host') {
	vLogHTML('<FONT COLOR="#FF0000">This test supports only Host</FONT>');
	exit($V6evalTool::exitHostOnly);
}

dhcpExitNS if(ChkFuncSupport('ADDRASSIGN'));

#--------------------------------------------------------------#
# Initialization variables
#--------------------------------------------------------------#
my $IF0_NUT = $V6evalTool::NutDef{"Link0_device"};
my $IF0 = "Link0";
my ($pretime, $nextime) = (0, 0);
my $interval = 0;
my $acceptablerange = 0;
my $init_timeout = 30;
my $mrtflag = 0;
my $MAXCOUNT = 1;
my $IRT = $SOL_TIMEOUT;
my $MRT = $SOL_MAX_RT;
vCapture($IF0);

#--------------------------------------------------------------#
# Initialize DHCPv6 Client
#--------------------------------------------------------------#
my $ret = initial_ra_w_ping($IF0, 'ra_server2_to_all');
if($ret == 0){
	vLogHTML('<FONT COLOR="#FF0000">Global Address of NUT is assigned by RA!</FONT><BR>');
	dhcpExitFail;
}

my $ret = vRemote("dhcp6c.rmt", "start", "iana", "iaid=111111", "link0=$IF0_NUT");
if($ret != 0){
	vLogHTML('<FONT COLOR="#FF0000">Cannot Initialize DHCPv6 Client program!</FONT><BR>');
	dhcpExitFail;
};
#--------------------------------------------------------------#
#1.  Wait until Solicit arrives 
#--------------------------------------------------------------#
my $retrans	= allocate_retransmission_instance($SOL_TIMEOUT, $SOL_MAX_RT, 0, 0);

my ($retsol1,%sol1) = wait_for_solicit($IF0,$init_timeout);
my ($firstarrival) = $sol1{'recvTime'. $sol1{'recvCount'}};

$ret = options_exist(\%sol1,$CMP_ETIME);
if($ret != 0){
	dhcpExitFail;
}
if($retsol1 != 0){
	dhcpExitFail;
}

my $base	= 'Frame_Ether.Packet_IPv6.Upp_UDP.Udp_DHCPv6_Solicit.Opt_DHCPv6_ElapsedTime.';

unless(defined($sol1{$base . 'Time'})) {
	vLogHTML('<FONT COLOR="#FF0000">Elapsed Time option is missing</FONT><BR>');
	dhcpExitFail;
}

my $time	= $sol1{$base . 'Time'};
vLogHTML("<B> Time of Elapsed Time Option is $time </B><BR>");

if($time != 0){
	vLogHTML('<FONT COLOR="#FF0000">Elapsed Time is not a proper time.</FONT><BR>');
	dhcpExitFail;
}

$pretime = getReceivedtime(\%sol1);
my $start = $pretime;

register_retransmission($retrans, $pretime, $time);

#----------------------------------------------------------------------------#
#2. Capture the retransmitted message unitil RTprev = MRT + RAND*MRT
#----------------------------------------------------------------------------#
my $timeout = 0;
my $initflag = 0;
my ($retsol2, %sol2) = (1, ());

vLogHTML('<PRE>');
vLogHTML("<FONT COLOR=\"#FF0000\">IRT is $IRT sec, MRT is $MRT sec</FONT><BR>");
vLogHTML('<FONT COLOR="#FF0000">Retransmitted Maximum Solicitation RT.</FONT><BR>');
vLogHTML('<FONT COLOR="#FF0000">1st 2nd  3rd   4th     5th      6th       7th        8th</FONT><BR>');
vLogHTML('<FONT COLOR="#FF0000">1.1 2.31 4.851 10.1871 21.39291 44.925111 94.3427331 132</FONT><BR>');
vLogHTML('</PRE>');

# repeat until [RT = MRT + RAND*MRT] happen

while($mrtflag < $MAXCOUNT){
	if($initflag != 0){
		$timeout = (2 + $RAND) * $interval;  
	}else{
		$timeout = (1 + $RAND) * $IRT;
	}
	$initflag=1;

	# If $timeout is bigger than MRT, expected RT is MRT + RAND * MRT
	if($timeout > $MRT){
		$timeout = (1 + $RAND) * $MRT;
	}

#
#----------- Wait for next retransmission
#
	($retsol2,%sol2) = wait_for_solicit($IF0, $timeout + 1);
	if($retsol2 != 0){
		dhcpExitFail;
	}

	$ret = compare_message(\%sol1,\%sol2);
	if($ret != 0){
		vLogHTML('<FONT COLOR="#FF0000">Message has been changed !</FONT><BR>');
		dhcpExitFail;
	}

	unless(defined($sol2{$base . 'Time'})) {
		vLogHTML('<FONT COLOR="#FF0000">Elapsed Time option is missing</FONT><BR>');
		dhcpExitFail;
	}

	register_retransmission($retrans,
		getReceivedtime(\%sol2), $sol2{$base . 'Time'});

#
#----------- Calcurate current RT
#
	$nextime = getReceivedtime(\%sol2);
	$interval = $nextime - $pretime;
	$pretime = $nextime;

	vLogHTML("<FONT COLOR=\"#FF0000\">Actual RT is $interval sec</FONT><BR>");	
	if ($interval > $timeout) {
		vLogHTML("<FONT COLOR=\"#FF0000\">Actual RT is bigger than the expected maximum value<FONT><BR>");
		dhcpExitFail;
	}	

#
#----------- Check if RT satisfies RT = MRT(1+RAND)
#
	if(!check_equal($interval,$SOL_MAX_RT,$RAND)){
		$mrtflag += 1;
	}

}

vLogHTML('<FONT COLOR="#FF0000">RT = MRT(1+RAND) observed</FONT><BR>');
vLogHTML("<FONT COLOR=\"#FF0000\">SOL_MAX_RT is $SOL_MAX_RT</FONT><BR>");

vStop($IF0);

if(evaluate_retransmission($retrans)) {
	dhcpExitFail;
}

dhcpExitPass;
###############################################################################
__END__

=head1 NAME 

  C_RFC3315_17_1_2_SolRetransMRT.seq - Check MRT of retransmission of Solicit

=head1 TARGET

  Client

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./C_RFC3315_17_1_2_SolRetransMRT.seq"> C_RFC3315_17_1_2_SolRetransMRT.seq</A> [-tooloption...] <BR>  -pkt  <A HREF="./C_RFC3315_17_1_2_SolRetransMRT.def"> C_RFC3315_17_1_2_SolRetransMRT.def</A> <BR>  -tooloption : v6eval tool option
<BR>
  See Also <A HREF="../DHCPv6.def"> DHCPv6.def </A> 
</PRE>

=end html

=head1 INITIALIZATION

=begin html
  <ul>
  <li><STRONG>Network Topology</STRONG></li> 
   <PRE>
          NUT(Client)
          |           
          |                        
Link0   --+--------+------------------------ 3ffe:501:ffff:100::/64
                   |
                   |          
                   TN(Server) 
   </PRE>
  </ul>
  <ul>
  <li><STRONG>Verification Points</STRONG></li><br>
   <PRE> 
   RT for each subsequent message transmission is based on the previous 
   value of RT:
     <BR>
     RT = 2*RTprev + RAND*RTprev
     <BR>
   MRT specifies an upper bound on the value of RT (disregarding the
   randomization added by the use of RAND).  
    <BR>
     if (RT > MRT)
       RT = MRT + RAND*MRT
    <BR>
   <PRE>	 
  </ul>   
  <ul>
  <li><STRONG>Configurations</STRONG></li><br>
  <BR>
  <TABLE BORDER="1">
    <TR>
    <TD><TT>Device Name</TT></TD>
    <TD><TT>Device Type</TT></TD>
    <TD><TT>Interface</TT></TD>
    <TD><TT>Assigned Prefix</TT></TD>
    <TD><TT>Link Local Addr</TT></TD>
    <TD><TT>MAC Addr</TT></TD>
    </TR>
    <TR>
    <TD><TT>Client</TT></TD>
    <TD><TT>NUT</TT></TD>
    <TD><TT>Link0</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>NUT's Linklocal address</TT></TD>
    <TD><TT>NUT's MAC address</TT></TD>
    </TR>
    <TR>
    <TD><TT>Server</TT></TD>
    <TD><TT>TN</TT></TD>
    <TD><TT>Link0</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>fe80::200:ff:fe00:a1a1</TT></TD>
    <TD><TT>00:00:00:00:a1:a1</TT></TD>
    </TR>
  </TABLE>
  </ul>

=end html

=head1 TEST PROCEDURE

=begin html
<PRE>
<BR>
        NUT      TN
        |       | 
        |       |Initialize NUT(as a DHCPv6 client)
        |       |
        | ----> |<B>Solicit</B> (1*)
        |       |
        | ----> |<B>Solicit</B> (2*)
        .       .
        .       .until RTprev = MRT + MRT*RAND 
        |       |
        | ----> |<B>Solicit</B> (3*)
        |       |
        |       |	
<BR>  
</PRE>

=end html

=head1 JUDGEMENT

=begin html
<PRE>
  (3*)PASS: The RT must reach MRT. 
</PRE>

=end html

=head1 TERMINATION

=begin html
<PRE>
  N/A
</PRE>

=end html

=head1 REFERENCE

=begin html
<PRE>
  Also see RFC3315
<BR>
  5.5. Transmission and Retransmission Parameters
  14. Reliability of Client Initiated Message Exchanges  
  17.1.2. Transmission of Solicit Messages
<BR>
</PRE>

=end html

=head1 SEE ALSO

=begin html
<PRE>
<BR>
  perldoc  V6evalTool
<BR>
</PRE>

=end html
