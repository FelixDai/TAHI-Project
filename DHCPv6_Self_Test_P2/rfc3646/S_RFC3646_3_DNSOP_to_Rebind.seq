#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: dhcpv6.p2/rfc3646/S_RFC3646_3_DNSOP_to_Rebind.seq,v 1.3 2009/12/03 06:03:45 akisada Exp $
########################################################################
BEGIN { $V6evalTool::TestVersion = '$Name: T_DHCPv6_Self_Test_P2_1_1_4 $';
}

use strict;
use V6evalTool;

use lib '../.';
use DHCPv6_common;
use Server_pktdesc;

my $type	= $V6evalTool::NutDef{'Type'};
if($type ne 'host') {
	vLogHTML('<FONT COLOR="#FF0000">This test supports only Host</FONT>');
	exit($V6evalTool::exitHostOnly);
}

dhcpExitNS if(ChkFuncSupport('ADDRASSIGN'));
dhcpExitNS if(ChkFuncSupport('DNS'));

#--------------------------------------------------------------#
# Initialization
#--------------------------------------------------------------#

vLogHTML('<B>==== NUT Initialization ====</B><BR>');
my $IF0 = "Link0";
#initial NUT config parameters,
my %NUT_Server_Config = (
	'if_nut0'=> "$V6evalTool::NutDef{Link0_device}",
	'init_opcode' => "vRemote(\"dhcp6s.rmt\", \"start\",\"dns=\'3ffe:501:ffff:100:200:ff:fe00:3f3e\'\",\"link0=$V6evalTool::NutDef{Link0_device}\",\"startaddr=3ffe:501:ffff:100::10\",\"endaddr=3ffe:501:ffff:100::11\")"
);

dhcpSvrInit(\%NUT_Server_Config);
vClear($IF0);

# 1 send Solicit
$CID_OPTION = "opt_CID_LLT_client1";
$IA_NA_OPTION = "opt_IA_NA";
$ElapsedTime_OPTION = "opt_ElapsedTime";
$OptionRequest_OPTION = "opt_ORO_dns_servers";
my ($ret1, %sol1) = send_solicit($IF0, "solicit_client1_to_alldhcp", "");
if (0 != $ret1){
	dhcpExitFail();
}


# 2. wait for DHCPv6 Advertise Message
my ($ret2, %adv2) = wait_for_advertise($IF0, 5);
if (0 != $ret2){
 	dhcpExitFail();
}


## 3 send Request  (w/option request) 
$CID_OPTION = "opt_CID_LLT_client1";
$SID_OPTION = "opt_SID_ANY";
$IA_NA_OPTION = "opt_IA_NA";
$OptionRequest_OPTION = "opt_ORO_dns_servers";
$ElapsedTime_OPTION = "opt_ElapsedTime";
my ($ret3, %req3) = send_request($IF0, "request_client1_to_alldhcp", \%adv2, "");
 if (0 != $ret3) {
	dhcpExitFail() 
}

# 4.wait for DHCPv6 Reply Message
my ($ret4, %rep4) = wait_for_reply($IF0, 5);
if (0 != $ret4){
	dhcpExitFail();
}

vSleep(5);
vClear($IF0);

# 5.send DHCPv6 Rebind Message
$CID_OPTION = "opt_CID_LLT_client1";
$SID_OPTION = undef;
$IA_NA_OPTION = "opt_IA_NA_Addr_woStatus";
$ElapsedTime_OPTION = "opt_ElapsedTime";
$OptionRequest_OPTION = "opt_ORO_dns_servers";
my ($ret5, %reb5) = send_rebind($IF0, "rebind_client1_to_alldhcp", \%rep4, "");
if (0 != $ret5){
	dhcpExitFail();
}

# wait for DHCPv6 Reply Message
my ($ret6, %rep6) = wait_for_reply($IF0, 5);
if (0 != $ret6){
	dhcpExitFail();
}


#Check option
if (0 != options_exist(\%rep6, ($CMP_DNS_SVR|$CMP_CID|$CMP_SID|$CMP_IA_NA))){
	dhcpExitError("<B>Do not include necessary options!</B>");
}
if (0 != suboptions_exist(\%rep6,$CMP_IA_ADD)){
	dhcpExitError("<B>Option check is failed.</B></BR>");
}

# compare CID
dhcpExitFail() if (0 != compare_options(\%reb5, \%rep6, ($CMP_CID|$CMP_TRANS_ID))
);

# check unicast address
if ( $rep6{"Frame_Ether.Packet_IPv6.Hdr_IPv6.DestinationAddress"} != $reb5{"Frame
_Ether.Packet_IPv6.Hdr_IPv6.SourceAddress"}) {
        dhcpExitError("DHCPv6 Server not send Reply message via unicast.");
}

my $option_base = "Frame_Ether.Packet_IPv6.Upp_UDP.Udp_DHCPv6_Reply.Opt_DHCPv6_DNS_Servers";
my $option_code = $option_base."."."Code";
my $option_len = $option_base."."."Length";
my $option_addr = $option_base."."."Address";


if(defined $rep6{$option_base}){
	vLogHTML("<B> DNS Recursive Name Server option Code = $rep6{$option_code} <B><BR>");
	vLogHTML("<B> DNS Recursive Name Server option Length = $rep6{$option_len} <B><BR>");
	vLogHTML("<B> DNS Recursive Name Server option Address = $rep6{$option_addr} <B><BR>");
}
else{
	vLogHTML("<B> NO DNS Recursive Name Server option <B><BR>");
	dhcpExitFail;
}
#-------------------------------------------------------------------
vLogHTML("<B><FONT COLOR=#006666>The Messages Exchange is correct</FONT></B><BR>");
#-------------------------------------------------------------------

vClear($IF0);
vStop($IF0);
dhcpExitPass();
 
#NOTREACHED

########################################################################
__END__

=head1 NAME

  S_RFC3646_3_DNSOP_to_Rebind.seq - Reception of Rebind message with ORO(DNS Recursive Name Server option)

=head1 TARGET

  Server

=head1 SYNOPSIS

=begin html
 <PRE>
 <A HREF="./S_RFC3646_3_DNSOP_to_Rebind.seq">S_RFC3646_3_DNSOP_to_Rebind.seq </A>[-tooloption ...]
 -pkt <A HREF="./S_RFC3646_3_DNSOP_to_Rebind.def">S_RFC3646_3_DNSOP_to_Rebind.def</A>
 -tooloption: v6eval tool option
See Also <A HREF="../DHCPv6.def"> DHCPv6.def </A>
 </PRE>

=head1 INITIALIZATION

=begin html
  <UL>
  <LI><STRONG>Network Topology</STRONG></LI>
  </UL>
  <PRE>
          TN(Client1)  
             |
Link0 -------+-----------+--------------- 3ffe:501:ffff:100::/64
                         |
                       NUT(Server1)
  </PRE>
  <UL>
      <LI><STRONG>Verification Points</STRONG></LI>
  <UL>
      <PRE>
Destination address set to TN's unicast address same as the Rebind message's source adderess<BR><BR>
Reply Message
        <li>msg-type</li>
        <b>REPLY(7)</b>
        <li>transaction-id</li>
        Same as the Rebind Message
        <li>Server Identifier option</li>
        Any
        <li>Client Identifier option</li>
        Same as the Rebind Message
        <li>IA_NA option</li>
        Include IA Address option
        <li>DNS Recursive Name Server option 
<ul>
      <LI>option-code</LI>
      <B>OPTION_DNS_SERVERS (23)</B>
      <LI>option-len</LI>
      Length of the list of DNS recursive name servers in octets; 
      <B>must be a multiple of 16</B>
      <LI>DNS-recursive-name-server</LI>
      Any(IPv6 address of DNS recursive name server)
    </ul>
      </PRE>
  </UL>
  </UL>
  <UL>
      <LI><STRONG>Configuration</STRONG></LI>
      <UL>
      <PRE>
      TN send Rebind message with Option Request option
      <LI>option-code</LI>
      <B>OPTION_ORO(6)</B>
      <LI>request-option-code</LI>
      <B>OPTION_DNS_SERVERS (23)</B>
      </PRE>
      </UL>
	<BLOCKQUOTE>
	<TABLE BORDER>
	<TR>
	<TD><TT>Device Name</TT></TD>
	<TD><TT>Device Type</TT></TD>
	<TD><TT>I/F</TT></TD>
	<TD><TT>Assigned Prefix</TT></TD>
	<TD><TT>Link Local Addr</TT></TD>
	<TD><TT>MAC Addr</TT></TD>
	</TR>
	<TR>
	<TD><TT>Server1</TT></TD>
	<TD><TT>NUT</TT></TD>
	<TD><TT>Link0</TT></TD>
	<TD><TT>3ffe:501:ffff:100::/64</TT></TD>
	<TD><TT>NUT's Linklocal address</TT></TD>
	<TD><TT>NUT's MAC address</TT></TD>
	</TR>
	<TR>
	<TD><TT>Client1</TT></TD>
	<TD><TT>TN</TT></TD>
	<TD><TT>Link0</TT></TD>
	<TD><TT>3ffe:501:ffff:100::/64</TT></TD>
	<TD><TT>fe80::200:ff:fe00:a2a2</TT></TD>
	<TD><TT>00:00:00:00:a2:a2</TT></TD>
	</TABLE>
	</BLOCKQUOTE>
	</UL>
</UL>

=end html

=head1 TEST PROCEDURE

=begin html
<PRE>
       NUT     TN
        |       | 
        |       | initialize NUT (as a DHCPv6 Server)
        |       | 
        | <---- | Solicit       (w/ Option Request option)
        | ----> | Advertise
        | <---- | Request
        | ----> | Reply 
        |       | 
        | <---- | Rebind         (w/ Option Request option)
        | ----> | Reply	(*1)
        |       | 
</PRE>

=end html

=head1 JUDGEMENT

<PRE>
(*1)PASS:  NUT sends Reply message that is same as the description of verification points.
</PRE>

=head1 TERMINATION

  N/A

=head1 REFERENCE

=begin html
<PRE>
   see also RFC3646
   3. DNS Recursive Name Server option
   
   RFC 3315
   Section 18.2, 18.2.4
</PRE>

=end html

=head1 SEE ALSO

  perldoc V6evalTool

=cut
