#!/usr/bin/perl
#
#Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
#Yokogawa Electric Corporation.
#All rights reserved.
#
#Redistribution and use of this software in source and binary
#forms, with or without modification, are permitted provided that
#the following conditions and disclaimer are agreed and accepted
#by the user:
#
#1. Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
#2. Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with
#   the distribution.
#
#3. Neither the names of the copyrighters, the name of the project
#   which is related to this software (hereinafter referred to as
#   "project") nor the names of the contributors may be used to
#   endorse or promote products derived from this software without
#   specific prior written permission.
#
#4. No merchantable use may be permitted without prior written
#   notification to the copyrighters.
#
#5. The copyrighters, the project and the contributors may prohibit
#   the use of this software at any time.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
#CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
#BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
#COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
#INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#POSSIBILITY OF SUCH DAMAGE.
#
#$Id: C_RFC3646_3_DnsSvrOpt_Reb.seq,v 1.4 2009/12/03 06:03:44 akisada Exp $
###############################################################################
BEGIN{
	$V6evalTool::TestVersion = '$Name: T_DHCPv6_Self_Test_P2_1_1_4 $';
}
use strict;
use V6evalTool;

use lib '../.';
use DHCPv6_common;
use Client_pktdesc;

my $type	= $V6evalTool::NutDef{'Type'};
if($type ne 'host') {
	vLogHTML('<FONT COLOR="#FF0000">This test supports only Host</FONT>');
	exit($V6evalTool::exitHostOnly);
}

dhcpExitNS if(ChkFuncSupport('ADDRASSIGN'));
dhcpExitNS if(ChkFuncSupport('DNS'));

#--------------------------------------------------------------#
# Initialize  variables
#--------------------------------------------------------------#
my $IF0_NUT = $V6evalTool::NutDef{"Link0_device"};
my $IF0 = "Link0";
my $plifetime = 100 ;
my $vlifetime = 200 ;
my $time1 = $plifetime * 0.5;
my $time2 = $plifetime * 0.8;
vCapture($IF0);
#--------------------------------------------------------------#
# Initiate DHCPv6 Client
#--------------------------------------------------------------#
my $ret = initial_ra_w_ping($IF0,'ra_server2_to_all_MO_1');
if($ret == 0){
	vLogHTML('<FONT COLOR="#FF0000">Global Address of NUT is assigned by RA!</FONT><BR>');
	dhcpExitFail;
}

$ret = vRemote("dhcp6c.rmt", "start", "iana", "iaid=111111", "dns", "link0=$IF0_NUT");
if($ret != 0) {
	vLogHTML('<FONT COLOR="#FF0000">Cannot Initialize DHCPv6 Client program.</FONT><BR>');
	dhcpExitFail;
};
#--------------------------------------------------------------#
# 1. Wait until Solicit arrives 
#--------------------------------------------------------------#
my ($retsol,%sol) = wait_for_solicit($IF0,30) ;
if($retsol != 0){
	dhcpExitFail;
}
#--------------------------------------------------------------#
# 2. send Advertise message 
#--------------------------------------------------------------#
$SID_OPTION = "opt_SID_LLT_server1";
$IA_NA_OPTION = "opt_IA_NA_Addr_woStatus";
$DNS_SVR_OPTION = "opt_DNS_Name_Server1";
my ($retadv, %adv) = send_advertise($IF0, "advertise_server1_to_nut", \%sol, "");
if($retadv != 0){
	dhcpExitFail;
}
#--------------------------------------------------------------#
#3.  Wait until Request arrives 
#--------------------------------------------------------------#
my ($retreq,%req) = wait_for_request($IF0,30);
if($retreq != 0){
	dhcpExitFail;
}
vClear($IF0);
#--------------------------------------------------------------#
#4. send Reply message
#--------------------------------------------------------------#
$IA_NA_OPTION = "opt_IA_NA_Addr";
$StatusCode_OPTION = "opt_StatusCode";
$DNS_SVR_OPTION = "opt_DNS_Name_Server1";
my $cppstr = "-DIA_NA_TIME1=$time1 -DIA_NA_TIME2=$time2 -DIA_ADDR_PLTIME=$plifetime -DIA_ADDR_VLTIME=$vlifetime ";
my ($retrep, %rep) = send_reply($IF0, "reply_server1_to_nut", \%req,$cppstr);
if($retrep != 0){
	dhcpExitFail;
}

# wait for DAD completion
vRecv($IF0, 3, 0, 0, 'dadns_nutga');
vSleep(3);

#--------------------------------------------------------------#
#5. wait for Renew message
#--------------------------------------------------------------#
#my ($retren, %ren) = wait_for_renew($IF0, ($time1 + 5));
#if($retren != 0){
#	dhcpExitFail;
#}
#vClear($IF0);

#--------------------------------------------------------------#
#5. Wait until Rebind arrives 
#--------------------------------------------------------------#
my ($retreb,%reb) = wait_for_rebind($IF0, $time2 +5);
if($retreb != 0){
	dhcpExitFail;
}
#--------------------------------------------------------------#
# Verification Point check
#--------------------------------------------------------------#
$ret = options_exist(\%reb, ($CMP_IA_NA|$CMP_ORO));
if($ret != 0){
	vLogHTML('<FONT COLOR="#FF0000">DHCPv6 Client should send Rebind with ORO(DNS Recursive Name Server option)!</FONT><BR>');
	dhcpExitFail;
}
my $option_base = "Frame_Ether.Packet_IPv6.Upp_UDP.Udp_DHCPv6_Rebind.Opt_DHCPv6_OptionRequest";
my $option_code = $option_base."."."Code";
my $option_len = $option_base."."."Length";
my $optionCode = $option_base."."."OptionCode";


if(defined $reb{$option_base}){
	vLogHTML("<B> ORO Code = $reb{$option_code} <B><BR>");
	vLogHTML("<B> ORO option Length = $reb{$option_len} <B><BR>");
	vLogHTML("<B> ORO option OptionCode = $reb{$optionCode} <B><BR>");
}
else{
	vLogHTML("<B> NO ORO option <B><BR>");
	dhcpExitFail;
}
my $optcode = lookup_OptRequestCode(\%reb,23);
if($optcode != 0){
	vLogHTML('<FONT COLOR="#FF0000">requested-option-code is not DNS Recursive Name Server option! </FONT><BR>');
	dhcpExitFail;
}
#if($reb{$optionCode} != 23){
#	vLogHTML('<FONT COLOR="#FF0000">requested-option-code is not DNS Recursive Name Server option</FONT><BR>');
#	dhcpExitFail;
#}
vClear($IF0);
vStop($IF0);
dhcpExitPass;
###############################################################################
__END__

=head1 NAME 

  C_RFC3646_3_DnsSvrOpt_Reb.seq - Rebind message format with Option request Option Format(DNS Recursive Name Server option)

=head1 TARGET

  Client

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./C_RFC3646_3_DnsSvrOpt_Reb.seq"> C_RFC3646_3_DnsSvrOpt_Reb.seq</A> [-tooloption...] <BR>  -pkt  <A HREF="./C_RFC3646_3_DnsSvrOpt_Reb.def"> C_RFC3646_3_DnsSvrOpt_Reb.def</A> <BR>  -tooloption : v6eval tool option
<BR>
  See Also <A HREF="../DHCPv6.def"> DHCPv6.def </A> 
</PRE>

=end html

=head1 INITIALIZATION

=begin html
  <ul>
  <li><STRONG>Network Topology</STRONG></li> 
    <PRE>
          NUT(Client)
          |           
          |                        
Link0   --+--------+------------------------ 3ffe:501:ffff:100::/64
                   |
                   |          
                   TN(Server) 
  </PRE>
  </ul>
  <ul>
  <li><STRONG>Verification Points</STRONG></li><br>
    <PRE>
   The client MUST include a Client Identifier option to identify itself
   to the server.  The client adds any appropriate options, including
   one or more IA options.  The client MUST include the list of
   addresses the client currently has associated with the IAs in the
   Rebind message.
<BR>
   The client MUST include an Option Request option (see section 22.7)
   to indicate the options the client is interested in receiving.  The
   client MAY include options with data values as hints to the server
   about parameter values the client would like to have returned.
    </PRE>
  </ul>
  <ul>  
  <li><STRONG>Configurations</STRONG></li><br>
    <BR>
    <TABLE BORDER="1">
    <TR>
    <TD><TT>Device Name</TT></TD>
    <TD><TT>Device Type</TT></TD>
    <TD><TT>Interface</TT></TD>
    <TD><TT>Assigned Prefix</TT></TD>
    <TD><TT>Link Local Addr</TT></TD>
    <TD><TT>MAC Addr</TT></TD>
    </TR>
    <TR>
    <TD><TT>Client</TT></TD>
    <TD><TT>NUT</TT></TD>
    <TD><TT>Link0</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>NUT's Linklocal address</TT></TD>
    <TD><TT>NUT's MAC address</TT></TD>
    </TR>
    <TR>
    <TD><TT>Server</TT></TD>
    <TD><TT>TN</TT></TD>
    <TD><TT>Link0</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>fe80::200:ff:fe00:a1a1</TT></TD>
    <TD><TT>00:00:00:00:a1:a1</TT></TD>
    </TR>
    </TABLE>
  </ul>

=end html

=head1 TEST PROCEDURE

=begin html
<PRE>
<BR>
       NUT      TN
        |       | 
        |       |Initialize NUT(as a DHCPv6 Client)
        | ----> |<B>Solicit</B> 
        | <---- |<B>Advertise</B> 
        | ----> |<B>Request</B> 
        | <---- |<B>Reply</B> 
        |       |
        |       |Before T2 time expires
        |       |
        | ----> |<B>Rebind</B> (5*)
        |       |   w IA_NA w/ORO(DNS Recursive Name Server option) (1*)
        |       |
        |       |
<BR>  
</PRE>

=end html

=head1 JUDGEMENT

=begin html
<PRE>
  (5*)PASS: NUT transmits Rebind message with IA_NA option and ORO(DNS Recursive Name Server option).
</PRE>

=end html

=head1 TERMINATION

=begin html
<PRE>
  N/A
</PRE>

=end html

=head1 REFERENCE

=begin html
<PRE>
  Also see RFC3315 Section 18.1.4
  Also see RFC3646 Section 3
<BR>
</PRE>

=end html

=head1 SEE ALSO

=begin html
<PRE>
<BR>
  perldoc  V6evalTool
<BR>
</PRE>

=end html
