実装に関するメモ

本実装では、以下に示す前提条件の下に実装している。
IPv6最小仕様を実装した部分を、以下では tiny と称する。

[ハードウェア等の動作環境]
・物理的なインタフェースは1つと仮定。(ハードウェア的に存在すること自体は
  害がないが、本実装からは使用できない。)
・L2はEtherのみ。
・アドレスは自動構成のみ。
・NetBSD 1.5.2を使用。ソースツリーはi386を前提としているが、i386アーキテ
  クチャには依存していない。


[IPv4]
・mappedアドレスはサポートしない。


[multicast]
・NDに必要なall nodeおよびsolicited nodeマルチキャストアドレスのみ
  送受信をサポート。
・RSの送信のため、all routerマルチキャストの送信をサポート。


[anycast]
・サポートしない。


[上位層API]
・上位とのインタフェースは出来るだけ既存の(今はNetBSD)APIがそのまま使える
  方向で実装を進めたが、中途の状態。


[セキュリティ]
・ESPヘッダをサポートする。

・アドレスのconsistencyチェックを実装
  src/dstアドレスのconsistencyチェック(仕様上あり得ないアドレス、例え
  ばソースがマルチキャストアドレスになっている場合には破棄する等)を行っ
  ている。


[Mobile IP]
・サポートしない。


[IPv6 Header]

・Hop-by-Hop Options Header
  受信時 解釈のみ
  送信しない

・Routing Header
  受信時 未サポートとして扱う
  送信しない

・Fragment Header
  受信時 未サポートとして扱う
  送信しない

・Destination Header
  受信時 解釈のみ
  送信しない

・No Next Header
  受信時 解釈のみ
  送信しない

・ESP Header
  送受信をサポート

・AH
  受信時 未サポートとして扱う
  送信しない

・各ヘッダの順序チェックはしない。


[Path MTU discovery/packet size issue]

・Path MTU discoveryはサポートしない。

・送信
  IPv6 Min MTUをMTUとして使用。(上位層から渡されたパケットあるいは
  ESP付加後のパケットがMin MTUを越えている場合、パケットを捨てる。)
・受信
  バッファ(現状1500byte)のサイズ以下であれば可能。


[ND]

・NA
  送受信をサポート
・NS
  送受信をサポート
・RA
  受信のみをサポート
・RS
  送信のみをサポート

・neighbor cache, prefix list, default router list
  固定サイズのテーブルを使用。(溢れた場合、登録が古いエントリから上書き。)

・destination cache
  無し。

・NDoption
  MTUオプションは無視する。(MTUは固定のため。)

[Address autoconf]

・DADは起動(インタフェースUP)時にlink-localアドレスに対してのみ実行。
  このDADが成功した場合、IFIDがリンクで一意であるとみなし、RAにより
  新たなプレフィックスが得られた場合にも、DADは行なわない。

・起動(インタフェースUP)時にRSを送出する。RAが得られない場合、3回まで
  リトライ。(現状はルータリストのエントリの有無で判定している。)


[ICMP]

・I-D(*)にしたがって最低限の仕様をサポート。


[IPsec]

・ESPのみをサポート(AHはサポートしない)

・トランスポートモードのみ(トンネルモードはサポートしない)

・暗号化アルゴリズム
  NULL, DES, 3DES, RIJNDAEL
・ESP認証(ICV)アルゴリズム
  NONE, MD5, SHA1

・各種暗号化関数そのものはNetBSDのものを利用している。

・SA/SPの管理
  手動管理のみ。本実装では、pseudo-deviceを用いてアプリケーション
  とカーネル内のデータのやり取りを行なう。
  サイズ固定の領域をSA/SPデータベースとして使用。
   SAとSPは同一のデータベースに保持する。


[その他:実装に関するメモ]

・OS依存の排除
  プロトコル処理の本質的な部分では、(出来る限り)OSに依存する関数、
  データ構造等を用いないように留意したつもり。
  カーネルのサポート関数が必要な場合には、ラッパー関数あるいはマクロを
  用意し、それらを用いるようにした。
  また、それらを使用するにあたって必要となるデータ型についてもtypedef等
  でラップするようにしている。

・ソースファイルの構成
  NetBSD1.5.2のソースツリーに上書きして利用できる形とした。
  ソースファイルの分割に関しては、OSに依存する関数/データ構造を使用する
  部分に関しては、'sysdep_XXX'というファイル名とした。
  tiny内で閉じている部分に関しては、'tiny_XXX'というファイル名にした。

  ヘッダファイルや、特にOSに依存しない部分(アルゴリズムあるいは関数その
  もの)は、NetBSDから流用しているものがある。

・mbuf相当の機能
  パケットを保持するバッファは独自のものを使用し、tinyの入口と出口で
  mbufとの変換を行なっている。
  バッファの大きさ(現状1500byte)、数(現状8)は固定でカーネルコンパイル
  時に決定する。
  バッファの数が不足した場合は、データを捨てる。

・インタフェースの識別
  ソースコード中では、インタフェースの識別はインタフェース名("fxp0"等)
  で行なっている。

・IPv6アドレスの管理
  インタフェースおよびそれに割り当てられているIPv6アドレスの管理は
  独自で行なっており、OS側で用意されている枠組みへの情報登録等は
  行なっていない。(ifconfigコマンドでは見えない)
  NDに必要なマルチキャストを受信するため、それに必要なリンク層
  マルチキャストアドレスの登録のみは行なっている。

・経路制御
  経路制御は、on-link/off-linkの判断のみとし、on-linkでなければ、
  すべてデフォルトルータに向ける、という実装とした。
  経路やリンク層アドレスについても、OS側で用意されている枠組みへの情報
  登録等は行なっていない。(netstat -rコマンドでは見えない)

・上位プロトコル
  現状、アプリケーションから使用可能な上位プロトコルはUDPのみである。
  PCBや上位層のソースコードは、NetBSDのものをそのまま使用している。
  TCP/RAW IPは動作しない。

・動作テスト
  本実装の動作テストはTAHIのツールを用いて行なった。


[既知の問題点]
・TCPが全く通らない。
  NetBSD標準のTCPのコードをリンクしているが、経路情報関連など、
  TCPのコード側で想定している処理をtinyのIP層では行なっていないため、
  と考えられる。

・時刻管理精度の不足
  現状の実装では、時刻を秒単位の精度で扱っている。これに対応して
  タイマも1秒間隔で起動されているため、タイミングによっては、
  TAHIツールなどによるテストの中においてタイミングに厳密さが求め
  られるNDテストの一部(NSの再送間隔など)でFAILと判断されてしまう
  場合がある。

・RA solicited or not
  RAがsolictedかどうか(送出したRSに対する応答として出されたRAである
  のか定期的に出されたRAであるのか)は、RAの内容を見るだけでは判断
  できない。このため、自身がすでにRSを送出したかどうかによってのみ
  判断している。

・DAD開始、RS送出のタイミング
  NetBSD(ネットワークカードはfxpを使用)のブートシーケンスにおいて、
  インタフェースをUPするカーネル内関数が呼ばれるタイミングと、その後
  実際にパケット送出が可能になるタイミングには数秒のタイムラグがある
  ように見受けられた。
  このため、DADの開始には数秒(現状3秒)の遅延させるようにタイマを使用
  している。
  また、そのDADが終了する時間+若干の余裕を持たせて(現状4.5秒)RSの送出を
  遅延させるようにタイマを使用している。

・乱数
  乱数を必要とする場合、現状の実装ではNetBSDのサポートルーチンをその
  まま使用している。
  ライブラリ関数のsrand(3)に相当するシードの初期設定は行なっていない。
  例えば、reachable timeなどは、ブート直後の値がいつも一定になって
  しまっているかもしれない。


(*)本実装では、LCNAのI-Dとして以下を参照している。
  draft-okabe-ipv6-lcna-minreq-01.txt
