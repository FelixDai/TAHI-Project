#!/usr/bin/perl
#
# Copyright(C) IPv6 Promotion Council (2004,2005). All Rights Reserved.
# 
# This documentation is produced by SIP SWG members of Certification WG in 
# IPv6 Promotion Council.
# The SWG members currently include NIPPON TELEGRAPH AND TELEPHONE CORPORATION (NTT), 
# Yokogawa Electric Corporation and NTT Advanced Technology Corporation (NTT-AT).
# 
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.


#--------------------------------------------------------------#
# ENTRANCE
#--------------------------------------------------------------#

# Set the test version used for the display.
BEGIN { $V6evalTool::TestVersion = '$Name:  $';}

require SIP;

#--------------------------------------------------------------#
# INITIALIZATION
#--------------------------------------------------------------#
SIPScenarioModel('Server','UA-UA');
SIPInitializeScenario('','SKIP');

#--------------------------------------------------------------#
# SCENARIO Definition
#--------------------------------------------------------------#

# 
sub SEQ_UserAgentCaller {
    my($node,$func);

    $node=NDDefStart('UA11');

	SIP_SetUp_Reg_Info('UA11','UA12');

    # INVITE 
    $func=sub {
	my($result,$frame)=@_;

	# INVITE 
	SD_Term_INVITE();

	# 
#	SEQ_Start('UA12');

	if(NDCFG('use_authorization') ne 'yes') {SEQ_Start('UA12');}

	# 
	return 'NEXT';
    };
    NDReqAction($node,$func,"START");


    # 407 
    $func=sub {
        my($result,$frame)=@_;

        JudgeResult($result,"Receive 407","Can't receive 407");

        # 407
        SIP_Judgment('SS.STATUS.INVITE-407.TM');

        # ACK
        SD_Term_ACK_NO200('','','','',CNNCreate());
        if(!CheckNo100('ACK')){
            LOG_Err("No send 100 Trying");
        }

        # INVITE
        SD_Term_INVITEwithAuth();

        # 
        SEQ_Start('UA12');

        return 'NEXT';
    };
    # 
    if(NDCFG('use_authorization') eq 'yes') {
        NDStatusAction($node,$func,"407",['D.Proxy-Authenticate.NONCE','D.TO-TAG','D.Proxy-Authenticate.OPAQUE']);
    }


    # 
    $func=sub {
	my($result,$frame)=@_;
	my($status);

	JudgeResult($result,"Receive 100 or 180","Can't receive 100 or 180");
	# 
	$status=FV('RQ.Status-Line.code', '', $frame);

	# 100
	if($status eq 100){

	    # 100 
	    SIP_Judgment('SS.STATUS.INVITE-100.TM');

	    # 
	    return 'CONTINUE';
	}
	# 180
	if($status eq 180){
	    # 180 
#	    SIP_Judgment('SS.STATUS.INVITE-180_FORWARDED.PX');
	    SIP_Judgment('SS.STATUS.INVITE-180.TM');
	    SD_Term_CANCEL();
	    StoreTIMERInfo($CNT_CONF{'TIMER-T1'}*64,"Fire J Timer",$frame);

	    # 
	    return 'NEXT';
	}
	return 'CONTINUE';
    };
    NDStatusAction($node,$func,"^[1]",'D.DIALOG-SETUP.CALLER');


    # 200 
    $func=sub {
	my($result,$frame)=@_;

	JudgeResult($result,"Receive 200","Can't receive 200");

	# 200 
	SIP_Judgment('SS.STATUS.CANCEL-200.TM');

	return 'NEXT';
    };
    NDStatusAction($node,$func,"^[2]");

    # CANCEL re-transmit after 10 sec
    $func=sub {
	my($result,$frame)=@_;

	if($result eq timeout){
	    printf("before SD_Term_CANCEL\r\n");
#	    SD_Proxy_CANCEL();
	    SD_Term_CANCEL();
	    
	    return 'NEXT';
	}
    };
    NDStatusAction($node,$func,"^[8]",'','',10);

    # 200 
    $func=sub {
	my($result,$frame)=@_;

	JudgeResult($result,"Receive 200","Can't receive 200");

	# 200 
	SIP_Judgment('SS.STATUS.CANCEL-200.TM');

	return 'NEXT';
    };
    NDStatusAction($node,$func,"^[2]");

    # CANCEL re-transmit after 20 sec(Timer J fired)
    $func=sub {
	my($result,$frame)=@_;

	if($result eq 'timeout'){
	    SD_Term_CANCEL();
      	    return 'NEXT';
	}
	return 'CONTINUE';
    };
    NDStatusAction($node,$func,"^[8]",'','',20);

    # 200 
    $func=sub {
	my($result,$frame)=@_;

	JudgeResult($result,"Receive 4xx-6xx","Can't receive 4xx-6xx");

	# 200 
	SIP_Judgment('SS.STATUS.INVITE-NO2XX.ONEPX.TM');

	return 'END';
    };
    NDStatusAction($node,$func,"^[4]");


    NDDefEnd($node);
}


# 
sub SEQ_UserAgentCallee {
    my($node,$func);

    # 
    $node=NDDefStart('UA12');

    SIP_SetUp_Reg_Info('UA12', 'UA11');

    RegistRuleSet({ 'TY:' => 'SYNTAX', 'ID:' => 'S.RETRANS-CANCEL-OVER-JTIMER','CA:' => 'Timer',
		    'OK:' => 'CANCEL request MUST NOT be retransmitted after Timer J fired.',
		    'NG:' => 'CANCEL request MUST NOT be retransmitted after Timer J fired.',});

    # INVITE 
    $func=sub {
	my($result,$frame)=@_;

	JudgeResult($result,"Receive INVITE","Can't receive INVITE");

	# INVITE 
	SIP_Judgment('SS.REQUEST.INVITE_FORWARDED.TWOPX.TM');

	# 180 
	SD_Term_STATUS('180','INVITE');

	# 
	return 'NEXT';
    };
    NDReqAction($node,$func,"INVITE",'D.DIALOG-SETUP.CALLEE');

    # CANCEL 
    $func=sub {
	my($result,$frame)=@_;
	JudgeResult($result,"Receive CANCEL","Can't receive CANCEL");
	# ACK 
	SIP_Judgment('SS.REQUEST.CANCEL.TM');

	printf("before send 200\r\n");
	# BYE 
	SD_Term_STATUS('200','CANCEL','ES.STATUS.200.ONEPX.TM');
	printf("after send 200\r\n");

	return 'NEXT';
    };
    NDReqAction($node,$func,"CANCEL");


    # 200 
    $func=sub {
	my($result,$frame)=@_;
	
	if($result eq 'timeout'){
#	    LOG_OK("Not forward CANCEL after timer J fired");
	    return 'NEXT';
	}
	elsif($result eq 'recv'){
	    $status=FVal('RQ.Request-Line.method',$frame);
#	    printf("status ====---- %s\r\n",$status);
	    if($status eq 'CANCEL'){
		JudgeResult('NG',"","Not forward CANCEL");
		return 'END';
	    }
	    else{
		return 'CONTINUE';
	    }
	}
	else{
	    return 'CONTINUE';
	}
    };
    NDReqAction($node,$func,"CANCEL",'','',32);

    $func=sub {
	my($result,$frame)=@_;
	
	if($result eq 'timeout'){
#	    SIPAddJudgmentResult('OK','S.RETRANS-CANCEL-OVER-JTIMER');
	    LOG_OK("Not forward CANCEL after timer J fired");
	    return 'END';
	}
	elsif($result eq 'recv'){
	    $status=FVal('RQ.Request-Line.method',$frame);
	    if($status eq 'CANCEL'){
#		SIPAddJudgmentResult('','S.RETRANS-CANCEL-OVER-JTIMER');
#		LOG_Err("Not forward CANCEL after timer J fired");
		JudgeResult('NG',"","Not forward CANCEL after timer J fired");
		return 'END';
	    }
	    else{
		return 'CONTINUE';
	    }
	}
	else{
	    return 'CONTINUE';
	}

    };
    NDReqAction($node,$func,"CANCEL",'','',10);


    NDDefEnd($node);
}

SEQ_UserAgentCaller();
SEQ_UserAgentCallee();
SEQ_Start('UA11');

#--------------------------------------------------------------#
# SCENARIO Start
#--------------------------------------------------------------#

# Echo from Proxy
#SQ_Proxy_Echo();

SEQ_Run();

#--------------------------------------------------------------#
# Finish
#--------------------------------------------------------------#

SIPFinishScenario();



#######################################################################

=head1 NAME

=begin html
 <A HREF="http://www.ipv6ready.org/">Please see SIP Conformance Test Profile (http://www.ipv6ready.org/)</A>

=end html

=head1 TARGET

=begin html
<pre>
 SIP PX (NUT)
</pre>

=end html

=head1 PARAMETER

=begin html
<blockquote>
<table border>
<tbody>

</tbody>
</table>
</blockquote>

=end html

=head1 ADDRESS

=begin html
<blockquote>
<table border>
<tbody>

</tbody>
</table>
</blockquote>

=end html

=head1 TOPOLOGY

=begin html
<pre>
 
</pre>

=end html

=head1 CONFIGURATION for NUT

=begin html
<blockquote>
<table border>
<tbody>

</tbody>
</table>
</blockquote>

=end html

=head1 INITIALIZATION

=begin html
<pre>
 
</pre>

=end html

=head1 TEST PROCEDURE

=begin html
<pre>
 
</pre>

=end html

=head1 JUDGEMENT

=begin html
<pre>
 
</pre>

=end html

=head1 REFERENCE

=begin html
<pre>
 
</pre>

=end html

=cut

